[
  {
    "HTML": {
      "INTRODUCTION": {
        "HTML Introduction": {
          "What is HTML?": "HTML (HyperText Markup Language) was created by Tim Berners-Lee in 1991 as a standard for creating web pages. It's a markup language used to structure content on the web, defining elements like headings, paragraphs, links, and images. HTML forms the backbone of web content. In layman's terms, HTML is like the skeleton of a website. It's a set of instructions that tells a web browser how to display text, images, videos, and other elements on a webpage. Think of it as the building blocks that create the structure and look of a website, similar to how bricks and mortar are used to build a house.\n\nIn a nutshell:\n\nHTML is the language of the web, used to create websites.\nHTML defines the barebone structure or layout of web pages that we see on the Internet.\nHTML consists of a set of tags contained within an HTML document, and the associated files typically have either a .html or .htm extension.\nThere are several versions of HTML, with HTML5 being the most recent version.",
          "Features of HTML": "It is platform-independent. For example, Chrome displays the same pages identically across different operating systems such as Mac, Linux, and Windows.Images, videos, and audio can be added to a web page (For example - YouTube shows videos on their website).HTML is a markup language and not a programming language.It can be integrated with other languages like CSS, JavaScript, etc. to show interactive (or dynamic) web pages.",
          "Why the Term HyperText & Markup Language?": "The term 'Hypertext Markup Language' is composed of two main words: 'hypertext' and 'markup language.' 'Hypertext' refers to the linking of text with other documents, while 'markup language' denotes a language that utilizes a specific set of tags.Thus, HTML is the practice of displaying text, graphics, audio, video, etc., in a certain way using special tags.Note: Tags are meaningful texts enclosed in angle braces, like '<...>'. For example, the '' tag. Each tag has a unique meaning and significance in building an HTML page, and it can influence the web page in various ways.",
          "History of HTML:": "In 1989, Tim Berners-Lee established the World Wide Web (www), and in 1991, he created the first version of HTML.From 1995 to 1997, further work was done to develop and refine different versions of HTML.In 1999, a committee was organized that standardized HTML 4.0, a version still used by many today.The latest and most stable version of HTML is 5, also known as HTML5.Feel free to read more history of HTML here on the HTML Wikipedia page but I will move ahead and cover important aspects of HTML.In the next tutorial, we'll continue our journey and understand how websites work."
        },
        "HTML Working": {
          "HTML Working": "You must have heard of frontend and backend. Frontend refers to the visible part of a website or app that users interact with, like the tables, images, and buttons. It's built using languages like HTML, CSS, and JavaScript. The backend, on the other hand, handles behind-the-scenes operations like storing and processing data when users interact with the frontend. It uses languages like Python, Ruby, and Java. In essence, frontend is what users see, while backend manages the functionality.",
          "How do websites work?": "When we want to access any information on the internet, we search for it using a web browser. The web browser retrieves the content from web servers, where it is stored in the form of HTML documents.An HTML document is created by writing code with specific tags in a code editor of your choice. The document is then saved with the '.html' extension. Once saved, the browser interprets the HTML document, reads it, and renders the web page.cwh tutorial imageThe text editor has the HTML code of a website. This website can now be viewed in a beautifully rendered format using a computer program known as a web browser.",
          "What is a Web Browser?": "A web browser is a program that understands HTML tags and renders them in a human-readable format that is easily viewable by people visiting the website. Developers write code in HTML because it's a straightforward way to instruct the web browser on what to display. In the next section, I'll show you how to set up VS Code for writing your own HTML code and rendering it in a web browser.",
          "What is an HTML Document?": "An HTML document is a text document saved with the '.html' or '.htm' extension, containing text and specific tags enclosed in '< >'. These tags provide the necessary instructions for configuring the web page. The tags themselves are standardized and fixed. The structure of an HTML document will be explained later in this HTML tutorial.",
          "What is a Rendered Page:": "The rendered page is the output screen of our HTML Document which is the page displayed on the browser.",
          "How does a basic website work?": "Web Browser(client) requests websites like www.codewithharry.com from the web server.Web server in return sends HTML, CSS, and JavaScript files to it.HTML, CSS, and JavaScript files are parsed by a web browser which is responsible for showing you a beautiful website.",
          "How does a browser work?": "A web browser plays a crucial role in parsing and rendering HTML code to the client. A web browser is a complex program that performs many tasks behind the scenes. Here's a summary of how it works:A browser is an application that reads HTML documents and displays them as web pages. Browsers can't access the content directly from where it's stored; this is where servers come into play.A server acts as an intermediary, listening to browser requests and fulfilling them by delivering the HTML document to the browser.Web browsers perform two main tasks: parsing and rendering.During the parsing stage, the browser receives raw bytes, which are converted into characters. These characters are then converted into tokens, which in turn are transformed into nodes. These nodes are organized into a tree-like data structure known as the DOM (Document Object Model).Once the DOM tree is constructed, the browser moves on to the rendering stage. At this point, each node in the DOM tree is rendered and displayed on the screen."
        },
        "HTML Installation": {
          "HTML Installation": "Let's get our hands dirty and start preparing to write some code. In this tutorial, we will install VS Code and some related extensions for faster and more efficient HTML development.",
          "What are the prerequisites to learning HTML?": "I can safely say that there are no prerequisites to learning HTML. HTML is the language of the web and is often the first step that web developers take in learning to code.",
          "Tools needed to make an HTML page:": "HTML Editor: It's a straightforward tool where every piece of HTML content must be written. You can use any text editor of your choice. In this tutorial, we're using Visual Studio Code because it's lightweight and open-source.Popular editors for HTML development include text editors like Notepad++ and TextEdit, code editors such as Sublime Text and Visual Studio Code, and full-fledged IDEs like WebStorm and Eclipse. Online platforms like CodePen and JSFiddle are also commonly used for quick HTML editing and testing.Note: You can write HTML even in a Notepad. Text editors like VS Code make these things easier.Browser: HTML tags are not displayed by browsers; instead, they are read and interpreted to render the web page. In a web browser, HTML structures are displayed in a styled and visually appealing form. In this tutorial, we are using Google Chrome. Other commonly used browsers include Chromium, Firefox, Safari on Mac, and Microsoft Edge.",
          "Installation & Setup of Visual Studio Code for HTML:": "We will install and set up HTML to optimize its utility for creating web pages. Additionally, we'll install extensions in Visual Studio Code to enhance its functionality. If you're unsure about which editor to use, you can confidently start with Visual Studio Code. You won't regret it; it's one of the best free code editors available in the market.Search for 'Visual Studio Code download' on GoogleDownload Visual Studio Code for your Operating System. I am using Windows so I will install it for Windows",
          "Live Server Extension": "In addition, we'll be installing the Live Server extension in our Visual Studio Code editor to view live reload pages.The Live Server extension is used to launch a local development server with a live reload feature for HTML pages."
        },
        "HTML Execution": {
          "HTML Execution": "Your Journey to Creating Your First Website Begins Here!Let's mark this as an important milestone: the creation of your first website! And what's a better way to start than with the traditional 'Hello, World!'?.Why 'Hello, World!'?In the programming world, 'Hello, World!' is more than just a phrase. It's a tradition, an emotion, a simple program that teaches you the syntax and gets you started. And guess what? HTML is no different!Web development courses Our first website will display the text 'Hello World'",
          "Creating a New File": "Click on 'Open Folder' and open a folder somewhere on your computer. I am opening a folder named html-tutorial.Once VS Code is open, you will want to create a new file:Click on the 'New File' icon in VS Code.Type the filename as 'index.html' and hit Enter.",
          "Pasting the code": "Now that your file is ready, copy the following code and paste it into your 'index.html' file.<!DOCTYPE html><html lang='en'><head>    <meta charset='UTF-8'>    <meta name='viewport' content='width=device-width, initial-scale=1.0'>    <title>Document</title></head><body>    Hello World</body></html>",
          "Going Live using the 'live server' extension": "To see your webpage in action, locate the 'Go Live' icon at the bottom-right corner of your VS Code window and click it. If you don't see this icon, you probably haven't installed the Live Server extension, which we discussed in a previous tutorial."
        },
        "HTML Page Structure": {
          "HTML Page Structure": "An HTML document is structured using a set of nested tags. Each tag is enclosed within <...> angle brackets and acts as a container for content or other HTML tags. Let's take a look at a basic HTML document structure:<!DOCTYPE html><html><head>    <title>Document</title></head><body>   <!-- content --></body></html>",
          "DOCTYPE Declaration": "<!DOCTYPE html>.The <!DOCTYPE html> declaration informs the web browser about the HTML version being used. The latest version is HTML5. But if this changes in the future (maybe 10 years down the line), the doctype declaration will be helpful!",
          "HTML Root Element": "<html>.The <html> tag is the root element that encapsulates all the content on the page.</html>.The </html> tag marks the end of the <html> section.",
          "Head Section": "<head>.The <head> tag contains metadata and links to external resources like CSS and JavaScript files.</head>.The </head> tag marks the end of the <head> section.",
          "Title Tag": "<title>Document</title>.The <title> tag sets the title of the web page, which is displayed in the browser's title bar or tab.",
          "Body Tag": "<body>.The <body> tag contains the visible content of the web page. This is where text, images, and other elements go</body>The </body> tag marks the end of the visible content of the web pageEvery HTML page should include at least these essential elements to define the basic layout. In upcoming tutorials, we'll dive deeper into the fascinating world of HTML.",
          "Summary": "The <!DOCTYPE html> tag specifies that the document is an HTML5 document.The <html lang='en'> tag defines the document to be in English.The <head> section contains metadata and the title of the webpage, which appears in the browser's title bar.The <body> section contains the content that will be displayed on the webpage.The h1 and p are two types of tags. We will learn about more tags in the later section."
        },
        "HTML Tags": {
          "HTML Tags": "If you want to build a beautiful website, tags are essential elements that help you achieve that. An HTML tag acts as a container for content or other HTML tags. Tags are words enclosed within < and > angle brackets They serve as keywords that instruct the web browser on how to format and display the content.",
          "Commonly used tags in HTML": "Here are some commonly used tags in HTML. These are the only tags used 70% of the time.",
          "Document Structure Tags": "<DOCTYPE html>: Specifies the document type.<html>: Encloses the entire HTML document.<head>: Contains meta-information and links to scripts and stylesheets.<body>: Contains the content of the web page.",
          "Metadata Tags": "<title>: Sets the title of the web page.<meta>: Provides metadata such as character set, author, and viewport settings.<link>: Links external resources like stylesheets.",
          "Text Formatting Tags": "<p>: Paragraph.<h1>, <h2>, <h3>, <h4>, <h5>, <h6>: Headings.<strong>: Strong emphasis (typically bold).<em>: Emphasis (typically italic).<br>: Line break.<hr>: Horizontal rule.",
          "List Tags": "<ul>: Unordered list.<ol>: Ordered list.<li>: List item.",
          "Hyperlink and Media Tags": "<a>: Anchor (used for links).<img>: Image.<audio>: Audio content.<video>: Video content.",
          "Form Tags": "<form>: Form.<input>: Input field.<textarea>: Text area.<button>: Button.<select>: Dropdown list.<option>: Options within a <select> or <datalist>.",
          "Table Tags": "<table>: Table.<tr>: Table row.<td>: Table data cell.<th>: Table header cell.<thead>: Table header group.<tbody>: Table body group.<tfoot>: Table footer group.",
          "Semantic Tags": "<header>: Header section.<footer>: Footer section.<article>: Article.<section>: Section.<nav>: Navigation.<aside>: Sidebar content.",
          "Paired and Unpaired HTML Tags": "Well, that was a really long list. Don't worry, we will study these in detail. In HTML, tags can be broadly categorized into two types:1. Paired Tags (Container Tags)These are tags that come in pairs, consisting of an opening tag and a corresponding closing tag. The content goes between these two tags.Opening Tag: The opening tag starts with < and ends with >. For example, <p>.Closing Tag: The closing tag also starts with < but includes a forward slash / before the tag name, and ends with >. For example, </p>.Examples:Paragraphs: <p>This is a paragraph.</p>Headings: <h1>This is a heading.</h1>2. Unpaired Tags (Self-Closing Tags or Stand-Alone Tags)These are tags that don't require a closing tag. They are self-contained, encapsulating all the information within a single tag.Self-Closing Tag: A self-closing tag starts with < and ends with /> (though the / is optional in HTML5). For example, <img /> or <br>.Note: Later if you happen to use React or a framework like Next.js, you will have to close the tag like this <br/> <hr/>. So it is better to cultivate the habit!Examples of self-closing tags:Line Break: <br/>Horizontal Rule: <hr/>Image: <img src='image.jpg' alt='An example image'/>"
        },
        "HTML Elements": {
          "HTML Elements": "Beginners often get confused between HTML elements, nested elements, and tags. Let's clarify the difference by understanding each one step-by-step.",
          "What is an HTML Element?": "An HTML element is a complete set that consists of a start tag (or opening tag), content, and an end tag (or closing tag).HTML Element = Start Tag + Content + End TagFor example:<h1>This is our first heading</h1>In this example, <h1> is the start tag, 'This is our first heading' is the content, and </h1> is the end tag. Together, they form an HTML element.",
          "What is a Nested HTML Element?": "A nested HTML element is an HTML structure where one element is placed inside another element.The enclosing element is often referred to as the 'parent,' while the enclosed element is called the 'child.'.Nested HTML Element = One HTML Element Inside Another HTML Element.For example:<h1><b>This is our first heading</b></h1>.In this example, the <b> element (child) is nested inside the <h1> element (parent).",
          "What is an Empty HTML Element?": "An empty HTML element is one that does not have a closing tag or content. These elements are also known as 'void elements' or 'self-closing elements.'Empty HTML Element = Tags with No Content.For example:.<br />.This is a break tag, which has no content and no closing tag. It's used to insert a line break within text or other inline elements. The <hr /> tag, used for horizontal rules, is another example of an empty or void element.",
          "HTML Tags vs. Elements": "HTML Tags HTML tags are the markers that define the start and end of an element. They are wrapped in angle brackets, like <p> and </p>. HTML Elements. An HTML element includes an opening tag, content, and a closing tag, forming a complete set. For example, <p>This is a paragraph.</p>. Key Takeaways. Tags set boundaries; elements include tags plus content. Tags come in pairs (most of the time), whereas elements may include nested elements. Self-closing or void elements like <br /> are still considered elements, even though they don't have a closing tag or content. Elements can be \"parent\" or \"child\" when nested, but tags cannot."
        },
        "HTML Attributes": {
          "HTML Attributes": "HTML attributes are used to define the characteristics of an HTML element. They are placed within the element's opening tag and consist of two parts: the name and the value. Name: Specifies the property for that element Value: Sets the value of that property for the element.",
          "Types of HTML Attributes": "There are three main types of HTML attributes:Core Attributes: These are basic attributes that can be applied to most HTML elements. Examples include id, class, and style.Internationalization Attributes: These attributes help adapt the document to different languages and regions. Examples include lang and dir.Generic Attributes: These attributes provide additional information about the element but don't necessarily affect its appearance or behavior. Examples include data-* attributes for storing custom data private to the page or application.Core attributes are some of the most widely used attributes in HTML. There are four main types:id.class.title.style.ID Attribute.The ID attribute is used to assign a unique identifier to an HTML element. Each element with an ID has its own unique identity, similar to how each individual has a unique identity. Multiple elements cannot have the same ID.Example:.<p id='html'>This is an HTML tutorial</p>.<p id='python'>This is a Python tutorial</p>.In this example, the ID attribute helps to distinguish between two paragraphs by having different values: 'html' and 'python'.Class Attribute.The class attribute is used to associate an HTML element with a particular class, typically for styling or JavaScript manipulation. Unlike the ID attribute, the class attribute is not unique, and multiple elements can share the same class.Title Attribute.The title attribute provides additional information about an element and is often displayed as a tooltip when the mouse hovers over it.Example:.<h4 title='hello, motto'>Title attribute</h4>.Output:.Style Attribute.The style attribute allows for inline styling of HTML elements. It is used in conjunction with CSS properties to directly style individual elements within the HTML code.Case Sensitivity.The HTML standard is flexible about the case of attribute names, allowing them to be written in either uppercase or lowercase, such as 'title' or 'TITLE.' However, for best practices and compatibility with stricter document types like XHTML, the W3C recommends using lowercase attributes."
        },
        "HTML Comments": {
          "HTML Comments": "Comments in HTML are like little notes you leave in your code for yourself or other people. These notes help make the code easier to understand but don't show up on the actual website. The web browser just skips over them!",
          "Key Points About HTML Comments": "Comments are ignored by web browsers.They aid in code readability and documentation.HTML comments are denoted by <!-- content -->.The shortcut key for commenting out code is Ctrl + /.HTML supports both single-line and multi-line comments.",
          "Types of Comments in HTML": "HTML primarily supports two types of comments:.Single-line Comments.Single-line comments are contained within one line. They are useful for short annotations.Example:.<!-- This is a single-line comment -->.As you can see in the video below, the text inside the comment is not rendered.Multi-line Comments.Multi-line comments span across multiple lines, making them ideal for detailed explanations or temporarily disabling blocks of code.Example:.<!--   This is a multi-line comment.  It spans multiple lines.-->"
        },
        "HTML Id & Classes": {
          "HTML Id & Classes": "HTML offers multiple ways to select and style elements. Two of the most commonly used selectors are IDs and Classes. This blog explores what they are, how to use them, and their differences.",
          "What is an ID?": "An ID is an attribute, a unique identifier assigned to only one HTML element within a page. It is often used for unique styling and JavaScript manipulations.<div id='myUniqueID'>This is a div with an ID.</div>",
          "What are Classes?": "The class attribute lets you give the same name to multiple HTML elements. That way, you can easily change their look or behavior all at once. Classes are not unique and can be assigned to multiple elements. They are generally used for applying the same styles or behaviors to a group of elements.<div class='myClass'>This is a div with a class.</div>.<p class='myClass'>This is a paragraph with the same class.</p>",
          "The Style Tag": "The style tag in HTML is used to include embedded CSS (Cascading Style Sheets) within an HTML document. It is commonly placed within the <head> section of the HTML file, although it can technically be used in the <body> as well. The style tag allows you to define the look and feel of various HTML elements on the page, including their colors, sizes, margins, and other visual styles.Here's a simple example:.<!DOCTYPE html>.<html>.<head>.  <style>.    /* CSS rules go here */.    p {.      color: blue;.      font-size: 18px;.    }.    .highlight {.      background-color: yellow;.    }.  </style>.</head>.<body>.  <p>This is a blue paragraph </p>.  <p class='highlight'>This paragraph has a yellow background </p>.</body>.</html>.In this example, we have targeted the second paragraph by its class name in CSS. The style tag is used to add CSS right into HTML. We will learn about CSS and selectors later in the CSS tutorial.Using IDs and Classes in CSS.In CSS, elements with IDs are selected using a hash (#) symbol before the ID, and elements with classes are selected using a dot (.) before the class name./* CSS for ID */.#myUniqueID {.  background-color: yellow;.}. /* CSS for Class */..myClass {.  font-size: 18px;.}"
        }
      },
      "HTML Basics": {
        "Skelten Tags": {
          "Skeletal Tags": "Let's discuss some basic HTML tags known as 'skeletal tags'.",
          "<html> Tag: 'Root of an HTML Page'": "Syntax:. <html>   <!-- Content --> </html> The <html> tag is the root element that wraps all the content on the page. It generally contains two main sections: the header (<head>...</head>) and the body (<body>...</body>).",
          "<head> Tag: 'Header Part of an HTML Page'": "Syntax:. <head>.   <!-- Header Content --> . </head>. The <head> tag contains meta information and the title of the document. While the title appears in the browser tab, meta information is often used for SEO purposes.",
          "<title> Tag: 'Title Part of an HTML Page'": "Syntax:. <title>.   // Title Name. </title>. The <title> tag defines the title of the document, which is displayed in the browser's title tab.",
          "<body> Tag: 'Body Part of an HTML Page'": "Syntax:. <body>.   // Body Content. </body>. The <body> tag encloses the main content of the page, and everything within this tag is displayed in the browser."
        },
        "Heading Tags": {
          "Heading Tags": "In HTML, heading tags ranging from <h1> to <h6> are used to define the structure and layout of text on a web page. These tags help create a hierarchical organization of content, making it easier for both users and search engines to understand the page's content.The <h1> tag is generally used for the main title and is the largest and most prominent, while <h2> to <h6> tags are used for subheadings, further subheadings and so on. Proper use of heading tags not only improves the readability of a web page but also optimizes it for search engine ranking in Google.",
          "<h1> Tag: First-Level Heading": "The <h1> tag defines the first-level heading and is typically the largest and boldest among all the heading tags. It is often used for the main title of the page. <h1>   <!-- Heading content --> </h1>.",
          "<h2> Tag: Second-Level Heading": "The <h2> tag is used for second-level headings and is slightly smaller than the <h1> tag. This is commonly used for section titles. <h2>   <!-- Heading content --> </h2>.",
          "<h3> Tag: Third-Level Heading": "The <h3> tag is used for third-level headings. These are smaller than <h2> tags and are often used for sub-sections within an <h2> section. <h3>   <!-- Heading content --> </h3>.",
          "<h4> Tag: Fourth-Level Heading": "The <h4> tag defines a fourth-level heading, which is smaller than the <h3> tag. It's often used for sub-sections within an <h3> section. <h4>.   <!-- Heading content -->. </h4>.",
          "<h5> Tag: Fifth-Level Heading": "The <h5> tag is used for fifth-level headings and is smaller than <h4> tags. These are rarely used but can be helpful for deeply nested sections. <h5>.   <!-- Heading content -->. </h5>.",
          "<h6> Tag: Sixth-Level Heading": "The <h6> tag defines the sixth-level heading and is the smallest among all the heading tags. It's rarely used but can serve specific formatting needs. <h6>.   <!-- Heading content -->. </h6>.",
          "Summary": "<h1> Tag: Used for the main title of the page; largest and most prominent heading. <h2> Tag: Used for major section headings; smaller than <h1> but still quite prominent. <h3> Tag: Used for sub-sections within an <h2> section; smaller than <h2> but larger than <h4>. <h4> Tag: Often used for headings within an <h3> section; useful for further breaking down content. <h5> Tag: Rarely used; suitable for deeply nested sections or less important headings. <h6> Tag: The smallest heading tag; used for very specific or minor headings, rarely seen in general usage."
        },
        "Paragraph Tag": {
          "Paragraph Tag": "To create well-structured text in your HTML document, the <p> tag is essential for defining paragraphs.",
          "<p> Tag: Defining a Paragraph in HTML": "The <p> tag is used to format text into distinct paragraphs. Each paragraph element is separated by automatic empty line spaces above and below the content, providing a clear visual separation. The tag must be closed with its corresponding </p> tag. <p>.   <!-- Paragraph content -->. </p>.",
          "Attributes and Styling": "While the <p> tag is straightforward, you can enhance its functionality using various attributes like class or id for CSS styling. You can also include inline styles using the style attribute. <p class='example' style='color: blue;'>.   This is a styled paragraph. </p>. Best Practices. It's advisable to use the <p> tag for textual content and not for layout control. For layout purposes, consider using HTML5 semantic tags like <section>, <article>, or CSS techniques. Don't worry, we will look into semantic tags and other techniques later in this tutorial."
        },
        "Horizontal Line Tag": {
          "Horizontal Line Tag": "To add a horizontal line in your HTML document, the <hr> tag comes in handy.",
          "How to use the <hr> tag?": "The syntax of the hr tag looks something like this. <hr>. The <hr> tag is an empty or self-closing tag, meaning it doesn't require a closing tag. It serves as a visual separator, dividing different sections of your document with a horizontal line."
        },
        "Line Break Tag": {
          "Line Break Tag": "To insert a line break in your HTML document, you can utilize the <br> tag. <br> tag is used to insert line breaks in text or paragraphs The syntax for the <br> tag looks like this: <br> The <br> tag is commonly referred to as an empty or self-closing tag, meaning it doesn't require a closing tag. This tag is responsible for breaking text lines or separating paragraphs. When implemented, it automatically moves the text following the tag to the next line It's particularly useful in formatting textual content where line breaks are essential for readability or visual layout. For instance, it can be used in addresses, poems, or song lyrics to preserve the original line structure."
        },
        "Anchor Tag": {
          "Anchor Tag": "Links are fundamental to navigating the web. In HTML, links are created using the <a> tag, also known as the Anchor tag.",
          "Key Characteristics of HTML Links": "Specified by the <a> tag. Also known as hyperlinks. Used to link one document to another. Includes a closing tag </a>.",
          "Syntax of HTML Links": "<a href='Your specified path'>.    content.</a>",
          "Essential Attributes of the Anchor Tag": "HTML links primarily use two attributes: href attribute: Defines the URL the link points to target attribute: Specifies where to open the linked document. Target Attribute Value _blank: Opens the linked document in a new window or tab _top: Opens document in the full body of the window _self: Opens document in the same window or tab (default behavior) _parent: Opens the linked document in the parent frame.",
          "Linking to Specific Page Sections": "To link to a specific section of a webpage, you can:. Use the name or id attribute of the target section. Use a hyperlink with a hash (#) followed by the target id or name. Example Let's say you have a long webpage with multiple sections, and you want to create a link at the top that, when clicked, takes the user directly to a specific section further down the page. You can do this using HTML links that target specific sections. <!DOCTYPE html>. <html>. <head>.   <title>My Webpage</title>. </head>. <body>.     <!-- Link at the top -->.   <a href='#gardening-tips'>Go to Gardening Tips</a>.     <!-- Some content -->.   <p>Here is some other content...</p>.     <!-- Gardening Tips Section -->.   <h2 id='gardening-tips'>Gardening Tips</h2>.   <p>This section provides tips on how to garden...</p>.   </body>. </html>.",
          "Link Colors": "inks typically appear in different colors based on their state:. Active: Displayed in red and underlined like this sentence Visited: Appears purple and underlined like this sentence Unvisited: Shown as blue and underlined like this sentence You can customize these colors using CSS to better match the style of your website."
        },
        "Image Tag": {
          "Image Tag": "Images play a crucial role in enhancing web pages by providing a visual context that complements textual content. In HTML, the <img> tag is used to embed images into web pages.",
          "Basic Syntax for Embedding Images": "This is how the syntax to embed an image in HTML looks like:.<img src='image's path' />",
          "Key Features of the <img> Tag": "It's a self-closing tag, meaning it doesn't require a corresponding closing tag. Commonly used attributes include the 'alt' attribute for image descriptions and the 'src' attribute for specifying the image location. Supports various image formats including PNG, JPEG, JPG, and GIF. Setting Mandatory Attributes. The 'src' and 'alt' attributes are essential for the proper functioning of the <img> tag. src attribute: Specifies the path to the image file. alt attribute: Provides a text description for the image. <img src='images/profile_picture.jpg' alt='Profile Picture' />. Note: To find the image's location, right-click on the image, go to properties, and check the location field. Setting Image Dimensions. Although dimensions can be set using the 'width' and 'height' attributes in the <img> tag, modern best practices recommend using CSS for this purpose. <img src='image.png' alt='Description' width='300' height='100' />. Setting the width and height attributes for images in HTML can have a positive impact on Search Engine Optimization (SEO). Specifying these dimensions in the <img> tag allows browsers to allocate the correct amount of space on a web page even before the image is fully loaded. This prevents layout shifts, improving the Cumulative Layout Shift (CLS) score—a key metric in Google's Core Web Vitals. A better CLS score can lead to a higher page ranking in search engine results. Note: Styling dimensions and other properties are now more commonly managed through CSS for better flexibility and maintainability."
        },
        "Pre Tag": {
          "Pre Tag": "The <pre> tag serves as an indispensable tool in HTML for displaying preformatted text, such as code snippets in various programming languages.",
          "What Does the <pre> Tag Do?": "The <pre> tag preserves the original formatting of text, making it an excellent choice for displaying code where spacing and indentation are key.",
          "Syntax for Using the <pre> Tag": "pre>.    <!-- code snippet in any programming language -->.</pre>",
          "Key Features": "The <pre> tag maintains both spaces and line breaks, ensuring that text appears exactly as it was originally formatted. The <pre> tag has both an opening tag <pre> and a closing tag </pre>. Additional attributes can also be added for further customization.",
          "When to Use the <pre> Tag?": "The <pre> tag is most effective when you want the text to display on your HTML page exactly as it was typed, without any formatting changes. It is especially useful for displaying code snippets or preformatted text from data files."
        }
      },
      "INLINE and BLOCK ELEMNETS": {
        "HTML Inline Elements": {
          "HTML Inline Elements": "Inline Elements don't start on a new line. It only takes the width required to cover the content.HTML elements are generally divided into two categories: Block-level and Inline elements.No matter what the width is, block elements will always start on a new line and take up the full available width of their container by default. This means they essentially claim all the horizontal space for themselves, pushing any content that comes after them to a new line. But the inline elements will fit snugly within the flow of other elements, taking up only as much width as their content requires.",
          "What are Inline Elements?": "Inline elements do not start on a new line and only take up as much width as necessary. They are part of the flow within other elements. Inline elements can contain other inline elements, but they generally should not contain block-level elements. For example, you could nest a <strong> (strong emphasis) element within a <span> (a generic inline container) element, like so: <span>This is <strong>important</strong> text</span> However, placing a block-level element like a <div> or <p> inside an inline element like <span> or <a> is typically considered incorrect HTML and could lead to unexpected behavior in terms of layout and styling <!-- This is generally considered incorrect --> <span>This is <div>not recommended</div> text </span>.",
          "Common Inline Elements": "<span>: A generic inline container for text.<a>: Defines a hyperlink.<strong>: Defines important text.<em>: Defines emphasized text.<img>: Embeds an image.<input>: Defines an input control.",
          "Styling Inline Elements": "You can use CSS to style inline elements. However, some properties like width and height may not apply. Here is an exhaustive list of the most used Inline Elements: <a> <abbr> <acronym> <button> <br> <big> <bdo> <b> <cite> <code> <dfn> <i> <em> <img> <input> <kbd> <label> <map> <object> <output> <tt> <time> <samp> <script> <select> <small> <span> <strong> <sub> <sup> <textarea>."
        },
        "HTMl Block Elements": {
          "HTML Block Elements": "You already know about HTML inline elements. All HTML tags have specific display behavior: they are either block-level elements or inline elements.",
          "What are Block-level Elements?": "Block-level elements are those that start on a new line and take up the entire width of their container by default. They essentially claim all the horizontal space for themselves, pushing any content that comes after them to a new line.",
          "Characteristics of Block-level Elements:": "Always start on a new line.Take up the full width available.Width and height can be controlled via CSS.Can contain other block-level as well as inline elements.",
          "Common Block-level Elements:": "<h1>,<h2>,<h3>,<h4>,<h5>,<h6> - Headings. <p> - Paragraphs. <hr> - Horizontal rule. <address> - Address information. <article> - Article content. <aside> - Sidebar content. <blockquote> - Block quotations. <canvas> - Drawing area. <dd> - Description in a description list. <div> - Generic container. <dl> - Description list. <dt> - Term in a description list. <fieldset> - Group of related form elements. <figcaption> - Caption for a figure. <figure> - Image or media with a caption. <footer> - Footer of a section or page. <form> - HTML form. <header> - Header of a section or page. <li> - List item. <main> - Main content of a document. <nav> - Navigation links. <noscript> - Alternate content when JavaScript is not enabled. <ol> - Ordered list. <ul> - Unordered list. <pre> - Preformatted text. <section> - Standalone section in a document. <table> - Table. <video> - Video content."
        }
      },
      "HTML LISTS": {
        "HTML Lists": {
          "HTML Lists": "Our day-to-day lives often involve the use of lists. For example, when we go shopping, the bill we receive includes a list of all the items we've purchased. In a similar manner, web developers use lists to neatly display data on websites.",
          "Types of HTML Lists": "HTML provides different types of lists to display data in various forms. Each list contains one or more list items. Unordered List: Displays items using bullets Ordered List: Displays items in a numerical sequence, and supports various numbering styles like Arabic numerals, Roman numerals, and so on Definition List: Organizes items in a format similar to a dictionary, with terms and their corresponding definitions."
        },
        "HTML Unordered Lists": {
          "HTML Unordered List": "An unordered list is a list of items that are not arranged in any specific, sequential order. Unlike ordered lists, the items in an unordered list are typically marked with bullet points, dashes, or other symbols to indicate list membership, but these markers do not imply any particular order.",
          "Key Characteristics of Unordered Lists": "No specific sequence is required. Typically displayed as bullet points. Defined using the <ul> tag. Individual items use the <li> tag.",
          "Basic Example": "<ul>.  <li>Pen</li>.  <li>Pencil</li>.  <li>Eraser</li>.</ul>.Output:.Pen.Pencil.Eraser.Customizing Bullet Points with 'type' Attribute.You can specify the style of bullet points using the type attribute. It supports three values:.disc - default bullet style.square.circle.Example Using Square Bullets:.<ul type='square'>.  <li>Notebook</li>.  <li>Marker</li>.</ul>"
        },
        "HTML Ordered Lists": {
          "HTML Ordered List": "An ordered list is a list of items that are arranged in a specific, sequential order. Each item in the list is usually numbered to indicate its position in the sequence. Ordered lists are commonly used when the sequence of the items is important, such as in step-by-step instructions or rankings.",
          "Key Points": "Ordered lists are used for items that follow a sequence.They are created using the <ol> (Ordered List) tag.List items are enclosed within <li> (List Item) tags.",
          "Basic Example": "<ol>.  <li>Mango</li>.  <li>Orange</li>.  <li>Litchi</li>.</ol>.Output:.Mango.Orange.Litchi.Setting the 'type' Attribute.The type attribute specifies the style of numbering. You have several options:.Uppercase Roman Numerals: Use type='I'.Lowercase Roman Numerals: Use type='i'.Arabic Numerals: Use type='1' (This is the default if the type attribute is not specified).Lowercase Alphabetical Letters: Use type='a'.Uppercase Alphabetical Letters: Use type='A'.Setting the 'start' Attribute.The start attribute specifies the starting number for the list.<ol type='A' start='3'>.  <li>Pen</li>.  <li>Pencil</li>.</ol>.Output:.3 Pen.4 Pencil."
        },
        "HTML Definition List": {
          "HTML Definition Lists": "A Definition List in HTML is used to represent a list of terms along with their corresponding descriptions or definitions. The Definition List is created using the <dl> (Definition List) element, which wraps around one or more pairs of <dt> (Definition Term) and <dd> (Definition Description) elements.",
          "Definition List Example": "Here's a simple example to illustrate:.<h1>HTML Definition List</h1><dl>  <dt>HTML</dt>  <dd>HyperText Markup Language: The standard language for creating web pages</dd>  <dt>CSS</dt>  <dd>Cascading Style Sheets: A stylesheet language used for describing the look and formatting of a document written in HTML</dd>  <dt>JavaScript</dt>  <dd>A programming language commonly used in web development to add interactive features</dd></dl>Understanding the exampleIn this example:<dl> is the container for the list<dt> defines the terms that you want to explain<dd> contains the definitions or explanations for the terms."
        }
      },
      "HTML TABLES": {
        "HTML Tables": {
          "HTML Tables": "HTML tables allow you to arrange data like text, images, and links in rows and columns. You use the <table> tag to start and end a table.",
          "Syntax of HTML Table": "<table>.  // table content.</table>",
          "Key Elements of HTML Table": "<table>: Defines the table itself. <tr>: Used for table rows. <th>: Used for table headings. <td>: Used for table cells (data).",
          "Basic Table Structure": "<table>.  <tr>.    <th>Name</th>.    <th>Age</th>.  </tr>.  <tr>.    <td>Harry</td>.    <td>100</td>.  </tr>.</table>",
          "rowspan and colspan Attributes": "Rowspan: If you want a table cell to span multiple rows, you can use the rowspan attribute. <td rowspan='value'> Colspan: If you want a table cell to span multiple columns, you can use the colspan attribute <td colspan='value'>.",
          "Examples": "Here are simple examples to demonstrate the use of rowspan and colspan in HTML tables. Example for Colspan: <table border='1'>   <tr>     <td colspan='2'>Merged Columns</td>   </tr>   <tr>     <td>Column 1</td>     <td>Column 2</td>   </tr> </table> Example for Rowspan: <table border='1'>   <tr>     <td>Row 1, Column 1</td>     <td rowspan='2'>Merged Rows</td>   </tr>   <tr>     <td>Row 2, Column 1</td>   </tr> </table>."
        },
        "More on Tables": {
          "More on Tables": "Let's take a closer look at HTML tables and delve into some more aspects of using tables in HTML.",
          "Adding a Caption": "To add a title to your table, you can use the <caption> element. This element helps both in terms of SEO and accessibility. <table>   <caption>Student Details</caption>   <!-- Rest of the table here --> </table> ",
          "Table Headers and Footers": "Besides <th> for individual header cells, HTML tables allow you to group header or footer content using <thead> and <tfoot>. <table>.   <thead>.     <!-- header content -->.   </thead>.   <tfoot>.     <!-- footer content -->.   </tfoot>.   <tbody>.     <!-- body content -->.   </tbody>. </table>",
          "Column Groups": "You can use the <colgroup> and <col> elements to apply styles to an entire column in an HTML table. <table>   <colgroup>     <col style='background-color:yellow'>   </colgroup>   <!-- rest of the table --> </table>",
          "Accessibility in Tables": "To make your tables more accessible, you can use the scope attribute in <th> elements to specify if they are headers for columns, rows, or groups of columns or rows.<th scope='col'>Name</th> <th scope='col'>Age</th>",
          "Sample HTML Table": "Here is an example HTML table with all the important elements:. <table border='1'>   <!-- Caption -->   <caption>Employee Information</caption>   <!-- Table Header -->   <thead>     <tr>       <th>ID</th>       <th>Name</th>       <th>Position</th>       <th>Salary</th>     </tr>   </thead>   <!-- Table Body -->   <tbody>     <tr>       <td>1</td>       <td>Alice</td>       <td>Developer</td>       <td>$80,000</td>     </tr>     <tr>       <td>2</td>       <td>Bob</td>       <td>Designer</td>       <td>$70,000</td>     </tr>     <tr>       <td>3</td>       <td>Carol</td>       <td>Manager</td>       <td>$90,000</td>     </tr>   </tbody>   <!-- Table Footer -->   <tfoot>     <tr>       <td colspan='3'>Total Employees</td>       <td>3</td>     </tr>   </tfoot> </table>. "
        }
      },
      "HTML FORMS": {
        "Introduction to HTML FORM": {
          "Introduction to HTML Forms": "HTML forms are essential for collecting user input on web pages. Whether it's a search bar, a login screen, or a multi-field registration form, HTML forms play a key role in web interactions. They enable users to submit data, which can be processed, stored, or returned by a server.",
          "Why Do We Use Forms?": "Forms serve as the gateway between the user and the server, allowing for dynamic, interactive web experiences. They are crucial for tasks such as user authentication, data submission, feedback collection, and more. Simply put, forms make websites more engaging and functional.",
          "HTML Forms Structure:": "The fundamental structure of an HTML form is encapsulated within the <form> tags. Inside these tags, you'll place various form controls like text fields, checkboxes, radio buttons, and buttons for submitting the form. <form action='/submit' method='post'>     <!-- Text input for username -->     <label for='username'>Username:</label>     <input type='text' id='username' name='username' required>     <br><br>     <!-- Password input -->     <label for='password'>Password:</label>     <input type='password' id='password' name='password' required>     <br><br>     <!-- Radio buttons for gender -->     <label>Gender:</label>     <input type='radio' id='male' name='gender' value='male'>     <label for='male'>Male</label>     <input type='radio' id='female' name='gender' value='female'>     <label for='female'>Female</label>     <br><br>     <!-- Submit button -->     <input type='submit' value='Submit'> </form>",
          "How to Use Form Controls?": "The <input> tag is commonly used to create form controls. The attributes of this tag define the control's behavior. <input type='' name='' value='' The 'type' attribute specifies the type of input control (e.g., text, password, checkbox) The 'name' attribute is used for identifying the control, especially when the data is sent to the server The 'value' attribute sets a default value for the control, which the user can overwrite."
        },
        "HTML Input Types": {
          "HTML Input Types": "Input types in HTML forms are the backbone of interactive web applications. They allow users to send information to web servers for various purposes like searching, logging in, or providing feedback. In this blog, we'll explore common HTML input types: text, password, radio, and checkbox.",
          "Text Input": "The text input type is the most basic form of input and is widely used for collecting simple text data. <input type='text' name='username' placeholder='Enter your username'> In the above example, the placeholder attribute provides a hint to the user about what to enter.",
          "Password Input": "The password input type is similar to the text type but hides the characters entered by the user for security reasons. <input type='password' name='password' placeholder='Enter your password' ",
          "Radio Buttons": "Radio buttons are used when you want the user to select only one option from a set of choices. <input type='radio' id='male' name='gender' value='male'> <label for='male'>Male</label> <input type='radio' id='female' name='gender' value='female'> <label for='female'>Female</label>",
          "Checkbox": "Checkboxes allow the user to select multiple options from a set. <input type='checkbox' id='subscribe' name='subscribe' value='yes'> <label for='subscribe'>Subscribe to newsletter</label>",
          "More Input Types": "Here is a comprehensive list of input types you can use in HTML:. Input Type\\tDescription\\ntext\\tAllows the user to type a single line of text\\npassword\\tAllows the user to type a password\\nsubmit\\tRepresents a button that, when pressed, submits the form\\nreset\\tRepresents a button that, when pressed, resets all the form controls to their initial values\\nradio\\tRepresents an option in a set of options that are mutually exclusive with each other\\ncheckbox\\tRepresents an option in a set that may be selected independently of other options\\nbutton\\tRepresents a clickable button\\ncolor\\tAllows the user to select a color\\ndate\\tAllows the user to select a date\\ndatetime-local\\tAllows the user to select a date and time with no time zone\\nemail\\tAllows the user to enter an email address\\nfile\\tAllows the user to select one or more files from their device storage\\nhidden\\tRepresents a value that is not displayed but is submitted to the server\\nimage\\tDefines an image that acts as a submit button\\nmonth\\tAllows the user to select a month and year\\nnumber\\tAllows the user to enter a number\\nrange\\tAllows the user to select a number from a range\\nsearch\\tAllows the user to enter a search query string\\ntel\\tAllows the user to enter a telephone number\\ntime\\tAllows the user to select a time\\nurl\\tAllows the user to enter a URL\\nweek\\tAllows the user to select a week."
        },
        "Textareas & Select": {
          "Textarea & Select": "In addition to the basic input types, HTML forms offer other controls like textarea and select for richer user interaction. These elements allow for more complex data collection and provide a better user experience. In this blog, we will dive into these form controls and provide examples.",
          "The Textarea Element": "The textarea element is used when you need multiline text input from the user. This is particularly useful for comments, reviews, or any other type of input where the length is unpredictable. <textarea name='comment' rows='4' cols='50'>       Enter your comment here  </textarea> The rows and cols attributes define the visible dimensions of the textarea.",
          "The Select Element": "The select element creates a dropdown menu for the user. It is useful when you have a predefined list of options for the user to choose from. <select name='fruits'>       <option value='apple'Apple</option>       <option value='banana'>Banana</option>       <option value='cherry'>Cherry</option> </select> Each option inside the select tag represents an item in the dropdown list.",
          "Combining Textarea and Select": "You can combine textarea and select in the same form to capture varied types of user input. <form action='/submit'>       <textarea name='comment' rows='4' cols='50'>Enter your comment here...</textarea>       <select name='fruits'>         <option value='apple'>Apple</option>         <option value='banana'>Banana</option>         <option value='cherry'>Cherry</option>       </select>       <input type='submit' value='Submit'> </form>"
        },
        "More On Forms": {
          "More on forms": "HTML forms are the backbone of interactive websites. They allow users to submit data, which can be processed on the server. While we have covered basic input types in previous tutorials, this tutorial aims to delve deeper into form attributes, both common and new HTML5 additions. We'll also look at HTML5 validation attributes to ensure data integrity.",
          "Common Attributes": "action. The action attribute specifies the URL where the form data should be sent after submission. <form action='/submit.php. method='POST'>. </form>. method. The method attribute defines how data is sent. The two most common methods are GET and POST. <form action='/submit.php' method='POST'>. </form>. name. The name attribute specifies the name for the form element, making it easier to reference in scripts or the server-side code. <input type='text' name='username'>",
          "New HTML5 Attributes": "placeholder. This attribute provides a hint to the user as to what can be entered in the field. <input type='text' placeholder='Enter your username'>. required. The required attribute makes a field mandatory to fill out. <input type='text' required>. autofocus. The autofocus attribute automatically focuses the cursor on the particular input when the page loads. <input type='text' autofocus>",
          "HTML5 Validation Attributes": "required. As mentioned above, this attribute makes a field mandatory. <input type='text' required>. pattern. The pattern attribute specifies a regular expression that the input must match to be valid. <input type='text' pattern='[a-zA-Z0-9]+''>"
        }
      },
      "HEAD ELEMENTS": {
        "HTML Meta Tags": {
          "HTML Meta Tags": "The <meta> tags in HTML provide metadata about the HTML document. Metadata is data (information) about data. <meta> tags always go inside the document's <head> tag and are typically used to specify the character set, page description, keywords, author, and other metadata. Below is an example HTML code snippet that includes various types of <meta> tags commonly used: <!DOCTYPE html> <html lang='en'> <head>     <meta charset='UTF-8'> <!-- Character encoding -->     <meta name='viewport' content='width=device-width, initial-scale=1.0'> <!-- Responsive design -->     <meta http-equiv='X-UA-Compatible' content='ie=edge'> <!-- Internet Explorer compatibility -->     <meta name='description' content='This is a description of the web page'> <!-- Description for search engines -->     <meta name='keywords' content='HTML, CSS, JavaScript'> <!-- Keywords for search engines -->     <meta name='author' content='Your Name'> <!-- Author name -->     <title>Document</title> </head> <body>     <!-- Your content here --> </body> </html>",
          "Explanation of each meta tag:": "Character Encoding (charset): <meta charset='UTF-8'> sets the character encoding for the webpage. UTF-8 is the most common and recommended. Viewport: <meta name='viewport' content='width=device-width, initial-scale=1.0'> sets the viewport to scale the page to the screen width, useful for responsive design IE Compatibility: <meta http-equiv='X-UA-Compatible' content='ie=edge'> specifies that the page should be rendered using the latest rendering engine available on Internet Explorer Description: <meta name='description' content='This is a description of the web page'> provides a brief description of the webpage, which search engines may use in search results Keywords: <meta name='keywords' content='HTML, CSS, JavaScript'> specifies keywords for the webpage, which were historically used by search engines but are less relevant today Author: <meta name='author' content='Your Name'> indicates the name of the author of the webpage.",
          "How to add favicon in HTML?": "A favicon is a small icon that appears next to your website's title in browser tabs. It helps in branding and easy identification among multiple tabs. Step 1: Create/Choose Favicon Make a square image, usually 16x16 or 32x32 pixels, in .ico format. You can create a favicon from this website Step 2: Upload Favicon Place the .ico file in your website's root directory, where index.html is located Step 3: Update HTML Insert the following code in the <head> section of your index.html file: <link rel='icon' href='favicon.ico' type='image/x-icon'> Replace favicon.ico with your file's path if different Step 4: Test Open your site in different browsers to make sure the favicon appears In the next tutorial, we will talk about more HTML head elements."
        },
        "Link & Script Tags": {
          "Link & Script Tags": "The <link> and <script> tags are essential elements within an HTML document's <head> section. They serve various purposes, like linking external stylesheets or including JavaScript files.",
          "The <link> Tag": "The <link> tag is commonly used to link external stylesheets to an HTML document. It's a self-closing tag, meaning it doesn't require a closing tag. Below is an example HTML code snippet that includes a <link> tag to link an external stylesheet <link rel='stylesheet' type='text/css' href='styles.css'>.",
          "The <script> Tag": "The <script> tag is used to include JavaScript code or files in an HTML document. Unlike the <link> tag, the <script> tag must be closed with a </script> tag. Below is an example HTML code snippet that includes a <script> tag to link an external JavaScript file <script src='script.js' type='text/javascript'></script>."
        }
      },
      "HTML MEDIA": {
        "Video & Audio Tags": {
          "Video & Audio Tags": "This tutorial aims to provide a comprehensive guide on using <video> and <audio> tags in HTML to embed media files.",
          "The <video> Tag": "The <video> tag is used to embed video files in an HTML document. It supports multiple attributes to control the video playback. Example usage: <video src='video.mp4' controls></video> Attributes for <video> Tag src: Specifies the path to the video file controls: Adds video controls, like play, pause, and volume autoplay: Automatically starts playing the video when the page loads loop: Repeats the video once it ends muted: Mutes the video by default poster: Specifies an image to be displayed before the video starts playing width and height: Specifies the dimensions of the video.",
          "The <audio> Tag": "The <audio> tag is used to embed audio files in an HTML document. It also supports multiple attributes for control. Example usage: <audio src='audio.mp3' controls></audio> Attributes for <audio> Tag src: Specifies the path to the audio file controls: Adds audio controls, like play, pause, and volume autoplay: Automatically starts playing the audio when the page loads loop: Repeats the audio once it ends muted: Mutes the audio by default preload: Specifies if and how the audio should be loaded when the page loads ('auto', 'metadata', 'none') The 'preload' attribute can have the following values: none: This is the default value. It indicates that the browser should not preload the audio file at all. The audio file will only start downloading when the user initiates playback metadata: This value tells the browser to preload only the metadata of the audio file, such as its duration and basic information about the audio. This can be useful if you want to display the audio duration to the user without fully loading the audio data auto: This value instructs the browser to preload the entire audio file as much as possible without delaying the loading of other important page content. The browser will try to load the audio file in the background so that it's ready to play when the user decides to start it."
        },
        "SVG in HTML": {
          "SVG in HTML": "Scalable Vector Graphics (SVG) has become an indispensable part of modern web development. SVG enables developers to create high-quality, scalable graphics that look crisp at any size or resolution. In this blog post, we'll explore the basics of using SVG in HTML, its benefits, and some practical examples.",
          "What is SVG?": "SVG stands for Scalable Vector Graphics. Unlike raster images like PNGs or JPGs, SVGs are not pixel-based. They're composed of vectors—mathematical formulas that describe shapes, paths, and fills. This means SVGs can be resized without losing quality.",
          "Why Use SVG?": "Scalability SVG images can be scaled indefinitely without losing quality, which is ideal for responsive web design. File Size SVG files are often smaller than their raster counterparts, especially for simple shapes and icons. Flexibility SVGs can be styled, animated, and manipulated using CSS and JavaScript.",
          "How to Embed SVG in HTML": "SVG can be embedded in HTML in several ways:. Inline SVG: Directly writing the SVG XML code within HTML Using an <img> tag: Point the src attribute to an SVG file Using CSS: Setting SVG as a background image in a CSS file Inline SVG Example <svg height='100' width='100'>     <circle cx='50' cy='50' r='40' stroke='black' stroke-width='3' fill='red' /> </svg> <img> Tag Example <img src='image.svg' alt='Sample SVG'> CSS Background Example .background {     background-image: url('image.svg'); }",
          "SVG Attributes": "SVG comes with a set of attributes to control its behavior: width and height: To set the dimensions. viewBox: To set the coordinate system. fill and stroke: To set the colors",
          "Practical Examples": "Creating a Simple Icon. <svg height='30' width='30'>.     <rect width='30' height='30' style='fill:rgb(0,0,255);stroke-width:1;stroke:rgb(0,0,0)' />. </svg>. Creating Complex Shapes. SVG can also be used to create more complex shapes like polygons, lines, and text."
        },
        "iFrame in HTML": {
          "iFrames in HTML": "iFrames, or Inline Frames, are an integral part of modern web development. They allow you to embed another HTML page within your current page. In this blog, we'll delve into the utility of iFrames, their attributes, and some use-cases.",
          "What is an iFrame?": "An iFrame is an HTML element that enables an inline frame for the embedding of external content. Essentially, you can load another web page within a designated area of your current webpage.",
          "Why Use iFrames?": "iFrames offer a variety of use-cases: Content Isolation: iFrames allow you to isolate third-party content, which can improve security. Modularity: Easily embed external plugins, widgets, or content. Resource Separation: Content within an iFrame can load separately from the rest of the page.",
          "Basic Syntax": "The basic syntax of an iFrame is quite straightforward: .<iframe src='URL' width='width' height='height'></iframe>",
          "Attributes of iFrame": "Several attributes can enhance the functionality of an iFrame:.src: Specifies the URL of the page to embedheight and width: Define the dimensionsframeborder: Indicates whether to display a borderscrolling: Controls the scrollbarsname: For targeting the iFrame in JavaScript",
          "Practical Examples": "Embedding a YouTube Video. <iframe src='https://www.youtube.com/embed/VIDEO_ID' frameborder='0' allowfullscreen></iframe> Embedding Google Maps. <iframe src='https://maps.google.com/maps?q=LOCATION&output=embed' frameborder='0'></iframe>"
        }
      }
    }
  },

  {
    "CSS": {
      "INTRODUCTION": {
        "CSS Introduction": {
          "What is CSS?": "CSS (Cascading Style Sheets) was created by Håkon Wium Lie in 1994 as a standard for styling web pages. It's a style sheet language used to describe the presentation of a document written in HTML. CSS controls the layout, colors, fonts, and overall appearance of web content. In layman's terms, CSS is like the paint and decoration of a website. It's a set of instructions that tells a web browser how to style and position the HTML elements on a webpage. Think of it as the design elements that create the visual appearance of a website, similar to how paint, furniture, and decor transform a house into a home.\n\nIn a nutshell:\n\nCSS is the language of web design, used to style websites.\nCSS defines the visual presentation and layout of web pages that we see on the Internet.\nCSS consists of selectors and declarations contained within a CSS file, and the associated files typically have a .css extension.\nThere are several versions of CSS, with CSS3 being the most recent version.",
          "Features of CSS": "It separates content from presentation, allowing the same HTML to be styled differently across devices.\nIt reduces code redundancy by applying the same styles to multiple elements.\nIt provides better control over layout and appearance than HTML alone.\nIt enhances website performance by caching style rules separately from HTML content.\nIt enables responsive design, allowing websites to adapt to different screen sizes.",
          "Why the Term Cascading & Style Sheets?": "The term 'Cascading Style Sheets' is composed of two main concepts: 'cascading' and 'style sheets.' 'Cascading' refers to the way styles are applied in a hierarchical manner, with certain styles taking precedence over others based on specificity rules. 'Style sheets' denotes a collection of style rules that define how HTML elements should be displayed.\nThus, CSS is the practice of applying styles to HTML elements through a system of rules that cascade according to specificity, inheritance, and source order.",
          "History of CSS:": "In 1994, Håkon Wium Lie proposed CSS while working at CERN with Tim Berners-Lee.\nIn 1996, CSS1 was released as the first official specification.\nFrom 1998 to 2011, CSS2 and later CSS2.1 were developed, adding more capabilities.\nCSS3, which is modular rather than a single specification, began development in 1999 and continues to evolve.\nModern browsers now support most CSS3 features, allowing for advanced styling and animations."
        },
        "CSS Working": {
          "CSS Working": "CSS works by selecting HTML elements and applying styles to them. These styles control how the elements look and are positioned on the page. CSS can be applied to HTML in three different ways: inline, internal, and external. Each method has its advantages and use cases.",
          "How does CSS integrate with HTML?": "CSS integrates with HTML through selectors that target specific elements. When a web browser renders a page, it reads the HTML structure first, then applies CSS styles according to the rules defined. This process is known as the rendering pipeline.\n\nThe browser creates a Document Object Model (DOM) from the HTML, and then applies the CSS styles to create the rendered page. This separation allows developers to maintain content and presentation independently.",
          "What are CSS Selectors?": "CSS selectors are patterns used to select and style HTML elements. They range from simple element selectors to complex combinations that target specific elements based on their attributes, position, or state. Understanding selectors is crucial for effective CSS usage.\n\nFor example, 'p' selects all paragraph elements, '.classname' selects elements with a specific class, and '#idname' selects an element with a specific ID. More complex selectors like 'div > p' select paragraphs that are direct children of div elements.",
          "Three Ways to Insert CSS": "There are three methods to include CSS in your HTML document:\n\n1. Inline CSS: Applied directly to HTML elements using the style attribute.\n2. Internal CSS: Placed in the <head> section of an HTML page within <style> tags.\n3. External CSS: Stored in separate .css files and linked to HTML using <link> tags.\n\nEach method has its own advantages. Inline CSS is useful for quick, element-specific styling but can lead to code redundancy. Internal CSS is good for single-page styles, while external CSS is ideal for consistent styling across multiple pages."
        },
        "CSS Installation": {
          "CSS Installation": "Unlike programming languages, CSS doesn't require traditional installation. Instead, you need the right tools to write and test CSS code effectively. Let's set up a development environment for CSS.",
          "What are the prerequisites to learning CSS?": "Before diving into CSS, you should have a basic understanding of HTML. Since CSS is used to style HTML elements, knowing how to structure a web page with HTML is essential. You don't need to be an HTML expert, but understanding elements, attributes, and the DOM structure will make learning CSS much easier.",
          "Tools needed for CSS development:": "Text Editor or IDE: You'll need a code editor to write CSS. Popular choices include Visual Studio Code, Sublime Text, and Atom. VS Code is particularly recommended for its excellent CSS support and extensions.\nWeb Browser: Modern browsers like Chrome, Firefox, or Edge are essential for testing your CSS. Their developer tools allow you to inspect and debug your styles in real-time.\nBrowser Developer Tools: These built-in tools let you inspect elements, view applied styles, and test CSS changes without affecting your source code.\nCSS Preprocessors (Optional): Tools like Sass or Less extend CSS capabilities with variables, functions, and other features. These are helpful for more advanced development.",
          "Setting up Visual Studio Code for CSS": "To optimize VS Code for CSS development, consider installing these extensions:\n\nCSS Peek: Allows you to quickly view and navigate to CSS definitions.\nLive Server: Provides a local development server with live reload capability.\nIntelliSense for CSS: Offers intelligent code completion and syntax highlighting.\nCSS Formatter: Helps maintain clean, consistent CSS code formatting.\n\nAfter installing VS Code and these extensions, create a project folder with HTML and CSS files to begin your styling journey."
        },
        "CSS Execution": {
          "CSS Execution": "Now that we've set up our development environment, let's create our first styled webpage. We'll start with a simple example to demonstrate how CSS transforms HTML.",
          "Creating CSS Files": "Create a new folder for your project if you haven't already.\nWithin this folder, create two files: index.html and styles.css.\nThe HTML file will contain your content structure, while the CSS file will define how that content looks.",
          "Basic HTML Structure": "In your index.html file, paste the following code:\n\n<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>My First Styled Page</title>\n    <link rel='stylesheet' href='styles.css'>\n</head>\n<body>\n    <h1>Hello, Styled World!</h1>\n    <p>This paragraph will be styled with CSS.</p>\n    <div class='box'>This is a colored box with padding.</div>\n</body>\n</html>",
          "Adding CSS": "Now, in your styles.css file, add the following CSS rules:\n\nbody {\n    font-family: Arial, sans-serif;\n    background-color: #f0f0f0;\n    margin: 0;\n    padding: 20px;\n}\n\nh1 {\n    color: #3498db;\n    text-align: center;\n}\n\np {\n    font-size: 18px;\n    line-height: 1.5;\n    color: #333;\n}\n\n.box {\n    background-color: #27ae60;\n    color: white;\n    padding: 20px;\n    border-radius: 5px;\n    margin-top: 20px;\n}\n",
          "Viewing Your Styled Page": "Open your index.html file using the Live Server extension in VS Code (right-click and select 'Open with Live Server').\nYou should see your HTML content with the styles applied - the heading will be blue and centered, the paragraph will have specific font settings, and there will be a green box with white text.\nThis demonstrates the basic workflow of creating and applying CSS to HTML content."
        }
      },
      "CSS BASICS": {
        "CSS Syntax": {
          "CSS Syntax": "CSS syntax consists of a selector and a declaration block. The selector points to the HTML element you want to style, while the declaration block contains one or more declarations separated by semicolons.",
          "Basic Syntax Structure": "selector {\n    property: value;\n    property: value;\n}\n\nIn this structure:\n- 'selector' targets the HTML element(s) to style\n- 'property' is the attribute you want to change\n- 'value' is what you're setting the property to\n- Each property-value pair ends with a semicolon\n- The entire declaration block is enclosed in curly braces",
          "Example": "h1 {\n    color: blue;\n    font-size: 24px;\n}\n\nThis CSS rule selects all <h1> elements and applies two styles: setting the text color to blue and the font size to 24 pixels.",
          "CSS Comments": "Comments in CSS are enclosed between /* and */:\n\n/* This is a CSS comment */\n\nComments are ignored by browsers but help developers document their code. You can use comments to explain your styling choices or temporarily disable certain CSS rules during development."
        },
        "CSS Selectors": {
          "CSS Selectors": "Selectors are patterns that match HTML elements. They're the bridge between your HTML document and style rules. Understanding selectors is crucial for effective CSS usage.",
          "Element Selector": "The element selector targets HTML elements by their tag name:\n\np {\n    color: red;\n}\n\nThis selects all <p> elements and sets their text color to red.",
          "Class Selector": "The class selector targets elements with a specific class attribute:\n\n.highlight {\n    background-color: yellow;\n}\n\nThis selects all elements with class='highlight' and sets their background color to yellow. Class selectors start with a dot (.) followed by the class name.",
          "ID Selector": "The ID selector targets a specific element with a unique ID:\n\n#header {\n    font-size: 30px;\n}\n\nThis selects the element with id='header' and sets its font size to 30 pixels. ID selectors start with a hash (#) followed by the ID.",
          "Universal Selector": "The universal selector (*) targets all elements in the document:\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\nThis resets margins and padding for all elements, a common technique in CSS resets.",
          "Grouping Selector": "You can group selectors to apply the same styles to multiple elements:\n\nh1, h2, h3 {\n    font-family: Arial, sans-serif;\n}\n\nThis applies the Arial font family to all <h1>, <h2>, and <h3> elements.",
          "Combinatorial Selectors": "CSS offers several ways to target elements based on their relationships:\n\n- Descendant selector (space): div p selects all <p> elements inside <div> elements\n- Child selector (>): div > p selects all <p> elements that are direct children of <div> elements\n- Adjacent sibling selector (+): h1 + p selects the first <p> element that directly follows an <h1>\n- General sibling selector (~): h1 ~ p selects all <p> elements that follow an <h1>"
        },
        "CSS Colors": {
          "CSS Colors": "Colors are a fundamental aspect of web design, and CSS provides multiple ways to define colors. Choosing the right color format depends on your needs for precision, transparency, and browser support.",
          "Color Names": "CSS supports 140+ named colors like 'red', 'blue', 'tomato', and 'goldenrod':\n\nh1 {\n    color: purple;\n}\n\nNamed colors are easy to remember but limited in range.",
          "Hexadecimal Colors": "Hex codes represent colors using a combination of six hexadecimal digits (0-9, A-F):\n\ndiv {\n    background-color: #FF5733;\n}\n\nThe format is #RRGGBB where RR is red, GG is green, and BB is blue. Each pair ranges from 00 (none) to FF (full intensity).\n\nShorthand hex (#RGB) is also available when each color pair has the same digits: #F53 is equivalent to #FF5533.",
          "RGB and RGBA Colors": "RGB defines colors by specifying the intensity of red, green, and blue:\n\np {\n    color: rgb(255, 87, 51);\n}\n\nEach value ranges from 0 to 255.\n\nRGBA adds an alpha channel for transparency:\n\ndiv {\n    background-color: rgba(255, 87, 51, 0.5);\n}\n\nThe alpha value ranges from 0 (fully transparent) to 1 (fully opaque).",
          "HSL and HSLA Colors": "HSL (Hue, Saturation, Lightness) is an intuitive way to define colors:\n\nbutton {\n    background-color: hsl(18, 100%, 60%);\n}\n\n- Hue is a degree on the color wheel (0 to 360, where 0 is red)\n- Saturation is a percentage (0% is gray, 100% is full color)\n- Lightness is a percentage (0% is black, 100% is white)\n\nHSLA adds an alpha channel for transparency:\n\nbutton:hover {\n    background-color: hsla(18, 100%, 60%, 0.8);\n}"
        },
        "CSS Units": {
          "CSS Units": "CSS uses various units to specify the size, spacing, and other dimensional properties of elements. Choosing the right unit is important for responsive design and accessibility.",
          "Absolute Units": "Absolute units have fixed sizes regardless of the viewport or parent element:\n\n- px (pixels): 1px is 1/96th of an inch on a 96 DPI display\n- pt (points): 1pt is 1/72nd of an inch\n- in (inches): 1in equals 96px\n- cm (centimeters): 1cm equals 37.8px\n- mm (millimeters): 1mm equals 3.78px\n\nExample:\ndiv {\n    width: 200px;\n    height: 100px;\n    margin: 10px;\n}\n\nAbsolute units are useful when precise dimensions are required, but they don't scale well for responsive designs.",
          "Relative Units": "Relative units scale based on other factors and are essential for responsive design:\n\n- % (percentage): Relative to the parent element\n- em: Relative to the font-size of the element (2em means 2 times the current font size)\n- rem: Relative to the font-size of the root element (html)\n- vw: 1% of viewport width\n- vh: 1% of viewport height\n- vmin: 1% of the smaller dimension (width or height)\n- vmax: 1% of the larger dimension\n\nExample:\n.container {\n    width: 80%;\n    font-size: 16px;\n}\n\n.container p {\n    margin: 1.5em; /* 24px if parent font-size is 16px */\n    padding: 5%;\n}\n\n.hero {\n    height: 50vh;\n    width: 100vw;\n}\n\nRelative units are preferable for responsive designs that adapt to different screen sizes and user preferences.",
          "When to Use Each Unit": "- Use px for borders, small details, or when fixed size is necessary\n- Use em for sizing related to the parent font size (padding, margins around text)\n- Use rem for consistent sizing throughout the document, unaffected by parent elements\n- Use % for widths that should adapt to their container\n- Use vw/vh for elements that should scale with the viewport\n- Use ch for width based on character count (especially useful for readable line lengths)"
        },
        "CSS Box Model": {
          "CSS Box Model": "The CSS Box Model is a fundamental concept that describes how elements are rendered on a page. Every HTML element can be thought of as a rectangular box with content, padding, border, and margin areas.",
          "Components of the Box Model": "The CSS Box Model consists of four components (from inside to outside):\n\n1. Content: The actual content of the element (text, images, etc.)\n2. Padding: The space between the content and the border\n3. Border: The line that surrounds the padding\n4. Margin: The space outside the border that separates the element from other elements\n\nThe total width of an element equals: content width + left padding + right padding + left border + right border + left margin + right margin\n\nThe total height follows the same pattern vertically.",
          "Setting Box Dimensions": "You can control the dimensions of each part of the box model:\n\n.box {\n    /* Content dimensions */\n    width: 300px;\n    height: 200px;\n    \n    /* Padding */\n    padding-top: 10px;\n    padding-right: 20px;\n    padding-bottom: 10px;\n    padding-left: 20px;\n    /* OR shorthand: padding: 10px 20px; (top/bottom, left/right) */\n    \n    /* Border */\n    border-width: 2px;\n    border-style: solid;\n    border-color: #333;\n    /* OR shorthand: border: 2px solid #333; */\n    \n    /* Margin */\n    margin-top: 15px;\n    margin-right: 10px;\n    margin-bottom: 15px;\n    margin-left: 10px;\n    /* OR shorthand: margin: 15px 10px; */\n}",
          "Box-Sizing Property": "By default, the width and height properties set the dimensions of the content area only (content-box). This can make layout calculations difficult since the total element width includes padding and borders.\n\nThe box-sizing property changes this behavior:\n\n/* Apply to all elements for easier sizing */\n* {\n    box-sizing: border-box;\n}\n\n.box {\n    width: 300px;\n    padding: 20px;\n    border: 2px solid #333;\n}\n\nWith box-sizing: border-box, the width includes content, padding, and border (but not margin). This means a 300px wide element will actually be 300px wide, not 300px + padding + border."
        },
        "CSS Display Property": {
          "CSS Display Property": "The display property is one of the most important CSS properties for controlling layout. It determines how an element is treated in the document flow and how it interacts with other elements.",
          "Block Elements": "Elements with display: block start on a new line and stretch to fill the available width of their container:\n\ndiv {\n    display: block;\n    background-color: #f0f0f0;\n    padding: 20px;\n}\n\nCharacteristics of block elements:\n- Always start on a new line\n- Take up the full width available by default\n- Can have width and height set explicitly\n- Respect top and bottom margins\n\nCommon block elements include <div>, <p>, <h1>-<h6>, <section>, and <article>.",
          "Inline Elements": "Elements with display: inline flow within the text and only take up as much width as necessary:\n\nspan {\n    display: inline;\n    background-color: yellow;\n    padding: 5px;\n}\n\nCharacteristics of inline elements:\n- Do not start on a new line\n- Only take up as much width as necessary\n- Cannot have width and height set explicitly\n- Vertical padding and margins are not fully respected\n\nCommon inline elements include <span>, <a>, <strong>, <em>, and <img>.",
          "Inline-Block Elements": "Elements with display: inline-block combine features of both inline and block elements:\n\n.icon {\n    display: inline-block;\n    width: 32px;\n    height: 32px;\n    background-color: #3498db;\n    margin: 5px;\n}\n\nCharacteristics of inline-block elements:\n- Flow within text like inline elements\n- Can have width, height, padding, and margins like block elements\n- Remain on the same line unless they run out of space\n\nThis is useful for creating grid-like layouts with elements that need specific dimensions.",
          "Other Display Values": "CSS offers several other display values for specialized layouts:\n\n- display: none; - Removes the element completely from the document flow\n- display: flex; - Creates a flexbox container for flexible layouts\n- display: grid; - Creates a grid container for two-dimensional layouts\n- display: table; - Makes the element behave like a <table> element\n\nExample of display: none;\n\n.hidden {\n    display: none; /* Element is not rendered and takes no space */\n}\n\n.invisible {\n    visibility: hidden; /* Element is not visible but still takes up space */\n}"
        }
      },
      "CSS LAYOUT": {
        "CSS Position": {
          "CSS Position": "The position property determines how an element is positioned in the document flow. It's a fundamental concept for creating complex layouts and overlapping elements.",
          "Static Positioning": "position: static is the default positioning behavior. Elements are positioned according to the normal document flow:\n\ndiv {\n    position: static;\n    /* Other properties like top, right, bottom, left have no effect */\n}\n\nWith static positioning, elements appear in the order they appear in the HTML, and the top, right, bottom, and left properties have no effect.",
          "Relative Positioning": "position: relative positions an element relative to its normal position in the document flow:\n\n.box {\n    position: relative;\n    top: 20px;\n    left: 30px;\n}\n\nThe element is offset from its normal position, but still occupies its original space in the flow. Other elements aren't affected by the repositioning.",
          "Absolute Positioning": "position: absolute removes an element from the normal document flow and positions it relative to its nearest positioned ancestor (an ancestor with position other than static):\n\n.container {\n    position: relative; /* Creates a positioning context */\n}\n\n.box {\n    position: absolute;\n    top: 50px;\n    right: 10px;\n}\n\nThe element is removed from the normal flow, and its original space collapses. It's positioned relative to its nearest positioned ancestor, or to the initial containing block (usually the viewport) if no positioned ancestor exists.",
          "Fixed Positioning": "position: fixed positions an element relative to the viewport, so it stays in the same place even when the page is scrolled:\n\n.header {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    background-color: white;\n    z-index: 100;\n}\n\nFixed elements are removed from the normal document flow and don't leave a gap in the layout. They're commonly used for navigation bars, headers, or chat widgets that should remain visible while scrolling.",
          "Sticky Positioning": "position: sticky is a hybrid of relative and fixed positioning. The element is treated as relative until it crosses a specified threshold, then it's treated as fixed:\n\n.section-title {\n    position: sticky;\n    top: 10px;\n    background-color: #f8f9fa;\n    padding: 10px;\n}\n\nSticky elements act like relative-positioned elements until the scroll position reaches a specific point, then they \"stick\" like fixed-positioned elements. This is useful for section headers or navigation elements that should stick to the top when scrolled to.",
          "Z-Index Property": "The z-index property controls the stacking order of positioned elements (any position value except static):\n\n.background {\n    position: absolute;\n    z-index: 1;\n}\n\n.foreground {\n    position: absolute;\n    z-index: 2; /* Will appear above .background */\n}\n\nHigher z-index values appear in front of elements with lower values. Elements with position: static have a z-index of auto, which means they don't create a new stacking context."
        },
        "CSS Flexbox": {
          "CSS Flexbox": "Flexbox (Flexible Box Layout) is a one-dimensional layout model designed to provide a more efficient way to arrange, align, and distribute space among items in a container, even when their size is unknown or dynamic.",
          "Flex Container Properties": "To create a flex container, set display: flex or display: inline-flex on an element. The direct children of this container become flex items:\n\n.container {\n    display: flex;\n    flex-direction: row; /* default: items laid out in a row */\n    flex-wrap: wrap; /* allows items to wrap to new line if needed */\n    justify-content: space-between; /* distributes items along the main axis */\n    align-items: center; /* aligns items along the cross axis */\n    align-content: flex-start; /* aligns wrapped lines along the cross axis */\n    gap: 10px; /* space between flex items */\n}\n\nKey container properties:\n\n- flex-direction: Controls the direction of the main axis (row, row-reverse, column, column-reverse)\n- flex-wrap: Determines whether items wrap to new lines (nowrap, wrap, wrap-reverse)\n- justify-content: Aligns items along the main axis (flex-start, flex-end, center, space-between, space-around, space-evenly)\n- align-items: Aligns items along the cross axis (stretch, flex-start, flex-end, center, baseline)\n- align-content: Aligns wrapped lines along the cross axis (flex-start, flex-end, center, space-between, space-around, stretch)\n- gap: Sets spacing between flex items",
          "Flex Item Properties": "Individual flex items can be controlled with these properties:\n\n.item {\n    flex-grow: 1; /* ability to grow if necessary */\n    flex-shrink: 1; /* ability to shrink if necessary */\n    flex-basis: auto; /* default size before remaining space is distributed */\n    /* shorthand for above three properties */\n    flex: 1 1 auto;\n    \n    align-self: center; /* overrides the container's align-items for this item */\n    order: 2; /* controls the order of the item in the container */\n}\n\nKey item properties:\n\n- flex-grow: Determines how much the item can grow relative to other items\n- flex-shrink: Determines how much the item can shrink relative to other items\n- flex-basis: Sets the initial main size of the item\n- flex: Shorthand for flex-grow, flex-shrink, and flex-basis (e.g., flex: 1; is equivalent to flex: 1 1 0%;)\n- align-self: Overrides the align-items value for specific items\n- order: Controls the order in which the item appears (default is 0)",
          "Common Flexbox Patterns": "Flexbox is particularly useful for these common layouts:\n\n/* Equal-width columns */\n.equal-columns {\n    display: flex;\n}\n.equal-columns > * {\n    flex: 1;\n}\n\n/* Sticky footer */\nbody {\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n}\nmain {\n    flex: 1;\n}\n\n/* Card layout with consistent heights */\n.card-container {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n}\n.card {\n    flex: 1 1 300px; /* Grow, shrink, basis */\n    display: flex;\n    flex-direction: column;\n}\n.card-body {\n    flex: 1; /* Makes all cards the same height */\n}"
        },
        "CSS Grid": {
          "CSS Grid": "CSS Grid Layout is a two-dimensional layout system designed for organizing content in rows and columns. Unlike Flexbox (which is one-dimensional), Grid allows precise control over both dimensions simultaneously.",
          "Creating a Grid Container": "To create a grid container, set display: grid on an element. Direct children of this container become grid items:\n\n.container {\n    display: grid;\n    grid-template-columns: 200px 1fr 1fr; /* Three columns */\n    grid-template-rows: 100px auto 100px; /* Three rows */\n    gap: 20px; /* Space between grid items */\n}\n\nKey grid container properties:\n\n- grid-template-columns: Defines the columns and their widths\n- grid-template-rows: Defines the rows and their heights\n- gap: Sets spacing between grid items (shorthand for row-gap and column-gap)\n- grid-template-areas: Defines named grid areas\n- justify-items: Aligns items horizontally within their cells\n- align-items: Aligns items vertically within their cells\n- justify-content: Aligns the grid horizontally within the container\n- align-content: Aligns the grid vertically within the container",
          "Grid Item Placement": "Grid items can be placed precisely within the grid using these properties:\n\n.item {\n    grid-column: 1 / 3; /* Start at column line 1, end at line 3 (spans 2 columns) */\n    grid-row: 2 / 4; /* Start at row line 2, end at line 4 (spans 2 rows) */\n    /* Alternatively, use grid-area for shorthand */\n    grid-area: 2 / 1 / 4 / 3; /* row-start / column-start / row-end / column-end */\n}\n\nKey grid item properties:\n\n- grid-column: Shorthand for grid-column-start and grid-column-end\n- grid-row: Shorthand for grid-row-start and grid-row-end\n- grid-area: Shorthand for grid-row-start, grid-column-start, grid-row-end, grid-column-end\n- justify-self: Aligns the item horizontally within its cell\n- align-self: Aligns the item vertically within its cell",
          "FR Unit and Grid Functions": "CSS Grid introduces the fr unit (fraction) and special functions for flexible layouts:\n\n.container {\n    display: grid;\n    /* Three equal columns that share available space */\n    grid-template-columns: 1fr 1fr 1fr;\n    /* Same as above, using repeat() function */\n    grid-template-columns: repeat(3, 1fr);\n    /* Fixed sidebar with flexible main content */\n    grid-template-columns: 250px minmax(500px, 1fr);\n    /* Auto-fit as many 200px columns as possible */\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n}\n\nSpecial grid features:\n\n- fr unit: Represents a fraction of available space\n- repeat(): Repeats a pattern of tracks\n- minmax(): Sets minimum and maximum sizes for tracks\n- auto-fill and auto-fit: Create a responsive number of tracks based on container size",
          "Named Grid Areas": "Grid areas can be named for more intuitive layout creation:\n\n.container {\n    display: grid;\n    grid-template-columns: 1fr 3fr 1fr;\n    grid-template-rows: auto 1fr auto;\n    grid-template-areas:\n        \"header header header\"\n        \"sidebar main aside\"\n        \"footer footer footer\";\n    gap: 10px;\n}\n\n.header { grid-area: header; }\n.main { grid-area: main; }\n.sidebar { grid-area: sidebar; }\n.aside { grid-area: aside; }\n.footer { grid-area: footer; }\n\nThis creates a common page layout with header, footer, main content, and two sidebars, using descriptive names instead of line numbers."
        }
      },
      "CSS Media Queries": {
        "CSS Media Queries": "Media queries allow you to apply different CSS styles based on device characteristics like screen size, resolution, or orientation. They're essential for responsive web design.",
        "Basic Syntax": "Media queries use the @media rule followed by a media type and/or condition:\n\n@media media-type and (condition) {\n    /* CSS rules to apply when condition is met */\n}\n\nCommon media types include:\n- all: All media types (default)\n- screen: Computer screens, tablets, phones\n- print: Print preview mode/printed pages\n- speech: Screen readers\n\nCommon conditions (features) include:\n- width, height: Viewport dimensions\n- min-width, min-height: Minimum viewport dimensions\n- max-width, max-height: Maximum viewport dimensions\n- orientation: Portrait or landscape\n- aspect-ratio: Width-to-height ratio\n- resolution: Pixel density",
        "Responsive Breakpoints": "Breakpoints are the viewport widths at which your layout should change to accommodate different screen sizes:\n\n/* Mobile styles (base styles, no media query needed) */\nbody {\n    font-size: 16px;\n}\n\n/* Tablet styles */\n@media screen and (min-width: 768px) {\n    body {\n        font-size: 18px;\n    }\n}\n\n/* Desktop styles */\n@media screen and (min-width: 1024px) {\n    body {\n        font-size: 20px;\n    }\n}\n\nCommon breakpoint ranges:\n- Mobile: 320px - 767px\n- Tablet: 768px - 1023px\n- Desktop: 1024px and above\n\nHowever, it's better to set breakpoints based on your content rather than specific devices.",
        "Combining Media Features": "You can combine multiple conditions using logical operators:\n\n/* AND operator (both conditions must be true) */\n@media screen and (min-width: 768px) and (max-width: 1023px) {\n    /* Styles that apply only to tablets */\n}\n\n/* OR operator (comma-separated, any condition can be true) */\n@media screen and (max-width: 767px), (orientation: landscape) {\n    /* Styles that apply to either mobile OR any device in landscape */\n}\n\n/* NOT operator (negates the condition) */\n@media not print {\n    /* Styles that apply to everything except print mode */\n}"
      },
      "CSS Float": {
        "CSS Float": "The float property was one of the earliest methods for creating multi-column layouts. While modern layouts typically use Flexbox or Grid, understanding float is still important for maintaining legacy code and certain specific use cases.",
        "Basic Float Usage": "The float property moves an element to the left or right of its container, allowing text and inline elements to wrap around it:\n\n.image {\n    float: left; /* Floats the element to the left */\n    margin-right: 15px; /* Adds space between the image and surrounding text */\n}\n\n.quote {\n    float: right; /* Floats the element to the right */\n    width: 200px;\n    margin-left: 15px;\n}\n\nPossible values for float:\n- left: Floats the element to the left\n- right: Floats the element to the right\n- none: Default value, element does not float\n- inherit: Inherits the float value of the parent element",
        "Clearing Floats": "When elements are floated, they're removed from the normal document flow, which can cause container collapse issues. The clear property fixes this:\n\n.clear {\n    clear: both; /* Element will move below any floated elements */\n}\n\nPossible values for clear:\n- left: Moves below left-floated elements\n- right: Moves below right-floated elements\n- both: Moves below any floated elements\n- none: Default value, does not clear floats\n\nA common solution is the 'clearfix' hack:\n\n.clearfix::after {\n    content: \"\";\n    display: table;\n    clear: both;\n}\n\nThis prevents container collapse by ensuring the container extends to include all floated children.",
        "Modern Alternatives": "While float has historically been used for layouts, modern CSS offers better alternatives:\n\n/* Instead of float-based columns like this: */\n.col {\n    float: left;\n    width: 33.33%;\n}\n\n/* Use Flexbox: */\n.container {\n    display: flex;\n}\n.col {\n    flex: 1;\n}\n\n/* Or CSS Grid: */\n.container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n}\n\nFloats are still useful for wrapping text around images, but Flexbox and Grid are preferred for layout structures."
      },
      "CSS ADVANCED": {
        "CSS Transitions": {
          "CSS Transitions": "Transitions allow you to change property values smoothly over a specified duration, creating animation effects when properties change. They provide a way to control animation speed when changing CSS properties.",
          "Basic Transition Syntax": "The transition property is a shorthand for setting the four transition properties:\n\n.button {\n    background-color: blue;\n    color: white;\n    padding: 10px 20px;\n    transition: background-color 0.3s ease;\n}\n\n.button:hover {\n    background-color: darkblue;\n}\n\nIn this example, when hovering over the button, the background color changes smoothly over 0.3 seconds with an 'ease' timing function.",
          "Transition Properties": "CSS transitions have four components:\n\n1. transition-property: Specifies the CSS property to transition (e.g., width, color, opacity)\n2. transition-duration: Sets how long the transition takes (e.g., 0.5s, 200ms)\n3. transition-timing-function: Controls the speed curve of the transition\n4. transition-delay: Optional delay before the transition starts\n\nExample with individual properties:\n\n.box {\n    width: 100px;\n    height: 100px;\n    background-color: coral;\n    transition-property: width, background-color;\n    transition-duration: 0.5s, 1s;\n    transition-timing-function: ease-out;\n    transition-delay: 0s, 0.2s;\n}\n\n.box:hover {\n    width: 200px;\n    background-color: purple;\n}",
          "Timing Functions": "Transition timing functions control the pace of the animation:\n\n- ease: Default, starts slow, then fast, then ends slowly\n- linear: Constant speed throughout\n- ease-in: Starts slow, ends fast\n- ease-out: Starts fast, ends slow\n- ease-in-out: Starts and ends slow, faster in the middle\n- cubic-bezier(n,n,n,n): Custom timing function\n\n.box {\n    transition: transform 0.3s ease-in-out;\n}\n\n.box.linear {\n    transition: transform 0.3s linear;\n}\n\n.box.custom {\n    transition: transform 0.3s cubic-bezier(0.68, -0.55, 0.27, 1.55);\n}"
        },
        "CSS Animations": {
          "CSS Animations": "While transitions are great for simple state changes, CSS animations provide more control for complex, multi-step animations. Animations use keyframes to define the stages and properties of the animation sequence.",
          "Keyframe Declaration": "First, define the animation sequence using @keyframes followed by a name:\n\n@keyframes slide-in {\n    0% { /* starting state */\n        transform: translateX(-100%);\n        opacity: 0;\n    }\n    100% { /* ending state */\n        transform: translateX(0);\n        opacity: 1;\n    }\n}\n\nKeyframes define how the animated element should render at various points during the animation sequence. You can use percentages (0% to 100%) or the keywords 'from' (0%) and 'to' (100%).",
          "Applying Animations": "Apply the animation to an element using the animation property:\n\n.element {\n    animation: slide-in 1s ease-out forwards;\n}\n\nThe animation property is shorthand for:\n\n1. animation-name: References the @keyframes rule (e.g., slide-in)\n2. animation-duration: Sets how long the animation takes\n3. animation-timing-function: Controls the speed curve\n4. animation-delay: Optional delay before starting\n5. animation-iteration-count: How many times to run (number or 'infinite')\n6. animation-direction: Direction of playback (normal, reverse, alternate)\n7. animation-fill-mode: What values apply before/after the animation\n8. animation-play-state: Running or paused\n\nFull example with individual properties:\n\n.box {\n    width: 100px;\n    height: 100px;\n    background-color: teal;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-timing-function: ease;\n    animation-delay: 0.5s;\n    animation-iteration-count: infinite;\n    animation-direction: alternate;\n    animation-fill-mode: forwards;\n}\n\n@keyframes bounce {\n    0% { transform: translateY(0); }\n    50% { transform: translateY(-50px); }\n    100% { transform: translateY(0); }\n}",
          "Multiple Animations": "You can apply multiple animations to a single element by separating them with commas:\n\n.element {\n    animation: \n        slide-in 1s ease-out forwards,\n        fade 2s ease-in 0.5s infinite alternate;\n}\n\nThis applies two separate animations to the element, each with its own settings."
        },
        "CSS Transform": {
          "CSS Transform": "The transform property lets you modify the coordinate space of an element, allowing you to rotate, scale, skew, or translate elements in 2D or 3D space without disrupting the document flow.",
          "2D Transforms": "2D transforms manipulate elements in the X and Y dimensions:\n\n.box {\n    width: 100px;\n    height: 100px;\n    background-color: orange;\n    transition: transform 0.3s ease;\n}\n\n/* Move 50px right and 20px down */\n.translate {\n    transform: translate(50px, 20px);\n}\n\n/* Scale to 1.5x size */\n.scale {\n    transform: scale(1.5);\n}\n\n/* Rotate 45 degrees clockwise */\n.rotate {\n    transform: rotate(45deg);\n}\n\n/* Skew along X and Y axes */\n.skew {\n    transform: skew(10deg, 5deg);\n}\n\nThese transforms can be combined:\n\n.combined {\n    transform: translate(50px, 20px) rotate(45deg) scale(1.5);\n}",
          "3D Transforms": "3D transforms add manipulation in the Z dimension:\n\n.box {\n    transition: transform 0.5s;\n    transform-style: preserve-3d;\n}\n\n/* Rotate around X-axis */\n.flip-x {\n    transform: rotateX(180deg);\n}\n\n/* Rotate around Y-axis */\n.flip-y {\n    transform: rotateY(180deg);\n}\n\n/* Move along Z-axis (toward/away from viewer) */\n.translate-z {\n    transform: translateZ(50px);\n}\n\n/* Full 3D rotation */\n.rotate-3d {\n    transform: rotate3d(1, 1, 1, 45deg);\n}\n\nFor 3D effects to work properly, you may need additional properties:\n\n.container {\n    perspective: 800px; /* Depth of the 3D space */\n}\n\n.element {\n    transform-style: preserve-3d; /* Children maintain 3D positioning */\n    backface-visibility: hidden; /* Hide the back side when flipped */\n}",
          "Transform Origin": "The transform-origin property changes the point from which transformations are applied:\n\n.box {\n    transform-origin: top left; /* Default is center */\n    transform: rotate(45deg);\n}\n\nThis rotates the element 45 degrees around its top-left corner instead of its center.\n\nValues can be keywords (top, right, bottom, left, center) or specific lengths/percentages."
        },
        "CSS Variables": {
          "CSS Variables": "CSS Variables, officially called Custom Properties, allow you to define reusable values that can be referenced throughout your stylesheet. They make your CSS more maintainable and dynamic.",
          "Declaring Variables": "Variables are defined using the -- prefix, typically on the :root pseudo-class to make them globally available:\n\n:root {\n    --primary-color: #3498db;\n    --secondary-color: #2ecc71;\n    --font-size-base: 16px;\n    --spacing-unit: 8px;\n}\n\nVariables can also be defined on specific elements to create scoped variables:\n\n.card {\n    --card-padding: 16px;\n    --card-border-radius: 4px;\n}\n\nVariable names are case-sensitive and can include letters, numbers, hyphens, and underscores.",
          "Using Variables": "Use the var() function to reference variables in your CSS properties:\n\nbutton {\n    background-color: var(--primary-color);\n    color: white;\n    padding: var(--spacing-unit) calc(var(--spacing-unit) * 2);\n    border-radius: calc(var(--spacing-unit) / 2);\n    font-size: var(--font-size-base);\n}\n\n.card {\n    padding: var(--card-padding, 16px); /* Fallback value if --card-padding isn't defined */\n    border-radius: var(--card-border-radius, 4px);\n    border: 1px solid var(--primary-color);\n}\n\nThe var() function can take a second parameter as a fallback value if the variable isn't defined.",
          "Changing Variables with JavaScript": "CSS variables can be manipulated with JavaScript, making them powerful for dynamic styling:\n\n// Get a CSS variable value\nconst rootStyles = getComputedStyle(document.documentElement);\nconst primaryColor = rootStyles.getPropertyValue('--primary-color');\n\n// Set a CSS variable value\ndocument.documentElement.style.setProperty('--primary-color', '#e74c3c');\n\n// Set a variable on a specific element\ndocument.querySelector('.card').style.setProperty('--card-padding', '24px');\n\nThis allows for dynamic theming, responsive adjustments, and interactive features without regenerating all CSS.",
          "Media Queries with Variables": "Variables can be redefined in media queries for responsive designs:\n\n:root {\n    --header-height: 60px;\n    --content-width: 1200px;\n    --font-size-base: 16px;\n}\n\n@media (max-width: 768px) {\n    :root {\n        --header-height: 50px;\n        --content-width: 100%;\n        --font-size-base: 14px;\n    }\n}\n\nThis automatically updates all references to these variables when the screen size changes."
        },
        "CSS Preprocessors": {
          "CSS Preprocessors": "CSS preprocessors extend CSS with programming features like variables, nesting, functions, and mixins. They help write more maintainable and reusable CSS code that gets compiled into standard CSS.",
          "Common Preprocessors": "The most popular CSS preprocessors are:\n\n- Sass/SCSS: The most widely used preprocessor with two syntaxes - the indented Sass syntax and SCSS (Sassy CSS), which is closer to standard CSS.\n- Less: Similar to SCSS but with some different features and syntax. It's JavaScript-based and was popularized by its use in Bootstrap 3.\n- Stylus: Offers a highly flexible syntax with optional colons, semicolons, and braces, making it the most concise of the preprocessors.\n\nEach has its strengths, but Sass/SCSS has become the industry standard.",
          "Key Preprocessor Features": "Preprocessors enhance CSS with several powerful features:\n\n1. Variables: Store and reuse values\n2. Nesting: Nest selectors to mirror HTML structure\n3. Mixins: Reusable style blocks that can accept parameters\n4. Functions: Perform calculations and manipulate values\n5. Partials: Split code into multiple files for organization\n6. Extend/Inheritance: Share styles between selectors\n7. Operators: Perform calculations within stylesheets\n8. Control directives: Use if/else statements and loops",
          "SCSS Example": "// Variables\n$primary-color: #3498db;\n$padding-base: 15px;\n\n// Mixins\n@mixin flex-center {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n@mixin box-shadow($x, $y, $blur, $color) {\n    -webkit-box-shadow: $x $y $blur $color;\n    -moz-box-shadow: $x $y $blur $color;\n    box-shadow: $x $y $blur $color;\n}\n\n// Nesting and parent selector (&)\n.card {\n    padding: $padding-base;\n    color: darken($primary-color, 20%);\n    @include box-shadow(0, 2px, 5px, rgba(0,0,0,0.1));\n    \n    &__header {\n        font-size: 18px;\n        margin-bottom: $padding-base;\n        \n        h2 {\n            margin: 0;\n        }\n    }\n    \n    &__body {\n        line-height: 1.5;\n    }\n    \n    &:hover {\n        @include box-shadow(0, 4px, 8px, rgba(0,0,0,0.2));\n    }\n}\n\n// Control directives\n@for $i from 1 through 3 {\n    .col-#{$i} {\n        width: 100% / $i;\n    }\n}\n\nThis SCSS code would compile to standard CSS that browsers can interpret."
        }
      },
      "CSS PRACTICAL": {
        "CSS Best Practices": {
          "CSS Best Practices": "Following best practices ensures your CSS is maintainable, efficient, and scalable. Here are key guidelines to write better CSS code.",
          "Organization and Structure": "- Use a consistent naming convention (BEM, SMACSS, OOCSS)\n- Organize CSS into logical sections with comments\n- Split large stylesheets into smaller, purpose-specific files\n- Use a CSS reset or normalize.css to ensure consistent rendering across browsers\n- Group related properties (positioning, box model, typography, visual)\n\nExample file organization:\n\n/styles\n  /base         /* Reset, typography, utilities */\n  /components   /* Buttons, cards, forms */\n  /layout       /* Header, footer, grid */\n  /pages        /* Page-specific styles */\n  /themes       /* Different color schemes */\n  main.css      /* Imports all partials */",
          "Selector Efficiency": "- Keep selectors as short as possible\n- Avoid overly complex selectors (more than 3 levels deep)\n- Limit use of universal selectors (*)\n- Use classes instead of IDs when possible for reusability\n- Avoid overqualifying selectors (e.g., div.container is less efficient than .container)\n\nInefficient:\ndiv.content ul li a.link { ... }\n\nBetter:\n.content-link { ... }",
          "Maintainability": "- Use meaningful class names that describe purpose, not appearance (e.g., .alert-message not .red-text)\n- Create reusable utility classes for common patterns\n- Avoid '!important' except as a last resort\n- Comment complex code sections\n- Use CSS variables for colors, sizes, and repeated values\n- Minimize redundant code with DRY (Don't Repeat Yourself) principles\n\nExample:\n/* Bad: Not reusable */\n.red-button {\n    background-color: red;\n    padding: 10px 20px;\n    border-radius: 4px;\n}\n\n/* Good: Purpose-based naming */\n.btn-danger {\n    background-color: var(--color-danger);\n    padding: var(--space-sm) var(--space-md);\n    border-radius: var(--border-radius);\n}",
          "Performance Optimization": "- Combine similar style rules\n- Use shorthand properties when setting multiple related values\n- Remove unused CSS rules\n- Minimize the use of expensive properties (box-shadow, border-radius, transforms)\n- Consider loading critical CSS inline and deferring non-critical CSS\n\nInstead of:\n.element {\n    margin-top: 10px;\n    margin-right: 15px;\n    margin-bottom: 10px;\n    margin-left: 15px;\n}\n\nUse shorthand:\n.element {\n    margin: 10px 15px;\n}"
        },
        "CSS Methodologies": {
          "CSS Methodologies": "CSS methodologies provide structured approaches to writing and organizing CSS code. They help solve common challenges like naming conventions, modularity, and specificity management.",
          "BEM (Block Element Modifier)": "BEM is a naming convention that divides the UI into independent blocks:\n\n- Block: Standalone component (.card)\n- Element: Part of a block (.card__title)\n- Modifier: Variation of a block or element (.card--featured, .card__title--large)\n\nExample:\n\n.card { /* Block */ }\n.card__header { /* Element */ }\n.card__image { /* Element */ }\n.card__footer { /* Element */ }\n.card--featured { /* Modified block */ }\n.card__image--rounded { /* Modified element */ }\n\nBEM creates clear relationships between components and their parts while avoiding specificity issues.",
          "SMACSS (Scalable and Modular Architecture for CSS)": "SMACSS categorizes CSS rules into five types:\n\n1. Base: Default styles for HTML elements (no classes/IDs)\n2. Layout: Major layout components (header, footer, main)\n3. Module: Reusable, modular components (sidebar, product)\n4. State: Describes how modules look in different states (.is-active, .is-hidden)\n5. Theme: Visual variations (.theme-dark, .color-primary)\n\nExample naming convention:\n\n/* Layout */\n.l-header { ... }\n.l-sidebar { ... }\n\n/* Module */\n.card { ... }\n.btn { ... }\n\n/* State */\n.is-active { ... }\n.is-disabled { ... }\n\nSMACSSS focuses on categorization and reducing specificity.",
          "OOCSS (Object Oriented CSS)": "OOCSS applies object-oriented principles to CSS with two main concepts:\n\n1. Separate structure from skin\n2. Separate container from content\n\nExample:\n\n/* Structure */\n.btn {\n    display: inline-block;\n    padding: 6px 12px;\n    border-radius: 3px;\n}\n\n/* Skin */\n.btn-primary {\n    background-color: blue;\n    color: white;\n}\n\n/* Content independent of container */\n.heading {\n    font-size: 20px;\n    font-weight: bold;\n}\n\nOOCSS promotes reusability and smaller CSS files.",
          "Atomic CSS / Utility-First CSS": "Atomic CSS uses small, single-purpose classes that each do one thing:\n\n.mt-2 { margin-top: 0.5rem; }\n.p-4 { padding: 1rem; }\n.flex { display: flex; }\n.text-center { text-align: center; }\n.text-lg { font-size: 1.125rem; }\n\nUsage in HTML:\n<div class=\"mt-2 p-4 flex text-center text-lg\">\n    Utility-first approach\n</div>\n\nTailwind CSS is a popular utility-first framework following this approach. This method reduces CSS file size and eliminates the need for creating custom class names for each UI element."
        },
        "CSS Frameworks": {
          "CSS Frameworks": "CSS frameworks provide pre-designed components and utilities to streamline web development. They offer consistent styling, responsive grids, and cross-browser compatibility.",
          "Popular CSS Frameworks": "- Bootstrap: Comprehensive framework with extensive components and JavaScript plugins\n- Tailwind CSS: Utility-first framework focused on composable, low-level utility classes\n- Foundation: Enterprise-grade, accessible framework with a focus on responsive design\n- Bulma: Modern framework based on Flexbox without JavaScript dependencies\n- Materialize: Implementation of Google's Material Design\n- Semantic UI: Framework with human-friendly HTML\n\nEach framework has different approaches and strengths:",
          "Framework Comparison": "Bootstrap:\n- Pros: Comprehensive, well-documented, large community\n- Cons: Can be heavy, sites often look similar, requires jQuery for some components\n- Best for: Rapid prototyping, teams familiar with the framework\n\nTailwind CSS:\n- Pros: Highly customizable, no predefined components, small file size with PurgeCSS\n- Cons: HTML can become verbose, steeper learning curve\n- Best for: Custom designs, teams who want flexibility\n\nFoundation:\n- Pros: Advanced responsive features, accessibility-focused\n- Cons: Steeper learning curve, less popular than Bootstrap\n- Best for: Enterprise applications, accessibility requirements\n\nBulma:\n- Pros: Modern Flexbox-based, modular, readable class names\n- Cons: Smaller community than Bootstrap\n- Best for: Modern designs with clean HTML structure",
          "Using Frameworks Effectively": "- Only include the parts you need (many frameworks offer modular imports)\n- Customize with variables instead of overriding styles\n- Extend rather than fight against the framework's conventions\n- Consider component-specific imports rather than the entire framework\n- Use preprocessor versions (Sass/LESS) for better customization\n\nExample of customizing Bootstrap with Sass:\n\n// Custom variables\n$primary: #8e44ad;\n$border-radius: 0.1rem;\n$font-family-base: 'Roboto', sans-serif;\n\n// Import Bootstrap\n@import \"node_modules/bootstrap/scss/bootstrap\";\n\n// Custom additions\n.custom-component {\n    // Your styles here\n}"
        },
        "CSS Responsive Design": {
          "CSS Responsive Design": "Responsive design ensures websites work well on all devices and screen sizes. It's built on fluid layouts, flexible media, and media queries to adapt the presentation based on the viewing environment.",
          "Core Principles": "1. Fluid Layouts: Use relative units (%, em, rem) instead of fixed pixels\n2. Flexible Images: Ensure media scales within its container\n3. Media Queries: Apply different styles based on device characteristics\n4. Mobile-First Approach: Design for mobile devices first, then enhance for larger screens\n\nThese principles work together to create adaptable designs that provide optimal viewing experiences across devices.",
          "Setting Up Responsive Foundations": "Start with these meta tag and base styles:\n\n<!-- In HTML head -->\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n/* Base CSS */\nimg, video, iframe {\n    max-width: 100%;\n    height: auto;\n}\n\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    margin: 0;\n    padding: 0;\n}\n\nThe viewport meta tag is crucial - it ensures the page width matches the device width and starts at a 1:1 scale.",
          "Mobile-First Media Queries": "Start with base styles for mobile devices, then progressively enhance for larger screens:\n\n/* Base styles for all devices */\n.container {\n    width: 100%;\n    padding: 15px;\n}\n\n/* Tablet (600px and up) */\n@media screen and (min-width: 600px) {\n    .container {\n        padding: 20px;\n        max-width: 560px;\n        margin: 0 auto;\n    }\n}\n\n/* Desktop (900px and up) */\n@media screen and (min-width: 900px) {\n    .container {\n        padding: 30px;\n        max-width: 850px;\n    }\n}\n\n/* Large Desktop (1200px and up) */\n@media screen and (min-width: 1200px) {\n    .container {\n        max-width: 1150px;\n    }\n}\n\nThis approach ensures the base experience works on all devices, with enhancements for devices with larger screens.",
          "Responsive Typography": "Make text readable across devices with fluid typography:\n\n/* Base font size (mobile) */\nhtml {\n    font-size: 16px;\n}\n\nbody {\n    font-family: 'Open Sans', sans-serif;\n    line-height: 1.6;\n}\n\nh1 {\n    font-size: 1.8rem;\n}\n\n/* Tablet typography */\n@media screen and (min-width: 600px) {\n    h1 {\n        font-size: 2.2rem;\n    }\n}\n\n/* Desktop typography */\n@media screen and (min-width: 900px) {\n    html {\n        font-size: 18px;\n    }\n    \n    h1 {\n        font-size: 2.5rem;\n    }\n}\n\nAlternatively, use viewport units for truly fluid typography:\n\nh1 {\n    font-size: calc(1.5rem + 1.5vw);\n}"
        }
      }
    }
  },

  {
    "JAVASCRIPT": {
      "INTRODUCTION": {
        "JavaScript Introduction": {
          "What is JavaScript?": "JavaScript was created by Brendan Eich in 1995 as a scripting language for web browsers. It's a high-level, interpreted programming language that conforms to the ECMAScript specification. JavaScript enables interactive web pages and is an essential part of web applications. In layman's terms, JavaScript is the behavior layer of a website. It's a set of instructions that tells a web browser how to respond to user interactions and how to dynamically update content. Think of it as the actions and reactions that create interactive experiences on websites, similar to how an engine provides functionality to a car.\n\nIn a nutshell:\n\nJavaScript is the programming language of the web, used to create dynamic and interactive websites.\nJavaScript defines the behavior and functionality of web pages that we interact with on the Internet.\nJavaScript code can be embedded directly within HTML files or linked as separate .js files.\nThere are several versions of JavaScript, with ECMAScript 2022 (ES13) being the most recent standard.",
          "Features of JavaScript": "It allows client-side dynamic content without needing page reloads.\nIt supports object-oriented, functional, and event-driven programming styles.\nIt can manipulate HTML and CSS to dynamically change web page content and presentation.\nIt has a vast ecosystem of libraries and frameworks (React, Angular, Vue, etc.).\nIt can now be used for server-side development (Node.js), mobile apps, desktop apps, and more.",
          "Why the Term JavaScript?": "The name 'JavaScript' was chosen as a marketing strategy to leverage the popularity of Java, which was gaining significant attention at the time of JavaScript's creation. Despite the name similarity, JavaScript and Java are completely different languages with distinct syntax, semantics, and use cases.\nJavaScript was originally named 'Mocha,' then briefly 'LiveScript,' before being renamed 'JavaScript' when Netscape and Sun Microsystems (creator of Java) formed a licensing agreement.",
          "History of JavaScript": "In 1995, Brendan Eich developed JavaScript in just 10 days while working at Netscape Communications.\nIn 1996, JavaScript was submitted to ECMA International for standardization, resulting in ECMAScript.\nFrom 1997 to 2005, ECMAScript versions 1-3 were released, establishing core features.\nAfter a failed attempt at ECMAScript 4, ECMAScript 5 was released in 2009 with important updates.\nECMAScript 6 (ES6/ES2015) introduced major enhancements including classes, modules, and arrow functions.\nSince 2015, ECMAScript has moved to yearly release cycles, adding new features incrementally."
        },
        "JavaScript Working": {
          "JavaScript Working": "JavaScript works by providing a way to make web pages interactive. When a browser loads a page containing JavaScript, it interprets and executes the code, allowing dynamic content updates, form validations, animations, and much more. JavaScript execution happens in the client's browser, reducing server load.",
          "How does JavaScript integrate with HTML?": "JavaScript integrates with HTML in three primary ways:\n\n1. Inline JavaScript: Code placed directly within HTML elements using event attributes like onclick, onload, etc.\n2. Internal JavaScript: Code enclosed in <script> tags within the HTML document.\n3. External JavaScript: Code stored in separate .js files and linked to HTML using the <script> tag with a src attribute.\n\nWhen a web browser loads an HTML page, it creates a Document Object Model (DOM) from the HTML structure. JavaScript can then access and manipulate this DOM to change content, structure, and styles dynamically.",
          "JavaScript Engines": "JavaScript engines are programs that execute JavaScript code. Each major browser has its own engine:\n\n- V8: Powers Google Chrome and Node.js\n- SpiderMonkey: Used in Firefox\n- JavaScriptCore: Powers Safari\n- Chakra: Used in older versions of Edge (now Edge uses V8)\n\nThese engines compile JavaScript code into machine code on-the-fly using Just-In-Time (JIT) compilation, making modern JavaScript execution very fast.",
          "Three Ways to Insert JavaScript": "There are three methods to include JavaScript in your HTML document:\n\n1. Inline JavaScript: Added directly to HTML elements using event attributes.\n   Example: <button onclick=\"alert('Hello World!')\">Click Me</button>\n\n2. Internal JavaScript: Placed within <script> tags in the HTML document.\n   Example:\n   <script>\n     function greet() {\n       alert('Hello World!');\n     }\n   </script>\n\n3. External JavaScript: Stored in separate .js files and linked to HTML.\n   Example: <script src=\"script.js\"></script>\n\nEach method has its own advantages. Inline is good for small, element-specific behaviors but can lead to code duplication. Internal works well for page-specific scripts, while external JavaScript is ideal for reusable code across multiple pages."
        },
        "JavaScript Installation": {
          "JavaScript Installation": "Unlike many programming languages, JavaScript doesn't require traditional installation because it's built into web browsers. However, you need the right tools to write and test JavaScript code effectively. Let's set up a development environment for JavaScript.",
          "What are the prerequisites to learning JavaScript?": "Before diving into JavaScript, you should have a basic understanding of HTML and CSS. Since JavaScript often interacts with HTML elements and CSS properties, knowing how to structure web pages and style them will make learning JavaScript much easier. You don't need to be an expert in HTML/CSS, but understanding the basics will provide a solid foundation.",
          "Tools needed for JavaScript development": "Text Editor or IDE: You'll need a code editor to write JavaScript. Popular choices include Visual Studio Code, Sublime Text, and Atom. VS Code is particularly recommended for its excellent JavaScript support and extensions.\nWeb Browser: Modern browsers like Chrome, Firefox, or Edge are essential for testing your JavaScript. Their developer tools allow you to debug your code in real-time.\nBrowser Developer Tools: These built-in tools let you inspect elements, view console output, set breakpoints, and analyze JavaScript performance.\nNode.js (Optional): A JavaScript runtime that allows you to run JavaScript outside the browser. It's useful for server-side development and running build tools.",
          "Setting up Visual Studio Code for JavaScript": "To optimize VS Code for JavaScript development, consider installing these extensions:\n\nESLint: Helps identify and fix problems in your JavaScript code.\nPrettier: Code formatter that ensures consistent style.\nLive Server: Provides a local development server with live reload capability.\nDebugger for Chrome: Allows you to debug JavaScript running in Chrome from VS Code.\nJavaScript (ES6) code snippets: Provides useful code snippets for faster development.\n\nAfter installing VS Code and these extensions, create a project folder with HTML and JavaScript files to begin your coding journey."
        },
        "JavaScript Execution": {
          "JavaScript Execution": "Now that we've set up our development environment, let's create a simple web page with JavaScript to understand how it executes.",
          "Creating JavaScript Files": "Create a new folder for your project if you haven't already.\nWithin this folder, create two files: index.html and script.js.\nThe HTML file will provide the structure, while the JavaScript file will add interactivity.",
          "Basic HTML Structure": "In your index.html file, paste the following code:\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My First JavaScript Page</title>\n    <!-- JavaScript can be placed in the head section -->\n    <script>\n        // Internal JavaScript\n        console.log(\"This runs when the head is parsed\");\n    </script>\n    <!-- External JavaScript file -->\n    <script src=\"script.js\" defer></script>\n</head>\n<body>\n    <h1>Hello, JavaScript World!</h1>\n    <p>This is a paragraph that we'll manipulate with JavaScript.</p>\n    <button id=\"changeTextBtn\">Click me to change text</button>\n    \n    <!-- JavaScript right before closing body tag is another common placement -->\n    <script>\n        console.log(\"This runs when the body is parsed\");\n    </script>\n</body>\n</html>",
          "Adding JavaScript": "Now, in your script.js file, add the following JavaScript code:\n\n// Wait for the DOM to be fully loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('DOM fully loaded');\n    \n    // Get a reference to the button and paragraph\n    const button = document.getElementById('changeTextBtn');\n    const paragraph = document.querySelector('p');\n    \n    // Add a click event listener to the button\n    button.addEventListener('click', function() {\n        paragraph.textContent = 'Text changed by JavaScript!';\n        paragraph.style.color = 'blue';\n        alert('Paragraph text has been changed!');\n    });\n});\n\n// This will execute when the script is loaded\nconsole.log('External script loaded');",
          "Viewing Your JavaScript in Action": "Open your index.html file using the Live Server extension in VS Code (right-click and select 'Open with Live Server').\nOpen the browser's developer console (F12 or right-click > Inspect > Console).\nYou should see the console log messages showing the execution order.\nClick the button to see JavaScript in action - it will change the paragraph text, color, and show an alert.\nThis demonstrates the basic workflow of creating and executing JavaScript in a web page."
        }
      },
      "JAVASCRIPT VARIABLES": {
        "What are Variables?": {
          "What are Variables?": "Variables are containers for storing data values in JavaScript. They act as named storage locations that hold values you want to use or manipulate in your code. Think of variables like labeled boxes that store different types of information you can reference later.",
          "Declaring Variables": "In JavaScript, you can declare variables using var, let, or const keywords:\n\n// Using var (older way, function-scoped)\nvar age = 25;\n\n// Using let (block-scoped, can be reassigned)\nlet name = 'John';\n\n// Using const (block-scoped, cannot be reassigned)\nconst PI = 3.14159;\n\nYou can also declare multiple variables in one statement:\n\nlet firstName = 'John', lastName = 'Doe', age = 30;",
          "Variable Assignment": "Variables can be declared without initial values and assigned later:\n\nlet score; // Declaration\nscore = 100; // Assignment\n\nYou can also change the value of variables declared with var and let (but not const):\n\nlet count = 1;\ncount = count + 1; // Now count is 2\ncount += 1;       // Now count is 3 (shorthand)\ncount++;          // Now count is 4 (increment operator)",
          "Dynamic Typing": "JavaScript is a dynamically typed language, meaning variables can hold values of any type and can change types:\n\nlet value = 42;     // value is a number\nvalue = 'Hello';    // value is now a string\nvalue = true;       // value is now a boolean\nvalue = null;       // value is now null\nvalue = undefined;  // value is now undefined\nvalue = { key: 'value' }; // value is now an object\n\nThis flexibility can be powerful but also requires careful tracking of variable types."
        },
        "Variable Naming Rules": {
          "Variable Naming Rules": "JavaScript has specific rules and conventions for naming variables. Following these makes your code more readable and helps avoid errors.",
          "Basic Rules": "Variable names:\n- Must start with a letter, underscore (_), or dollar sign ($)\n- Cannot start with a number\n- Can include letters, numbers, underscores, and dollar signs\n- Are case-sensitive (age and Age are different variables)\n- Cannot use reserved keywords (like if, function, return)\n\nValid variable names:\nlet firstName = 'John';\nlet $element = document.getElementById('main');\nlet _count = 42;\nlet user123 = { name: 'Alice' };\n\nInvalid variable names:\nlet 123user = 'Invalid';  // Cannot start with a number\nlet user-name = 'Invalid'; // Cannot use hyphens\nlet let = 'Invalid';       // Cannot use reserved keywords",
          "Naming Conventions": "While not enforced by JavaScript, these conventions make code more readable:\n\n1. camelCase for variables and functions:\nlet firstName = 'John';\nfunction calculateTotal() { }\n\n2. PascalCase for classes and constructors:\nclass User { }\nfunction Person() { }\n\n3. UPPERCASE_WITH_UNDERSCORES for constants:\nconst MAX_SIZE = 100;\nconst API_KEY = 'abc123';\n\n4. Use descriptive names that explain purpose:\nGood: let userAge = 25;\nBad: let x = 25;",
          "Best Practices": "- Use nouns for variables and objects\n- Use verbs for functions and methods\n- Be consistent in your naming style\n- Avoid single-letter variables except in loops or short callbacks\n- Don't use excessively long names\n- Avoid similar names with different casing (item vs. Item)"
        },
        "Primitives and Objects": {
          "Primitives and Objects": "JavaScript has two fundamental data types: primitives and objects. Understanding the difference is crucial for writing efficient JavaScript code.",
          "Primitive Data Types": "Primitives are basic, immutable data types stored directly in memory:\n\n1. String: Text data\nlet name = 'John';\nlet greeting = \"Hello\";\nlet template = `Hello, ${name}`; // Template literal (ES6)\n\n2. Number: Numeric data (integers and floating-point)\nlet age = 30;\nlet price = 19.99;\nlet scientific = 2.5e6; // 2,500,000\nlet infinity = Infinity;\nlet notANumber = NaN;\n\n3. Boolean: Logical data (true/false)\nlet isActive = true;\nlet hasPermission = false;\n\n4. Undefined: Variable declared but not assigned a value\nlet user;\nconsole.log(user); // undefined\n\n5. Null: Intentional absence of any object value\nlet empty = null;\n\n6. Symbol (ES6): Unique and immutable primitive\nlet uniqueId = Symbol('id');\n\n7. BigInt (ES2020): Integers larger than Number can represent\nlet bigNumber = 9007199254740991n;\nlet anotherBig = BigInt('9007199254740991');",
          "Reference Data Types (Objects)": "Objects are collections of properties stored by reference:\n\n1. Object: Collection of key-value pairs\nlet person = {\n  name: 'John',\n  age: 30,\n  isEmployed: true\n};\n\n// Accessing properties\nconsole.log(person.name);      // Dot notation\nconsole.log(person['age']);    // Bracket notation\n\n2. Array: Ordered collection of values\nlet colors = ['red', 'green', 'blue'];\nconsole.log(colors[0]);        // Access first element\ncolors.push('yellow');         // Add element\n\n3. Function: Callable object that executes code\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n\n// Functions are objects too\ngreet.language = 'English';\n\n4. Date, RegExp, Map, Set, etc. - Other specialized object types\nlet today = new Date();\nlet pattern = /\\d+/g;           // Regular expression\nlet map = new Map();           // Map object",
          "Primitive vs Reference Behavior": "The key difference is how they're stored and compared:\n\n// Primitives are compared by value\nlet x = 10;\nlet y = 10;\nconsole.log(x === y); // true\n\n// Objects are compared by reference\nlet obj1 = { value: 10 };\nlet obj2 = { value: 10 };\nconsole.log(obj1 === obj2); // false - different references\n\nlet obj3 = obj1;\nconsole.log(obj1 === obj3); // true - same reference\n\n// Modifying objects\nobj3.value = 20;\nconsole.log(obj1.value); // 20 - obj1 is also changed\n\n// But primitives are independent\nlet a = 5;\nlet b = a;\na = 10;\nconsole.log(b); // Still 5"
        },
        "Operators and Expressions": {
          "Operators and Expressions": "Operators in JavaScript are symbols that perform operations on operands. Expressions are combinations of values, variables, and operators that yield a result.",
          "Arithmetic Operators": "Perform mathematical operations:\n\n// Basic arithmetic\nlet sum = 5 + 3;      // Addition: 8\nlet diff = 10 - 4;    // Subtraction: 6\nlet product = 7 * 2;  // Multiplication: 14\nlet quotient = 20 / 4; // Division: 5\nlet remainder = 10 % 3; // Modulus (remainder): 1\nlet power = 2 ** 3;   // Exponentiation: 8 (ES2016)\n\n// Increment and decrement\nlet count = 5;\ncount++;              // Postfix increment: count = 6\n++count;              // Prefix increment: count = 7\ncount--;              // Postfix decrement: count = 6\n--count;              // Prefix decrement: count = 5\n\n// Prefix vs postfix\nlet a = 5;\nlet b = a++;         // b = 5, then a becomes 6\n\nlet c = 5;\nlet d = ++c;         // c becomes 6, then d = 6",
          "Assignment Operators": "Assign values to variables:\n\nlet x = 10;          // Basic assignment\n\n// Compound assignment\nx += 5;              // x = x + 5 (15)\nx -= 3;              // x = x - 3 (12)\nx *= 2;              // x = x * 2 (24)\nx /= 4;              // x = x / 4 (6)\nx %= 4;              // x = x % 4 (2)\nx **= 3;             // x = x ** 3 (8)\n\n// Other compound assignments\nx &= 5;              // Bitwise AND assignment\nx |= 3;              // Bitwise OR assignment\nx ^= 2;              // Bitwise XOR assignment\nx >>= 1;             // Right shift assignment\nx <<= 1;             // Left shift assignment",
          "Comparison Operators": "Compare values and return a boolean result:\n\n// Equality operators\nconsole.log(5 == 5);    // Equal: true\nconsole.log(5 == '5');  // Equal with type conversion: true\nconsole.log(5 === '5'); // Strict equal (no type conversion): false\nconsole.log(5 != 8);    // Not equal: true\nconsole.log(5 !== '5'); // Strict not equal: true\n\n// Relational operators\nconsole.log(10 > 5);    // Greater than: true\nconsole.log(5 < 10);    // Less than: true\nconsole.log(10 >= 10);  // Greater than or equal: true\nconsole.log(5 <= 10);   // Less than or equal: true",
          "Logical Operators": "Combine or manipulate boolean values:\n\n// Basic boolean logic\nconsole.log(true && true);   // Logical AND: true\nconsole.log(true && false);  // Logical AND: false\nconsole.log(true || false);  // Logical OR: true\nconsole.log(!true);          // Logical NOT: false\n\n// Short-circuit evaluation\nlet a = true && console.log('This runs');  // This runs\nlet b = false && console.log('This never runs'); // Skipped\nlet c = true || console.log('This never runs'); // Skipped\nlet d = false || console.log('This runs');  // This runs\n\n// Nullish coalescing (ES2020)\nlet username = null;\nlet displayName = username ?? 'Anonymous'; // 'Anonymous'\n// Only null and undefined trigger the right side (unlike ||)",
          "Other Operators": "// String concatenation\nlet fullName = 'John' + ' ' + 'Doe'; // 'John Doe'\n\n// Conditional (ternary) operator\nlet age = 20;\nlet status = age >= 18 ? 'Adult' : 'Minor'; // 'Adult'\n\n// typeof operator\nconsole.log(typeof 42);        // 'number'\nconsole.log(typeof 'hello');   // 'string'\nconsole.log(typeof true);      // 'boolean'\nconsole.log(typeof undefined); // 'undefined'\nconsole.log(typeof null);      // 'object' (historical bug)\nconsole.log(typeof {});        // 'object'\n\n// Optional chaining (ES2020)\nlet user = {};\nconsole.log(user?.address?.street); // undefined instead of error"
        },
        "var vs let vs const": {
          "var vs let vs const": "JavaScript has three ways to declare variables: var, let, and const. Each has different rules for scope, hoisting, and reassignment. Understanding these differences is crucial for writing clean, bug-free code.",
          "var": "The original way to declare variables in JavaScript:\n\n// Function scope\nfunction example() {\n  var x = 10;\n  if (true) {\n    var x = 20;  // Same variable as above\n    console.log(x);  // 20\n  }\n  console.log(x);  // 20 (not 10)\n}\n\n// Hoisting\nconsole.log(hoisted); // undefined (not an error)\nvar hoisted = 5;\n\n// Global object property when declared in global scope\nvar globalVar = 'I am global';\nconsole.log(window.globalVar); // 'I am global' (in browsers)\n\nCharacteristics of var:\n- Function-scoped (not block-scoped)\n- Hoisted (declaration moved to top of scope, initialized as undefined)\n- Can be redeclared in the same scope\n- Creates property on global object when declared globally",
          "let": "Introduced in ES6 (ES2015) for better variable declaration:\n\n// Block scope\nfunction example() {\n  let x = 10;\n  if (true) {\n    let x = 20;  // Different variable than above\n    console.log(x);  // 20\n  }\n  console.log(x);  // 10 (not affected by block)\n}\n\n// Temporal Dead Zone (TDZ)\nconsole.log(tdz); // ReferenceError\nlet tdz = 5;\n\n// Cannot redeclare in same scope\nlet name = 'John';\nlet name = 'Jane'; // SyntaxError\n\nCharacteristics of let:\n- Block-scoped\n- Hoisted but not initialized (TDZ until declaration line)\n- Cannot be redeclared in the same scope\n- Does not create property on global object\n- Can be reassigned",
          "const": "Also introduced in ES6, for constant (unchangeable) variables:\n\n// Similar block scope to let\nconst PI = 3.14159;\nPI = 3.14; // TypeError: Assignment to constant variable\n\n// Must be initialized at declaration\nconst API_KEY; // SyntaxError\n\n// But objects and arrays can be modified\nconst user = { name: 'John' };\nuser.name = 'Jane'; // This works\nuser = {}; // TypeError: Assignment to constant variable\n\nconst numbers = [1, 2, 3];\nnumbers.push(4); // This works\nnumbers = []; // TypeError: Assignment to constant variable\n\nCharacteristics of const:\n- Block-scoped (like let)\n- Hoisted but not initialized (TDZ until declaration)\n- Cannot be redeclared in the same scope\n- Must be initialized when declared\n- Cannot be reassigned\n- However, object and array contents can be changed",
          "Best Practices": "Modern JavaScript best practices:\n\n1. Use const by default for all variables\n2. Use let when you need to reassign a variable\n3. Avoid var in new code\n4. Declare variables at the top of their scope\n5. Use descriptive variable names\n\nExample of modern usage:\n\nfunction processUser(userData) {\n  // Use const for values that won't change\n  const id = userData.id;\n  const createdAt = new Date();\n  \n  // Use let for values that will change\n  let score = 0;\n  let attempts = 3;\n  \n  while (attempts > 0) {\n    // Block-scoped variables\n    const multiplier = attempts * 2;\n    score += calculatePoints() * multiplier;\n    attempts--;\n  }\n  \n  return { id, score, createdAt };\n}"
        }
      },
      "JAVASCRIPT BASICS": {
        "If else conditionals": {
          "If else conditionals": "Conditional statements allow your program to make decisions based on conditions. The if...else statement is the most basic form of conditional logic in JavaScript.",
          "Basic if Statement": "The if statement executes a block of code if a specified condition is true:\n\nlet hour = 14;\n\nif (hour < 18) {\n  console.log('Good day!');\n}\n\nIn this example, 'Good day!' will be logged because hour (14) is less than 18.\n\nYou can also use variables directly as conditions - truthy values execute the block:\n\nlet isLoggedIn = true;\n\nif (isLoggedIn) {\n  console.log('Welcome back!');\n}\n\n// Equivalent to:\nif (isLoggedIn === true) {\n  console.log('Welcome back!');\n}",
          "if...else Statement": "The if...else statement executes one block if the condition is true and another block if it's false:\n\nlet hour = 20;\n\nif (hour < 18) {\n  console.log('Good day!');\n} else {\n  console.log('Good evening!');\n}\n\nIn this example, 'Good evening!' will be logged because hour (20) is not less than 18.\n\nThis creates a binary decision - exactly one of the two code blocks will execute.",
          "Comparison Expressions": "Conditions typically use comparison operators:\n\n// Equality checks\nif (age === 18) { } // Strict equality (value and type)\nif (name == 'John') { } // Loose equality (converts types)\n\n// Inequality checks\nif (age !== 18) { } // Strict inequality\nif (name != 'John') { } // Loose inequality\n\n// Relational comparisons\nif (age > 18) { } // Greater than\nif (score >= 100) { } // Greater than or equal\nif (price < 20) { } // Less than\nif (quantity <= 0) { } // Less than or equal\n\n// Logical operators\nif (age > 18 && isRegistered) { } // AND (both true)\nif (isAdmin || isOwner) { } // OR (at least one true)\nif (!isBlocked) { } // NOT (inverses boolean value)"
        },
        "If else ladder": {
          "If else ladder": "The if...else ladder (also called if...else if...else) allows you to check multiple conditions in sequence. It's useful when you have several possible conditions and need to execute different code for each one.",
          "Basic if...else if...else Structure": "let hour = 14;\n\nif (hour < 12) {\n  console.log('Good morning!');\n} else if (hour < 18) {\n  console.log('Good afternoon!');\n} else {\n  console.log('Good evening!');\n}\n\nIn this example, 'Good afternoon!' will be logged because hour (14) is not less than 12 but is less than 18.\n\nYou can have as many 'else if' blocks as needed, but only one 'else' block at the end (optional).",
          "Multiple Conditions": "A more complex example with multiple conditions:\n\nlet score = 85;\nlet grade;\n\nif (score >= 90) {\n  grade = 'A';\n} else if (score >= 80) {\n  grade = 'B';\n} else if (score >= 70) {\n  grade = 'C';\n} else if (score >= 60) {\n  grade = 'D';\n} else {\n  grade = 'F';\n}\n\nconsole.log(`Your grade is ${grade}`); // Your grade is B\n\nOnly the first matching condition's block will execute, even if multiple conditions are true. For example, if score is 95, it matches both score >= 90 and score >= 80, but only the first matching block runs.",
          "Execution Flow": "The if...else ladder checks conditions from top to bottom:\n\n1. If the first condition is true, its code block executes and all other conditions are skipped\n2. If the first condition is false, it checks the second condition\n3. This continues until a true condition is found or the else block is reached\n4. If no condition is true and there's no else block, nothing happens\n\nPerformance tip: Put your most likely conditions first when possible, to avoid unnecessary condition checks."
        },
        "Switch case": {
          "Switch case": "The switch statement is an alternative to if...else ladders when you want to compare a single expression against multiple possible values. It can be more readable and may perform better when checking a variable against many values.",
          "Basic switch Syntax": "let day = 3;\nlet dayName;\n\nswitch (day) {\n  case 1:\n    dayName = 'Monday';\n    break;\n  case 2:\n    dayName = 'Tuesday';\n    break;\n  case 3:\n    dayName = 'Wednesday';\n    break;\n  case 4:\n    dayName = 'Thursday';\n    break;\n  case 5:\n    dayName = 'Friday';\n    break;\n  case 6:\n    dayName = 'Saturday';\n    break;\n  case 7:\n    dayName = 'Sunday';\n    break;\n  default:\n    dayName = 'Invalid day';\n}\n\nconsole.log(dayName); // Wednesday\n\nThis switch statement compares the value of day against each case. Since day is 3, 'Wednesday' is assigned to dayName.",
          "Break and Fall-Through": "The break statement is crucial in switch cases to prevent fall-through:\n\nlet fruit = 'Apple';\nlet response;\n\nswitch (fruit) {\n  case 'Apple':\n    response = 'Apples are $1.99 per pound';\n    break; // Without this, execution would continue to the next case\n  case 'Banana':\n    response = 'Bananas are $0.59 per pound';\n    break;\n  case 'Orange':\n    response = 'Oranges are $0.89 per pound';\n    break;\n  default:\n    response = 'Sorry, we are out of ' + fruit;\n}\n\nWithout break statements, execution would continue to the next case regardless of whether it matches. This behavior can be intentionally used for cases that share code:",
          "Intentional Fall-Through": "let type = 'Visa';\nlet cardType;\n\nswitch (type) {\n  case 'Visa':\n  case 'Mastercard':\n  case 'Amex':\n    cardType = 'Credit Card';\n    break;\n  case 'PayPal':\n  case 'Stripe':\n    cardType = 'Online Payment';\n    break;\n  default:\n    cardType = 'Unknown Payment Type';\n}\n\nconsole.log(cardType); // Credit Card\n\nHere, multiple cases share the same code block. If type is 'Visa', 'Mastercard', or 'Amex', it assigns 'Credit Card' to cardType.",
          "Switch vs If...Else": "When to use switch versus if...else:\n\n- Use switch when comparing a single variable against multiple distinct values\n- Use if...else for ranges of values or different variables/conditions\n- Switch uses strict equality (===) comparison\n- Switch can be more readable with many conditions on the same variable\n\nExample where if...else is better:\n\nlet score = 85;\nlet grade;\n\n// Better as if...else because we're checking ranges\nif (score >= 90) {\n  grade = 'A';\n} else if (score >= 80) {\n  grade = 'B';\n} else if (score >= 70) {\n  grade = 'C';\n} else {\n  grade = 'F';\n}\n\n// Would be verbose and error-prone as switch\nswitch (true) {\n  case score >= 90:\n    grade = 'A';\n    break;\n  case score >= 80:\n    grade = 'B';\n    break;\n  // etc.\n}"
        },
        "Loops": {
          "Loops": "Loops in JavaScript allow you to execute code repeatedly until a certain condition is met. They're essential for processing arrays, iterating through objects, or executing tasks a specific number of times.",
          "For Loop": "The for loop repeats until a specified condition evaluates to false:\n\n// Basic for loop structure\nfor (initialization; condition; increment/decrement) {\n  // Code to execute in each iteration\n}\n\n// Example: Counting from 1 to 5\nfor (let i = 1; i <= 5; i++) {\n  console.log(i);\n}\n// Output: 1, 2, 3, 4, 5\n\n// Iterating through an array\nlet fruits = ['Apple', 'Banana', 'Orange', 'Mango'];\nfor (let i = 0; i < fruits.length; i++) {\n  console.log(fruits[i]);\n}\n// Output: Apple, Banana, Orange, Mango\n\nThe three expressions in a for loop are:\n1. Initialization: Executed once before the loop starts\n2. Condition: Evaluated before each iteration (loop stops when false)\n3. Increment/decrement: Executed after each iteration",
          "While Loop": "The while loop executes as long as a condition is true:\n\n// Basic while loop structure\nwhile (condition) {\n  // Code to execute\n}\n\n// Example: Counting from 1 to 5\nlet i = 1;\nwhile (i <= 5) {\n  console.log(i);\n  i++;\n}\n// Output: 1, 2, 3, 4, 5\n\n// Reading input until a condition is met\nlet userInput = '';\nwhile (userInput !== 'quit') {\n  userInput = getInput(); // hypothetical function\n  process(userInput); // hypothetical function\n}\n\nThe while loop is useful when you don't know in advance how many iterations you need.",
          "Do...While Loop": "The do...while loop executes at least once before checking the condition:\n\n// Basic do...while structure\ndo {\n  // Code to execute\n} while (condition);\n\n// Example: Counting from 1 to 5\nlet i = 1;\ndo {\n  console.log(i);\n  i++;\n} while (i <= 5);\n// Output: 1, 2, 3, 4, 5\n\n// Always executes at least once\nlet j = 10;\ndo {\n  console.log(j);\n  j++;\n} while (j <= 5);\n// Output: 10 (even though condition is false initially)\n\nThe do...while loop is useful when you need to execute code at least once regardless of the condition.",
          "For...Of Loop (ES6)": "The for...of loop iterates over iterable objects (arrays, strings, etc.):\n\n// Basic for...of structure\nfor (variable of iterable) {\n  // Code to execute\n}\n\n// Iterating through an array\nlet fruits = ['Apple', 'Banana', 'Orange'];\nfor (let fruit of fruits) {\n  console.log(fruit);\n}\n// Output: Apple, Banana, Orange\n\n// Iterating through a string\nlet name = 'John';\nfor (let char of name) {\n  console.log(char);\n}\n// Output: J, o, h, n\n\nThe for...of loop is concise and readable for iterating through values.",
          "For...In Loop": "The for...in loop iterates over an object's enumerable properties:\n\n// Basic for...in structure\nfor (variable in object) {\n  // Code to execute\n}\n\n// Iterating through an object's properties\nlet person = {\n  name: 'John',\n  age: 30,\n  job: 'Developer'\n};\n\nfor (let key in person) {\n  console.log(`${key}: ${person[key]}`);\n}\n// Output: name: John, age: 30, job: Developer\n\n// Warning: for...in can also iterate over inherited properties\n// Use hasOwnProperty() to filter if needed:\nfor (let key in person) {\n  if (person.hasOwnProperty(key)) {\n    console.log(`${key}: ${person[key]}`);\n  }\n}\n\nThe for...in loop is primarily designed for objects, not arrays.",
          "Break and Continue": "The break statement exits a loop completely:\n\nfor (let i = 1; i <= 10; i++) {\n  if (i === 5) {\n    break; // Exit the loop when i is 5\n  }\n  console.log(i);\n}\n// Output: 1, 2, 3, 4\n\nThe continue statement skips the current iteration and continues with the next:\n\nfor (let i = 1; i <= 5; i++) {\n  if (i === 3) {\n    continue; // Skip 3 and continue with 4\n  }\n  console.log(i);\n}\n// Output: 1, 2, 4, 5\n\nThese statements give you more control over loop execution flow."
        },
        "Functions": {
          "Functions": "Functions are reusable blocks of code that perform specific tasks. They allow you to group code, make it reusable, and provide organization to your programs.",
          "Function Declaration": "A function declaration defines a named function:\n\n// Basic function declaration syntax\nfunction functionName(parameters) {\n  // Code to execute\n  return value; // Optional return value\n}\n\n// Simple function with no parameters\nfunction sayHello() {\n  console.log('Hello!');\n}\nsayHello(); // Call the function: Output: Hello!\n\n// Function with parameters\nfunction greet(name) {\n  console.log(`Hello, ${name}!`);\n}\ngreet('John'); // Output: Hello, John!\n\n// Function with return value\nfunction add(a, b) {\n  return a + b;\n}\nlet sum = add(5, 3); // sum = 8\n\nFunction declarations are hoisted, meaning they can be called before they're defined in the code.",
          "Function Expression": "A function expression defines a function as part of an expression:\n\n// Anonymous function expression\nlet greet = function(name) {\n  console.log(`Hello, ${name}!`);\n};\ngreet('John'); // Output: Hello, John!\n\n// Named function expression\nlet factorial = function fact(n) {\n  if (n <= 1) return 1;\n  return n * fact(n - 1); // The name 'fact' is only available inside the function\n};\nlet result = factorial(5); // result = 120\n\nUnlike function declarations, function expressions are not hoisted. They must be defined before they are used.",
          "Arrow Functions (ES6)": "Arrow functions provide a shorter syntax for function expressions:\n\n// Basic arrow function syntax\nlet functionName = (parameters) => {\n  // Code to execute\n  return value;\n};\n\n// Simple arrow function\nlet greet = (name) => {\n  return `Hello, ${name}!`;\n};\nconsole.log(greet('John')); // Output: Hello, John!\n\n// Shortened syntax for single expressions (implicit return)\nlet add = (a, b) => a + b;\nconsole.log(add(5, 3)); // Output: 8\n\n// For single parameters, parentheses are optional\nlet square = n => n * n;\nconsole.log(square(4)); // Output: 16\n\n// No parameters require empty parentheses\nlet sayHello = () => 'Hello!';\nconsole.log(sayHello()); // Output: Hello!\n\nArrow functions have no this binding of their own, which makes them useful in certain contexts like callbacks.",
          "Parameters and Arguments": "Parameters are variables listed in a function definition:\n\nfunction greet(name, age) { // name and age are parameters\n  console.log(`Hello, ${name}! You are ${age} years old.`);\n}\n\nArguments are values passed to a function when it's called:\n\ngreet('John', 30); // 'John' and 30 are arguments\n\n// Default parameters (ES6)\nfunction greet(name = 'Guest', age = 'unknown') {\n  console.log(`Hello, ${name}! You are ${age} years old.`);\n}\ngreet(); // Output: Hello, Guest! You are unknown years old.\ngreet('John'); // Output: Hello, John! You are unknown years old.\n\n// Rest parameters (ES6)\nfunction sum(...numbers) { // Collects all arguments into an array\n  return numbers.reduce((total, num) => total + num, 0);\n}\nconsole.log(sum(1, 2, 3, 4)); // Output: 10\nconsole.log(sum(10, 20)); // Output: 30",
          "Function Scope": "Variables declared inside a function can't be accessed from outside:\n\nfunction test() {\n  let localVar = 'I am local';\n  console.log(localVar); // Accessible\n}\ntest();\n// console.log(localVar); // Error: localVar is not defined\n\n// But functions can access variables from outer scopes\nlet outerVar = 'I am outer';\nfunction test() {\n  console.log(outerVar); // Can access outer variables\n}\ntest(); // Output: I am outer\n\n// Nested functions can access variables from parent functions\nfunction outer() {\n  let x = 10;\n  \n  function inner() {\n    console.log(x); // Can access x from outer function\n  }\n  \n  inner();\n}\nouter(); // Output: 10",
          "Immediately Invoked Function Expression (IIFE)": "An IIFE runs as soon as it's defined:\n\n// IIFE syntax\n(function() {\n  // Code to execute immediately\n  console.log('I run immediately!');\n})();\n\n// IIFE with parameters\n(function(name) {\n  console.log(`Hello, ${name}!`);\n})('John'); // Output: Hello, John!\n\n// IIFE with arrow function\n(() => {\n  console.log('I also run immediately!');\n})();\n\nIIFEs are useful for creating private scope and avoiding polluting the global namespace."
        }
      },
      "JAVASCRIPT OBJECTS": {
        "Objects": {
          "Definition": "Objects are collections of key-value pairs, where keys are strings (or Symbols) and values can be any data type.",
          "Example": "let person = { name: 'John', age: 30, isEmployed: true };"
        },
        "Strings": {
          "Definition": "Strings are sequences of characters used to represent text.",
          "Creation": {
            "Single quotes": "let str1 = 'Hello World';",
            "Double quotes": "let str2 = \"Hello World\";",
            "Template literals": "let name = 'John'; let greeting = `Hello ${name}`;"
          },
          "Example": "let greeting = 'Hello, World!';",
          "Properties": {
            "length": "let text = 'Hello'; console.log(text.length); // 5"
          },
          "Methods": {
            "toUpperCase": "'hello'.toUpperCase(); // 'HELLO'",
            "toLowerCase": "'HELLO'.toLowerCase(); // 'hello'",
            "charAt": "'hello'.charAt(0); // 'h'",
            "indexOf": "'hello world'.indexOf('world'); // 6",
            "includes": "'hello world'.includes('world'); // true",
            "slice": "'hello world'.slice(0, 5); // 'hello'",
            "split": "'hello world'.split(' '); // ['hello', 'world']",
            "replace": "'hello world'.replace('world', 'JavaScript'); // 'hello JavaScript'",
            "trim": "'  hello  '.trim(); // 'hello'"
          }
        },
        "Arrays and Array Methods": {
          "Definition": "Arrays are ordered collections of values.",
          "Example": "let fruits = ['Apple', 'Banana', 'Orange'];",
          "Creation": {
            "Array literal": "let fruits = ['Apple', 'Banana', 'Orange'];",
            "Array constructor": "let arr = new Array(1, 2, 3);",
            "Empty array": "let empty = [];"
          },
          "Properties": {
            "length": "let nums = [1, 2, 3]; console.log(nums.length); // 3"
          },
          "Methods": {
            "push": "let arr = [1, 2]; arr.push(3); // arr is now [1, 2, 3]",
            "pop": "let arr = [1, 2, 3]; let last = arr.pop(); // arr is [1, 2], last is 3",
            "shift": "let arr = [1, 2, 3]; let first = arr.shift(); // arr is [2, 3], first is 1",
            "unshift": "let arr = [2, 3]; arr.unshift(1); // arr is now [1, 2, 3]",
            "concat": "let arr1 = [1, 2]; let arr2 = [3, 4]; let arr3 = arr1.concat(arr2); // [1, 2, 3, 4]",
            "slice": "let arr = [1, 2, 3, 4]; let part = arr.slice(1, 3); // part is [2, 3]",
            "splice": "let arr = [1, 2, 3, 4]; arr.splice(1, 2, 'a', 'b'); // arr is now [1, 'a', 'b', 4]",
            "indexOf": "let arr = [1, 2, 3]; console.log(arr.indexOf(2)); // 1",
            "join": "let arr = ['Hello', 'World']; let str = arr.join(' '); // 'Hello World'",
            "reverse": "let arr = [1, 2, 3]; arr.reverse(); // arr is now [3, 2, 1]",
            "sort": "let arr = [3, 1, 2]; arr.sort(); // arr is now [1, 2, 3]"
          }
        },
        "Loops with Arrays": {
          "Definition": "Loops can be used to iterate over array elements.",
          "for loop": "let nums = [1, 2, 3];\nfor (let i = 0; i < nums.length; i++) {\n  console.log(nums[i]);\n}",
          "for...of loop": "let nums = [1, 2, 3];\nfor (let num of nums) {\n  console.log(num);\n}",
          "forEach method": "let nums = [1, 2, 3];\nnums.forEach(function(num) {\n  console.log(num);\n});",
          "forEach with arrow function": "let nums = [1, 2, 3];\nnums.forEach(num => console.log(num));"
        },
        "Map, Filter and Reduce": {
          "Map": {
            "Definition": "Creates a new array with the results of calling a provided function on every element.",
            "Example": "let doubled = numbers.map(num => num * 2);"
          },
          "Filter": {
            "Definition": "Creates a new array with all elements that pass the test implemented by the provided function.",
            "Example": "let evens = numbers.filter(num => num % 2 === 0);"
          },
          "Reduce": {
            "Definition": "Executes a reducer function on each element of the array, resulting in a single output value.",
            "Example": "let sum = numbers.reduce((acc, num) => acc + num, 0);"
          },
          "chaining methods": "let nums = [1, 2, 3, 4, 5];\nlet result = nums\n  .filter(n => n % 2 === 0)\n  .map(n => n * 2)\n  .reduce((sum, n) => sum + n, 0); // 12"
        },
        "Date": {
          "Definition": "The Date object is used to work with dates and times.",
          "Example": "let now = new Date();",
          "Creation": {
            "Current date": "let now = new Date();",
            "Specific date": "let date = new Date('2023-01-15');",
            "With arguments": "let date = new Date(2023, 0, 15); // Jan 15, 2023"
          },
          "Methods": {
            "getDate": "let now = new Date(); let day = now.getDate();",
            "getMonth": "let now = new Date(); let month = now.getMonth(); // 0-11 (Jan is 0)",
            "getFullYear": "let now = new Date(); let year = now.getFullYear();",
            "getHours": "let now = new Date(); let hours = now.getHours();",
            "getMinutes": "let now = new Date(); let minutes = now.getMinutes();",
            "getSeconds": "let now = new Date(); let seconds = now.getSeconds();",
            "toDateString": "let now = new Date(); console.log(now.toDateString());",
            "toTimeString": "let now = new Date(); console.log(now.toTimeString());",
            "toISOString": "let now = new Date(); console.log(now.toISOString());"
          }
        },
        "Math": {
          "Definition": "The Math object provides properties and methods for mathematical constants and functions.",
          "Example": {
            "PI": "console.log(Math.PI); // 3.14159...",
            "round": "console.log(Math.round(4.7)); // 5",
            "random": "console.log(Math.random()); // Random number between 0 and 1"
          },
          "Properties": {
            "PI": "console.log(Math.PI); // 3.141592653589793",
            "E": "console.log(Math.E); // 2.718281828459045"
          },
          "Methods": {
            "abs": "Math.abs(-5); // 5",
            "ceil": "Math.ceil(4.2); // 5",
            "floor": "Math.floor(4.7); // 4",
            "round": "Math.round(4.5); // 5",
            "max": "Math.max(5, 10, 3); // 10",
            "min": "Math.min(5, 10, 3); // 3",
            "pow": "Math.pow(2, 3); // 8",
            "sqrt": "Math.sqrt(16); // 4",
            "random": "Math.random(); // Random number between 0 and 1",
            "Random integer": "Math.floor(Math.random() * 10); // Random integer 0-9"
          }
        },
        "Number": {
          "Definition": "The Number object is a wrapper for numeric values.",
          "Creation": {
            "Literals": "let num1 = 42; let num2 = 3.14;",
            "Constructor": "let num = new Number(42);"
          },
          "Methods": {
            "toString": "let num = 42; console.log(num.toString()); // '42'",
            "toFixed": "let num = 3.14159; console.log(num.toFixed(2)); // '3.14'",
            "toPrecision": "let num = 3.14159; console.log(num.toPrecision(3)); // '3.14'",
            "parseInt": "let num = parseInt('42'); // 42",
            "parseFloat": "let num = parseFloat('3.14'); // 3.14",
            "isNaN": "console.log(isNaN('hello')); // true",
            "isFinite": "console.log(isFinite(42)); // true"
          }
        },
        "Boolean": {
          "Definition": "The Boolean object represents a logical entity and can have two values: true and false.",
          "Creation": {
            "Literals": "let isActive = true; let isLoggedIn = false;",
            "Constructor": "let bool = new Boolean(1); // true"
          },
          "Truthy and Falsy": {
            "Falsy values": "false, 0, '', null, undefined, NaN",
            "Truthy values": "true, non-zero numbers, non-empty strings, arrays, objects"
          },
          "Boolean conversion": {
            "Boolean function": "Boolean(0); // false, Boolean(42); // true",
            "Double negation": "!!0; // false, !!42; // true"
          }
        }
      },
      "DOM & BOM": {
        "Definition": "The Document Object Model (DOM) represents the structure of a web page, while the Browser Object Model (BOM) provides interaction with the browser.",
        "Window Object": {
          "Properties": {
            "innerHeight": "window.innerHeight; // Height of window viewport",
            "innerWidth": "window.innerWidth; // Width of window viewport",
            "location": "window.location; // URL information",
            "document": "window.document; // The Document object"
          },
          "Methods": {
            "alert": "window.alert('Hello!');",
            "confirm": "if (window.confirm('Are you sure?')) { console.log('Yes'); }",
            "prompt": "let name = window.prompt('Enter your name:');",
            "setTimeout": "window.setTimeout(() => console.log('Delayed'), 1000);",
            "setInterval": "let id = window.setInterval(() => console.log('Repeating'), 1000);",
            "clearInterval": "window.clearInterval(id);"
          }
        },
        "History Object": {
          "Definition": "Allows manipulation of the browser session history.",
          "Properties": {
            "length": "window.history.length; // Number of entries in history"
          },
          "Methods": {
            "back": "window.history.back(); // Go back one page",
            "forward": "window.history.forward(); // Go forward one page",
            "go": "window.history.go(-2); // Go back two pages"
          }
        },
        "Navigator Object": {
          "Definition": "Provides information about the browser.",
          "Properties": {
            "userAgent": "navigator.userAgent; // Browser user agent string",
            "language": "navigator.language; // Browser language",
            "cookieEnabled": "navigator.cookieEnabled; // Whether cookies are enabled",
            "online": "navigator.onLine; // Whether browser is online"
          },
          "Methods": {
            "geolocation": "navigator.geolocation.getCurrentPosition(position => console.log(position));"
          }
        },
        "Screen Object": {
          "Definition": "Contains information about the user's screen.",
          "Properties": {
            "width": "screen.width; // Screen width in pixels",
            "height": "screen.height; // Screen height in pixels",
            "availWidth": "screen.availWidth; // Available screen width",
            "availHeight": "screen.availHeight; // Available screen height",
            "colorDepth": "screen.colorDepth; // Color depth of the screen"
          }
        },
        "Document Object": {
          "Definition": "Represents the web page loaded in the browser.",
          "Properties": {
            "title": "document.title; // Page title",
            "URL": "document.URL; // Document URL",
            "body": "document.body; // Reference to <body> element",
            "head": "document.head; // Reference to <head> element",
            "forms": "document.forms; // Collection of all forms",
            "images": "document.images; // Collection of all images"
          },
          "Methods": {
            "createElement": "let div = document.createElement('div');",
            "createTextNode": "let text = document.createTextNode('Hello');",
            "querySelector": "let element = document.querySelector('.myClass');",
            "querySelectorAll": "let elements = document.querySelectorAll('p');",
            "write": "document.write('<p>Hello</p>');"
          }
        },
        "getElementById": {
          "Usage": "let element = document.getElementById('myId');",
          "Example": "// HTML: <div id=\"content\">Hello</div>\nlet content = document.getElementById('content');\ncontent.style.color = 'red';"
        },
        "getElementsByClassName": {
          "Usage": "let elements = document.getElementsByClassName('myClass');",
          "Example": "// HTML: <div class=\"item\">Item 1</div><div class=\"item\">Item 2</div>\nlet items = document.getElementsByClassName('item');\nfor (let item of items) {\n  item.style.fontWeight = 'bold';\n}"
        },
        "getElementsByName": {
          "Usage": "let elements = document.getElementsByName('myName');",
          "Example": "// HTML: <input name=\"username\">\nlet inputs = document.getElementsByName('username');\ninputs[0].value = 'John';"
        },
        "getElementsByTagName": {
          "Usage": "let elements = document.getElementsByTagName('tagName');",
          "Example": "// HTML: <p>Para 1</p><p>Para 2</p>\nlet paragraphs = document.getElementsByTagName('p');\nfor (let p of paragraphs) {\n  p.style.margin = '10px';\n}"
        },
        "innerHTML": {
          "Description": "Gets or sets the HTML content within an element",
          "Get": "let content = element.innerHTML;",
          "Set": "element.innerHTML = '<strong>New content</strong>';",
          "Example": "// HTML: <div id=\"box\"></div>\nlet box = document.getElementById('box');\nbox.innerHTML = '<p>Hello World</p>';"
        },
        "outerHTML": {
          "Description": "Gets or sets the HTML including the element itself",
          "Get": "let html = element.outerHTML;",
          "Set": "element.outerHTML = '<div class=\"new\">Replaced</div>';",
          "Example": "// HTML: <div id=\"box\">Content</div>\nlet box = document.getElementById('box');\nconsole.log(box.outerHTML); // '<div id=\"box\">Content</div>'\nbox.outerHTML = '<p id=\"new\">New element</p>';"
        }
      },
      "OOPs": {
        "Class": {
          "Definition": "A blueprint for creating objects with shared properties and methods.",
          "Example": "class Person { constructor(name) { this.name = name; } greet() { console.log(`Hello, ${this.name}`); } }",
          "Basic class": "class Person {\n  constructor(name) {\n    this.name = name;\n  }\n  \n  greet() {\n    return `Hello, my name is ${this.name}`;\n  }\n}",
          "Creating instance": "let person = new Person('John');",
          "Using methods": "console.log(person.greet()); // 'Hello, my name is John'"
        },
        "Objects": {
          "Definition": "Instances of classes that hold data and methods.",
          "Example": "let john = new Person('John'); john.greet(); // Output: Hello, John",
          "Object literal": "let person = {\n  name: 'John',\n  age: 30,\n  greet() {\n    return `Hello, my name is ${this.name}`;\n  }\n};",
          "Accessing properties": "console.log(person.name); // 'John'\nconsole.log(person['age']); // 30",
          "Methods": "console.log(person.greet()); // 'Hello, my name is John'"
        },
        "Constructor": {
          "Definition": "A special method for initializing new objects.",
          "Example": "class Car { constructor(make, model) { this.make = make; this.model = model; } }",
          "Constructor function": "function Person(name, age) {\n  this.name = name;\n  this.age = age;\n  \n  this.greet = function() {\n    return `Hello, my name is ${this.name}`;\n  };\n}",
          "Creating instance": "let person = new Person('John', 30);",
          "Using constructor properties": "console.log(person.name); // 'John'\nconsole.log(person.age); // 30"
        },
        "Static Method": {
          "Definition": "A method that belongs to the class rather than instances.",
          "Example": "class MathUtil { static add(a, b) { return a + b; } } MathUtil.add(5, 3); // Output: 8",
          "Usage": "console.log(MathOperations.add(5, 3)); // 8\nconsole.log(MathOperations.multiply(5, 3)); // 15"
        },
        "Encapsulation": {
          "Definition": "The bundling of data and methods that operate on that data within one unit.",
          "Example": "class BankAccount { #balance; constructor() { this.#balance = 0; } deposit(amount) { this.#balance += amount; } }",
          "Private fields (ES2022)": "class BankAccount {\n  #balance = 0; // Private field\n  \n  constructor(owner) {\n    this.owner = owner;\n  }\n  \n  deposit(amount) {\n    this.#balance += amount;\n    return this.#balance;\n  }\n  \n  getBalance() {\n    return this.#balance;\n  }\n}",
          "Usage": "let account = new BankAccount('John');\naccount.deposit(100);\nconsole.log(account.getBalance()); // 100\n// console.log(account.#balance); // Error: private field"
        },
        "Inheritance": {
          "Definition": "A mechanism where one class can inherit properties and methods from another.",
          "Example": "class Animal { speak() { console.log('Animal speaks'); } } class Dog extends Animal { bark() { console.log('Woof!'); } }"
        },
        "Polymorphism": {
          "Definition": "The ability to present the same interface for different underlying data types.",
          "Basic inheritance": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n  \n  speak() {\n    return `${this.name} makes a noise.`;\n  }\n}\n\nclass Dog extends Animal {\n  speak() {\n    return `${this.name} barks.`;\n  }\n}",
          "Creating instance": "let dog = new Dog('Rex');",
          "Using inherited method": "console.log(dog.speak()); // 'Rex barks.'",
          "Example": "class Shape { area() { return 0; } } class Circle extends Shape { area() { return Math.PI * this.radius ** 2; } }"
        },
        "Abstraction": {
          "Definition": "The concept of hiding the complex reality while exposing only the necessary parts.",
          "Abstract class pattern": "class AbstractVehicle {\n  constructor() {\n    if (this.constructor === AbstractVehicle) {\n      throw new Error('Cannot instantiate abstract class');\n    }\n  }\n  \n  start() {\n    throw new Error('Method start() must be implemented');\n  }\n  \n  stop() {\n    throw new Error('Method stop() must be implemented');\n  }\n}\n\nclass Car extends AbstractVehicle {\n  start() {\n    return 'Car started';\n  }\n  \n  stop() {\n    return 'Car stopped';\n  }\n}",
          "Usage": "// let vehicle = new AbstractVehicle(); // Error\nlet car = new Car();\nconsole.log(car.start()); // 'Car started'",
          "Example": "class Vehicle { start() { console.log('Starting vehicle'); } } class Bike extends Vehicle { start() { console.log('Starting bike'); } }"
        }
      }
    }
  },
  {
    "ReactJS": {
      "React Tutorial": {
        "React Home": {
          "content": "introduction, ReactJS is a JavaScript library used to build User Interfaces (UI). It was created by Facebook in 2013 and is now maintained by Facebook and a community of individual developers and companies.",
          "keyFeatures": "Component-Based Architecture\nVirtual DOM for efficient rendering\nUnidirectional data flow\nJSX syntax\nRich ecosystem and community support",
          "helloWorld": "Here's a simple example of a React application that renders 'Hello, world!' to the page:",
          "code": "const root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<h1>Hello, world!</h1>);",
          "breakdown": "In this example, we're getting a div with id 'root' from the HTML document and rendering an <h1> element inside it. The div with id 'root' is where all React content will be rendered."
        },
        "React Setup": {
          "prerequisites": {
            "nodeJs": {
              "explanation": "Node.js is required to develop React applications. It comes with npm (Node Package Manager) which is used to install React and other dependencies.",
              "installation": "You can download it from: https://nodejs.org/en/"
            }
          },
          "creatingFirstApp": {
            "explanation": "Open your terminal in the directory you would like to create your application. Run this command to create a React application named 'my-react-app':",
            "code": "npx create-react-app my-react-app",
            "alternative": {
              "explanation": "OR, you can directly make your application without specifying a name, like this:",
              "code": "npx create-react-app .",
              "note": "In this case, all files will be kept in the current directory."
            },
            "namingRestriction": "Note: When choosing a folder name, make sure there are no spaces or capital letters because of npm naming restrictions."
          },
          "startingApp": {
            "enterDirectory": {
              "explanation": "Once the base application is created, if a folder is specified, you just have to enter the folder. You can use this command to enter:",
              "code": "cd directory-name"
            },
            "runApp": {
              "explanation": "Then just start up the application with this command:",
              "code": "npm start",
              "result": "and you are good to go!"
            }
          },
          "projectStructure": {
            "explanation": "A React project created with create-react-app has the following structure:",
            "structure": [
              "node_modules/ - Contains all the npm packages installed",
              "public/ - Contains static files like HTML, images, etc.",
              "src/ - Contains React source code",
              "package.json - Contains dependencies and scripts",
              "README.md - Contains information about the project"
            ]
          }
        },
        "React Getting Started": {
          "introduction": "React is all about components. A component is a function or class that returns a React element (typically created via JSX).",
          "basicComponent": {
            "explanation": "Here's a simple functional component in React:",
            "code": "function Welcome() {\n  return <h1>Hello, React!</h1>;\n}\n\nexport default Welcome;",
            "usage": "To use this component in another file:\n\nimport React from 'react';\nimport Welcome from './Welcome';\n\nfunction App() {\n  return <Welcome />;\n}"
          },
          "renderingToDOM": {
            "explanation": "To display your React components in the browser, you need to render them to the DOM:",
            "code": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);"
          },
          "componentComposition": {
            "explanation": "Components can be composed together to build complex UIs:",
            "code": "function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nfunction App() {\n  return (\n    <div>\n      <Welcome name=\"Sara\" />\n      <Welcome name=\"Cahal\" />\n      <Welcome name=\"Edite\" />\n    </div>\n  );\n}"
          }
        },
        "React ES6": {
          "introduction": "React applications typically use ES6 (ECMAScript 2015) features. Here are some important ES6 features used in React:",
          "arrowFunctions": {
            "explanation": "Arrow functions provide a more concise syntax for writing function expressions:",
            "code": "// Traditional function\nfunction add(a, b) {\n  return a + b;\n}\n\n// Arrow function\nconst add = (a, b) => a + b;",
            "reactUsage": "// Arrow function in React component\nconst Welcome = (props) => <h1>Hello, {props.name}</h1>;"
          },
          "destructuring": {
            "explanation": "Destructuring allows you to extract multiple values from data stored in objects and arrays:",
            "code": "// Object destructuring\nconst person = { name: 'John', age: 30 };\nconst { name, age } = person;\n\n// Array destructuring\nconst numbers = [1, 2, 3];\nconst [first, second, third] = numbers;",
            "reactUsage": "// Destructuring props in React\nfunction Welcome({ name, age }) {\n  return <h1>Hello, {name}. You are {age} years old.</h1>;\n}"
          },
          "spreadOperator": {
            "explanation": "The spread operator (...) allows an iterable to be expanded:",
            "code": "// Spread with arrays\nconst oldArray = [1, 2, 3];\nconst newArray = [...oldArray, 4, 5];\n\n// Spread with objects\nconst oldObj = { name: 'John' };\nconst newObj = { ...oldObj, age: 30 };",
            "reactUsage": "// Spreading props in React\nconst Button = (props) => {\n  const { className, ...rest } = props;\n  return <button className={`default-btn ${className}`} {...rest} />;\n};"
          },
          "classes": {
            "explanation": "ES6 introduced class syntax:",
            "code": "class Person {\n  constructor(name) {\n    this.name = name;\n  }\n  \n  sayHello() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n}",
            "reactUsage": "// Class component in React\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}"
          },
          "modules": {
            "explanation": "ES6 modules let you import and export values between JavaScript files:",
            "code": "// Exporting\nexport const name = 'John';\nexport function sayHello() { console.log('Hello'); }\nexport default Person;\n\n// Importing\nimport { name, sayHello } from './person';\nimport Person from './person';",
            "reactUsage": "// Importing in React\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';"
          }
        },
        "React Render HTML": {
          "introduction": "React renders HTML to the DOM using its virtual DOM and a function called ReactDOM.render().",
          "renderingElements": {
            "explanation": "To render a React element to the DOM, use ReactDOM.createRoot() and root.render():",
            "code": "const element = <h1>Hello, world</h1>;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(element);"
          },
          "updatingRenderedElements": {
            "explanation": "React elements are immutable. Once you create an element, you can't change its children or attributes. To update the UI, create a new element and pass it to root.render():",
            "code": "function tick() {\n  const element = (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {new Date().toLocaleTimeString()}.</h2>\n    </div>\n  );\n  const root = ReactDOM.createRoot(document.getElementById('root'));\n  root.render(element);\n}\n\nsetInterval(tick, 1000);"
          },
          "virtualDOM": {
            "explanation": "React uses a virtual DOM to optimize rendering performance. When your component's state changes, React creates a new virtual DOM tree, compares it with the previous one, and only updates the real DOM where necessary.",
            "benefits": [
              "Efficient updates",
              "Batch processing of DOM manipulations",
              "Cross-platform compatibility"
            ]
          }
        },
        "React JSX": {
          "introduction": "JSX is a syntax extension for JavaScript that looks similar to HTML. It makes it easier to write and understand React components.",
          "basicSyntax": {
            "explanation": "JSX allows you to write HTML-like code in your JavaScript:",
            "code": "const element = <h1>Hello, world!</h1>;"
          },
          "embeddingExpressions": {
            "explanation": "You can embed JavaScript expressions in JSX using curly braces {}:",
            "code": "const name = 'John';\nconst element = <h1>Hello, {name}!</h1>;"
          },
          "jsxAttributes": {
            "explanation": "You can specify attributes in JSX using either string literals or curly braces for JavaScript expressions:",
            "code": "const element = <a href=\"https://www.example.com\">Link</a>;\nconst element = <img src={user.avatarUrl} alt=\"Profile\" />;"
          },
          "childrenInJSX": {
            "explanation": "JSX can contain child elements:",
            "code": "const element = (\n  <div>\n    <h1>Hello!</h1>\n    <p>This is a paragraph.</p>\n  </div>\n);"
          },
          "jsxVsPlainJavaScript": {
            "explanation": "JSX is syntactic sugar for React.createElement() calls:",
            "jsxCode": "const element = (\n  <h1 className=\"greeting\">\n    Hello, world!\n  </h1>\n);",
            "equivalentJS": "const element = React.createElement(\n  'h1',\n  {className: 'greeting'},\n  'Hello, world!'\n);"
          }
        },
        "React Components": {
          "introduction": "Components are the building blocks of React applications. They let you split the UI into independent, reusable pieces.",
          "functionalComponents": {
            "explanation": "Functional components are JavaScript functions that accept props and return React elements:",
            "code": "function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\n// Arrow function syntax\nconst Welcome = (props) => <h1>Hello, {props.name}</h1>;"
          },
          "classComponents": {
            "explanation": "Class components are ES6 classes that extend React.Component and have a render method:",
            "code": "class Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}"
          },
          "renderingComponents": {
            "explanation": "Components can refer to other components in their output:",
            "code": "function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nfunction App() {\n  return (\n    <div>\n      <Welcome name=\"Sara\" />\n      <Welcome name=\"Cahal\" />\n      <Welcome name=\"Edite\" />\n    </div>\n  );\n}"
          },
          "extractingComponents": {
            "explanation": "You can break down complex components into smaller ones:",
            "code": "function Comment(props) {\n  return (\n    <div className=\"Comment\">\n      <UserInfo user={props.author} />\n      <div className=\"Comment-text\">{props.text}</div>\n      <div className=\"Comment-date\">{formatDate(props.date)}</div>\n    </div>\n  );\n}"
          }
        },
        "React Class": {
          "introduction": "Class components are a way to define React components using ES6 classes.",
          "basicClassComponent": {
            "explanation": "A basic class component extends React.Component and implements a render method:",
            "code": "import React from 'react';\n\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n\nexport default Welcome;"
          },
          "constructor": {
            "explanation": "Class components can have a constructor to initialize state and bind methods:",
            "code": "class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  \n  handleClick() {\n    this.setState({ count: this.state.count + 1 });\n  }\n  \n  render() {\n    return (\n      <div>\n        <p>You clicked {this.state.count} times</p>\n        <button onClick={this.handleClick}>Click me</button>\n      </div>\n    );\n  }\n}"
          },
          "lifecycle": {
            "explanation": "Class components have lifecycle methods that are called at different stages:",
            "mountingMethods": {
              "explanation": "Methods called when a component is being created and inserted into the DOM:",
              "code": "componentDidMount() {\n  // Called after the component is rendered\n  console.log('Component has mounted');\n}"
            },
            "updatingMethods": {
              "explanation": "Methods called when a component is being re-rendered:",
              "code": "componentDidUpdate(prevProps, prevState) {\n  // Called after the component is updated\n  if (this.props.userId !== prevProps.userId) {\n    this.fetchData(this.props.userId);\n  }\n}"
            },
            "unmountingMethods": {
              "explanation": "Methods called when a component is being removed from the DOM:",
              "code": "componentWillUnmount() {\n  // Called before the component is removed\n  console.log('Component will unmount');\n}"
            }
          }
        },
        "React Props": {
          "introduction": "Props (short for properties) are a way of passing data from parent to child components.",
          "basicUsage": {
            "explanation": "Props are passed to components like HTML attributes:",
            "code": "function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\n// Usage\n<Welcome name=\"Sara\" />"
          },
          "propsInClassComponents": {
            "explanation": "In class components, props are accessed using this.props:",
            "code": "class Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}"
          },
          "defaultProps": {
            "explanation": "You can define default values for props:",
            "functionComponentCode": "function Button({ text = 'Click me' }) {\n  return <button>{text}</button>;\n}",
            "classComponentCode": "class Button extends React.Component {\n  render() {\n    return <button>{this.props.text}</button>;\n  }\n}\n\nButton.defaultProps = {\n  text: 'Click me'\n};"
          },
          "propTypes": {
            "explanation": "You can use PropTypes to type-check props:",
            "code": "import PropTypes from 'prop-types';\n\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nWelcome.propTypes = {\n  name: PropTypes.string.isRequired\n};"
          },
          "composition": {
            "explanation": "Props can be used to compose components together:",
            "code": "function Dialog(props) {\n  return (\n    <div className=\"dialog\">\n      <h1 className=\"dialog-title\">{props.title}</h1>\n      <div className=\"dialog-content\">\n        {props.children}\n      </div>\n    </div>\n  );\n}\n\nfunction WelcomeDialog() {\n  return (\n    <Dialog title=\"Welcome\">\n      <p>Thank you for visiting our spacecraft!</p>\n    </Dialog>\n  );\n}"
          }
        },
        "React Events": {
          "introduction": "React has a synthetic event system that works similarly to handling events in the DOM but with some differences.",
          "basicEventHandling": {
            "explanation": "Event handlers are specified as methods or functions:",
            "code": "function Button() {\n  function handleClick() {\n    alert('Button was clicked!');\n  }\n  \n  return <button onClick={handleClick}>Click me</button>;\n}"
          },
          "passingArguments": {
            "explanation": "You can pass arguments to event handlers:",
            "code": "function TodoList() {\n  function deleteItem(id) {\n    // Delete the item with the given id\n  }\n  \n  return (\n    <ul>\n      {items.map(item => (\n        <li key={item.id}>\n          {item.text}\n          <button onClick={() => deleteItem(item.id)}>Delete</button>\n        </li>\n      ))}\n    </ul>\n  );\n}"
          },
          "eventHandlingInClass": {
            "explanation": "In class components, you need to bind this to event handlers:",
            "code": "class Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isToggleOn: true };\n    \n    // Binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n  \n  handleClick() {\n    this.setState(prevState => ({\n      isToggleOn: !prevState.isToggleOn\n    }));\n  }\n  \n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        {this.state.isToggleOn ? 'ON' : 'OFF'}\n      </button>\n    );\n  }\n}"
          },
          "syntheticEvents": {
            "explanation": "React wraps native browser events in SyntheticEvent objects:",
            "code": "function Form() {\n  function handleSubmit(event) {\n    event.preventDefault(); // Prevents default form submission\n    console.log('Form submitted');\n  }\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}"
          }
        },
        "React Conditional": {
          "introduction": "Conditional rendering in React works the same way conditions work in JavaScript.",
          "ifStatements": {
            "explanation": "You can use if statements to conditionally render elements:",
            "code": "function Greeting(props) {\n  if (props.isLoggedIn) {\n    return <UserGreeting />;\n  }\n  return <GuestGreeting />;\n}"
          },
          "inlineIfWithLogicalAnd": {
            "explanation": "You can embed expressions in JSX by wrapping them in curly braces. This includes the JavaScript logical && operator:",
            "code": "function Mailbox(props) {\n  const unreadMessages = props.unreadMessages;\n  return (\n    <div>\n      <h1>Hello!</h1>\n      {unreadMessages.length > 0 &&\n        <h2>\n          You have {unreadMessages.length} unread messages.\n        </h2>\n      }\n    </div>\n  );\n}"
          },
          "inlineIfElseWithConditionalOperator": {
            "explanation": "Another method for conditionally rendering elements inline is to use the JavaScript conditional operator condition ? true : false:",
            "code": "function Greeting(props) {\n  return (\n    <div>\n      {props.isLoggedIn\n        ? <UserGreeting />\n        : <GuestGreeting />\n      }\n    </div>\n  );\n}"
          },
          "preventingComponentFromRendering": {
            "explanation": "You can prevent a component from rendering by returning null instead of its render output:",
            "code": "function WarningBanner(props) {\n  if (!props.warn) {\n    return null;\n  }\n  \n  return (\n    <div className=\"warning\">\n      Warning!\n    </div>\n  );\n}"
          }
        },
        "React Lists": {
          "introduction": "React provides a way to render lists of items using JavaScript's map() function.",
          "renderingMultipleComponents": {
            "explanation": "You can build collections of elements and include them in JSX using curly braces {}:",
            "code": "function NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <li key={number.toString()}>{number}</li>\n  );\n  return <ul>{listItems}</ul>;\n}"
          },
          "keys": {
            "explanation": "Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity:",
            "code": "function TodoList(props) {\n  return (\n    <ul>\n      {props.todos.map((todo) =>\n        <li key={todo.id}>\n          {todo.text}\n        </li>\n      )}\n    </ul>\n  );\n}"
          },
          "extractingComponentsWithKeys": {
            "explanation": "Keys only make sense in the context of the surrounding array. If you extract a ListItem component, you should keep the key on the <ListItem /> elements in the array rather than on the <li> element in the ListItem itself:",
            "code": "function ListItem(props) {\n  // Correct! There is no need to specify the key here:\n  return <li>{props.value}</li>;\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // Correct! Key should be specified inside the array.\n    <ListItem key={number.toString()} value={number} />\n  );\n  return <ul>{listItems}</ul>;\n}"
          },
          "uniqueKeys": {
            "explanation": "Keys used within arrays should be unique among their siblings. However, they don't need to be globally unique:",
            "code": "function Blog(props) {\n  const sidebar = (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n  \n  const content = props.posts.map((post) =>\n    <div key={post.id}>\n      <h3>{post.title}</h3>\n      <p>{post.content}</p>\n    </div>\n  );\n  \n  return (\n    <div>\n      {sidebar}\n      <hr />\n      {content}\n    </div>\n  );\n}"
          }
        },
        "React Forms": {
          "introduction": "HTML form elements work a bit differently from other DOM elements in React because form elements naturally keep some internal state.",
          "controlledComponents": {
            "explanation": "In React, form elements such as <input>, <textarea>, and <select> typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components, and only updated with setState(). We can combine the two by making the React state be the 'single source of truth':",
            "code": "class NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n    \n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  \n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n  \n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.value);\n    event.preventDefault();\n  }\n  \n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}"
          },
          "handleMultipleInputs": {
            "explanation": "When you need to handle multiple controlled input elements, you can add a name attribute to each element and let the handler function choose what to do based on the value of event.target.name:",
            "code": "class Reservation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isGoing: true,\n      numberOfGuests: 2\n    };\n    \n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n  \n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    \n    this.setState({\n      [name]: value\n    });\n  }\n  \n  render() {\n    return (\n      <form>\n        <label>\n          Is going:\n          <input\n            name=\"isGoing\"\n            type=\"checkbox\"\n            checked={this.state.isGoing}\n            onChange={this.handleInputChange} />\n        </label>\n        <br />\n        <label>\n          Number of guests:\n          <input\n            name=\"numberOfGuests\"\n            type=\"number\"\n            value={this.state.numberOfGuests}\n            onChange={this.handleInputChange} />\n        </label>\n      </form>\n    );\n  }\n}"
          },
          "uncontrolledComponents": {
            "explanation": "In most cases, we recommend using controlled components to implement forms. In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself:",
            "code": "class NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.input = React.createRef();\n  }\n  \n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.input.current.value);\n    event.preventDefault();\n  }\n  \n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" ref={this.input} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}"
          }
        },
        "React Router": {
          "introduction": "React Router is a standard library for routing in React applications. It enables navigation among views of various components in a React Application.",
          "installation": {
            "explanation": "First, install React Router:",
            "code": "npm install react-router-dom"
          },
          "basicSetup": {
            "explanation": "Set up basic routing in your application:",
            "code": "import React from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport About from './components/About';\nimport Contact from './components/Contact';\nimport NoPage from './components/NoPage';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"about\" element={<About />} />\n        <Route path=\"contact\" element={<Contact />} />\n        <Route path=\"*\" element={<NoPage />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}"
          },
          "nestedRoutes": {
            "explanation": "You can create nested routes for more complex layouts:",
            "code": "import { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport Layout from './components/Layout';\nimport Home from './components/Home';\nimport About from './components/About';\nimport Contact from './components/Contact';\nimport NoPage from './components/NoPage';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Layout />}>\n          <Route index element={<Home />} />\n          <Route path=\"about\" element={<About />} />\n          <Route path=\"contact\" element={<Contact />} />\n          <Route path=\"*\" element={<NoPage />} />\n        </Route>\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\n// Layout.js\nimport { Outlet, Link } from 'react-router-dom';\n\nfunction Layout() {\n  return (\n    <>\n      <nav>\n        <ul>\n          <li><Link to=\"/\">Home</Link></li>\n          <li><Link to=\"/about\">About</Link></li>\n          <li><Link to=\"/contact\">Contact</Link></li>\n        </ul>\n      </nav>\n      <Outlet />\n    </>\n  );\n}"
          },
          "navigationLinks": {
            "explanation": "Use Link components to navigate between pages:",
            "code": "import { Link } from 'react-router-dom';\n\nfunction Navigation() {\n  return (\n    <nav>\n      <ul>\n        <li><Link to=\"/\">Home</Link></li>\n        <li><Link to=\"/about\">About</Link></li>\n        <li><Link to=\"/contact\">Contact</Link></li>\n      </ul>\n    </nav>\n  );\n}"
          },
          "programmingNavigation": {
            "explanation": "You can also navigate programmatically using the useNavigate hook:",
            "code": "import { useNavigate } from 'react-router-dom';\n\nfunction LoginButton() {\n  const navigate = useNavigate();\n  \n  function handleLogin() {\n    // Perform login logic\n    navigate('/dashboard');\n  }\n  \n  return <button onClick={handleLogin}>Login</button>;\n}"
          },
          "routeParameters": {
            "explanation": "You can use route parameters to create dynamic routes:",
            "code": "// In your routes setup\n<Route path=\"users/:userId\" element={<UserProfile />} />\n\n// In UserProfile component\nimport { useParams } from 'react-router-dom';\n\nfunction UserProfile() {\n  const { userId } = useParams();\n  return <h1>User Profile: {userId}</h1>;\n}"
          }
        },
        "React Memo": {
          "introduction": "React.memo is a higher-order component that memoizes your component to prevent unnecessary re-renders when the props haven't changed.",
          "basicUsage": {
            "explanation": "Use React.memo to optimize performance by preventing re-renders when props haven't changed:",
            "code": "import React from 'react';\n\nfunction MyComponent(props) {\n  console.log('Rendering MyComponent');\n  return <div>{props.name}</div>;\n}\n\nexport default React.memo(MyComponent);"
          },
          "customComparison": {
            "explanation": "You can provide a custom comparison function as the second argument to React.memo:",
            "code": "import React from 'react';\n\nfunction MyComponent(props) {\n  return <div>{props.name}</div>;\n}\n\nfunction areEqual(prevProps, nextProps) {\n  // Return true if passing nextProps to render would return\n  // the same result as passing prevProps to render,\n  // otherwise return false\n  return prevProps.name === nextProps.name;\n}\n\nexport default React.memo(MyComponent, areEqual);"
          },
          "whenToUse": {
            "explanation": "Use React.memo when:",
            "scenarios": [
              "The component renders often",
              "The component re-renders with the same props",
              "The component contains expensive render operations",
              "The component is pure (output depends only on props)"
            ]
          },
          "limitations": {
            "explanation": "React.memo only does a shallow comparison of props. If your props are complex objects, you might need to use useMemo or a custom comparison function.",
            "example": "// This might not work as expected with complex objects\nconst MemoizedComponent = React.memo(ExpensiveComponent);\n\n// Instead, you can use:\nfunction Parent() {\n  const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n  return <ExpensiveComponent value={memoizedValue} />;\n}"
          }
        },
        "React CSS Styling": {
          "introduction": "There are several ways to style React components, including inline styles, CSS classes, and CSS-in-JS libraries.",
          "inlineStyles": {
            "explanation": "React allows you to specify styles directly in your JSX using the style attribute:",
            "code": "function MyComponent() {\n  const divStyle = {\n    color: 'blue',\n    backgroundColor: 'lightgray',\n    padding: '10px',\n    borderRadius: '5px'\n  };\n  \n  return <div style={divStyle}>Hello, styled with inline styles!</div>;\n}"
          },
          "cssClasses": {
            "explanation": "You can use traditional CSS classes by importing CSS files:",
            "code": "// MyComponent.css\n.my-class {\n  color: blue;\n  background-color: lightgray;\n  padding: 10px;\n  border-radius: 5px;\n}\n\n// MyComponent.js\nimport './MyComponent.css';\n\nfunction MyComponent() {\n  return <div className=\"my-class\">Hello, styled with CSS classes!</div>;\n}"
          },
          "cssModules": {
            "explanation": "CSS Modules scope CSS by automatically creating unique class names:",
            "code": "// MyComponent.module.css\n.myClass {\n  color: blue;\n  background-color: lightgray;\n  padding: 10px;\n  border-radius: 5px;\n}\n\n// MyComponent.js\nimport styles from './MyComponent.module.css';\n\nfunction MyComponent() {\n  return <div className={styles.myClass}>Hello, styled with CSS Modules!</div>;\n}"
          },
          "styledComponents": {
            "explanation": "Styled Components is a popular CSS-in-JS library for styling React components:",
            "code": "import styled from 'styled-components';\n\nconst StyledDiv = styled.div`\n  color: blue;\n  background-color: lightgray;\n  padding: 10px;\n  border-radius: 5px;\n`;\n\nfunction MyComponent() {\n  return <StyledDiv>Hello, styled with Styled Components!</StyledDiv>;\n}"
          },
          "emotionCss": {
            "explanation": "Emotion is another popular CSS-in-JS library:",
            "code": "/** @jsx jsx */\nimport { css, jsx } from '@emotion/react';\n\nfunction MyComponent() {\n  return (\n    <div\n      css={css`\n        color: blue;\n        background-color: lightgray;\n        padding: 10px;\n        border-radius: 5px;\n      `}\n    >\n      Hello, styled with Emotion!\n    </div>\n  );\n}"
          },
          "tailwindCss": {
            "explanation": "Tailwind CSS is a utility-first CSS framework that can be used with React:",
            "code": "// After installing and configuring Tailwind CSS\nfunction MyComponent() {\n  return (\n    <div className=\"text-blue-500 bg-gray-200 p-4 rounded\">\n      Hello, styled with Tailwind CSS!\n    </div>\n  );\n}"
          }
        }
      },
      "Hooks": {
        "What is a Hook?": {
          "introduction": "Hooks are functions that let you 'hook into' React state and lifecycle features from function components. Hooks don't work inside classes — they let you use React without classes.",
          "whyHooks": {
            "explanation": "Hooks were introduced in React 16.8 to solve several problems in React:",
            "problems": [
              "Difficulty in reusing stateful logic between components",
              "Complex components become hard to understand",
              "Classes confuse both people and machines"
            ]
          },
          "rulesOfHooks": {
            "explanation": "Hooks come with two important rules:",
            "rules": [
              "Only call Hooks at the top level. Don't call Hooks inside loops, conditions, or nested functions.",
              "Only call Hooks from React function components or custom Hooks. Don't call Hooks from regular JavaScript functions."
            ],
            "code": "// Good: Hook at the top level\nfunction Example() {\n  const [count, setCount] = useState(0);\n  // ...\n}\n\n// Bad: Conditional Hook\nfunction Example(props) {\n  if (props.condition) {\n    const [count, setCount] = useState(0); // This is against the rules\n  }\n  // ...\n}"
          },
          "builtInHooks": {
            "explanation": "React comes with several built-in Hooks:",
            "basicHooks": [
              "useState - State variables in functional components",
              "useEffect - Side effects in functional components",
              "useContext - Subscribe to React context"
            ],
            "additionalHooks": [
              "useReducer - Alternative to useState for complex state logic",
              "useCallback - Return memoized callback",
              "useMemo - Return memoized value",
              "useRef - Persist values across renders",
              "useLayoutEffect - Run effects synchronously after DOM mutations",
              "useDebugValue - Display a label in React DevTools"
            ]
          },
          "customHooks": {
            "explanation": "You can also create your own Hooks to reuse stateful logic between components:",
            "code": "// Custom Hook to manage form fields\nfunction useFormField(initialValue) {\n  const [value, setValue] = useState(initialValue);\n  \n  function handleChange(e) {\n    setValue(e.target.value);\n  }\n  \n  return {\n    value,\n    onChange: handleChange\n  };\n}\n\n// Using the custom Hook\nfunction SignupForm() {\n  const name = useFormField('');\n  const email = useFormField('');\n  \n  return (\n    <form>\n      <input type=\"text\" placeholder=\"Name\" {...name} />\n      <input type=\"email\" placeholder=\"Email\" {...email} />\n    </form>\n  );\n}"
          }
        },
        "React useState Hook": {
          "introduction": "The useState Hook lets you add state to functional components. It returns a stateful value and a function to update it.",
          "basicUsage": {
            "explanation": "Here's how to use the useState Hook:",
            "code": "import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  \n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}"
          },
          "multipleStateVariables": {
            "explanation": "You can use the useState Hook multiple times in a single component:",
            "code": "function UserForm() {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState(0);\n  const [email, setEmail] = useState('');\n  \n  return (\n    <form>\n      <input\n        type=\"text\"\n        value={name}\n        onChange={e => setName(e.target.value)}\n        placeholder=\"Name\"\n      />\n      <input\n        type=\"number\"\n        value={age}\n        onChange={e => setAge(e.target.value)}\n        placeholder=\"Age\"\n      />\n      <input\n        type=\"email\"\n        value={email}\n        onChange={e => setEmail(e.target.value)}\n        placeholder=\"Email\"\n      />\n    </form>\n  );\n}"
          },
          "updatingStateBasedOnPreviousState": {
            "explanation": "When updating state based on the previous state, you should use the functional form of the state updater:",
            "code": "function Counter() {\n  const [count, setCount] = useState(0);\n  \n  function increment() {\n    // Correct: Using functional form to update based on previous state\n    setCount(prevCount => prevCount + 1);\n  }\n  \n  function incrementThreeTimes() {\n    // This will work correctly because we're using the functional form\n    setCount(prevCount => prevCount + 1);\n    setCount(prevCount => prevCount + 1);\n    setCount(prevCount => prevCount + 1);\n  }\n  \n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={increment}>Increment</button>\n      <button onClick={incrementThreeTimes}>+3</button>\n    </div>\n  );\n}"
          },
          "objectsAndArraysInState": {
            "explanation": "When using objects or arrays in state, you need to create a new object or array when updating:",
            "code": "function TodoList() {\n  const [todos, setTodos] = useState([]);\n  const [text, setText] = useState('');\n  \n  function addTodo() {\n    // Creating a new array with the new todo\n    setTodos([...todos, { id: Date.now(), text, completed: false }]);\n    setText('');\n  }\n  \n  function toggleTodo(id) {\n    // Creating a new array with the updated todo\n    setTodos(\n      todos.map(todo =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      )\n    );\n  }\n  \n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <button onClick={addTodo}>Add Todo</button>\n      <ul>\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            onClick={() => toggleTodo(todo.id)}\n            style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}\n          >\n            {todo.text}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}"
          },
          "lazyInitialState": {
            "explanation": "If the initial state is the result of an expensive computation, you can provide a function instead:",
            "code": "// This runs only on the initial render\nconst [state, setState] = useState(() => {\n  const initialState = someExpensiveComputation(props);\n  return initialState;\n});"
          }
        },
        "React useEffect Hook": {
          "introduction": "The useEffect Hook lets you perform side effects in functional components. It serves the same purpose as componentDidMount, componentDidUpdate, and componentWillUnmount in class components, but unified into a single API.",
          "basicUsage": {
            "explanation": "The useEffect Hook runs after every render by default:",
            "code": "import React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n  \n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n  \n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}"
          },
          "conditionallyFiringEffects": {
            "explanation": "You can tell React to skip applying an effect if certain values haven't changed between re-renders by passing an array as an optional second argument to useEffect:",
            "code": "import React, { useState, useEffect } from 'react';\n\nfunction Example({ id }) {\n  const [data, setData] = useState(null);\n  \n  useEffect(() => {\n    // This effect will only run when id changes\n    fetchData(id).then(result => setData(result));\n  }, [id]); // Only re-run the effect if id changes\n  \n  return <div>{data ? data.name : 'Loading...'}</div>;\n}"
          },
          "cleanupInEffects": {
            "explanation": "Some effects might need cleanup. For example, subscription to external data sources. In this case, the function passed to useEffect can return a cleanup function:",
            "code": "import React, { useState, useEffect } from 'react';\n\nfunction ChatRoom({ roomId }) {\n  const [messages, setMessages] = useState([]);\n  \n  useEffect(() => {\n    const connection = createConnection(roomId);\n    connection.connect();\n    \n    connection.on('message', (message) => {\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n    \n    // Cleanup function to run when the component unmounts or before re-running the effect\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]); // Re-run the effect when roomId changes\n  \n  return (\n    <div>\n      <h1>Room: {roomId}</h1>\n      <ul>\n        {messages.map(message => (\n          <li key={message.id}>{message.text}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}"
          },
          "effectTiming": {
            "explanation": "The useEffect Hook runs after the render is committed to the screen. If you need to run an effect synchronously before the browser paints, use useLayoutEffect instead.",
            "code": "// Runs after render and after the browser has painted\nuseEffect(() => {\n  // Side effect code here\n});\n\n// Runs synchronously before the browser paints\nuseLayoutEffect(() => {\n  // Side effect code here that requires DOM measurements\n});"
          },
          "multipleEffects": {
            "explanation": "You can use multiple effects in a single component to separate concerns:",
            "code": "function UserProfile({ userId }) {\n  const [user, setUser] = useState(null);\n  const [posts, setPosts] = useState([]);\n  \n  // Effect for fetching user data\n  useEffect(() => {\n    fetchUser(userId).then(userData => setUser(userData));\n  }, [userId]);\n  \n  // Separate effect for fetching posts\n  useEffect(() => {\n    if (user) {\n      fetchPosts(user.id).then(postData => setPosts(postData));\n    }\n  }, [user]);\n  \n  if (!user) return <div>Loading user...</div>;\n  \n  return (\n    <div>\n      <h1>{user.name}</h1>\n      <h2>Posts</h2>\n      {posts.length === 0 ? (\n        <p>Loading posts...</p>\n      ) : (\n        <ul>\n          {posts.map(post => (\n            <li key={post.id}>{post.title}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}"
          }
        },
        "React useContext": {
          "introduction": "The useContext Hook lets you subscribe to React context without introducing nesting. It provides a way to pass data through the component tree without having to pass props down manually at every level.",
          "basicUsage": {
            "explanation": "First, create a context object, then use the useContext Hook to access the context value:",
            "code": "import React, { createContext, useContext, useState } from 'react';\n\n// Create a context\nconst ThemeContext = createContext('light');\n\nfunction App() {\n  const [theme, setTheme] = useState('light');\n  \n  return (\n    <ThemeContext.Provider value={theme}>\n      <div>\n        <Header />\n        <Main />\n        <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\n          Toggle Theme\n        </button>\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nfunction Header() {\n  // Use the context value\n  const theme = useContext(ThemeContext);\n  return (\n    <header className={`header-${theme}`}>\n      <h1>My App</h1>\n    </header>\n  );\n}\n\nfunction Main() {\n  // Use the context value\n  const theme = useContext(ThemeContext);\n  return (\n    <main className={`main-${theme}`}>\n      <p>This is the main content</p>\n    </main>\n  );\n}"
          },
          "multipleContexts": {
            "explanation": "You can use multiple contexts in a component:",
            "code": "import React, { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext('light');\nconst UserContext = createContext({ name: 'Guest' });\n\nfunction App() {\n  const [theme, setTheme] = useState('light');\n  const [user, setUser] = useState({ name: 'John' });\n  \n  return (\n    <ThemeContext.Provider value={theme}>\n      <UserContext.Provider value={user}>\n        <Layout />\n        <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\n          Toggle Theme\n        </button>\n      </UserContext.Provider>\n    </ThemeContext.Provider>\n  );\n}\n\nfunction Layout() {\n  return (\n    <div>\n      <Header />\n      <Content />\n    </div>\n  );\n}\n\nfunction Content() {\n  // Using multiple contexts\n  const theme = useContext(ThemeContext);\n  const user = useContext(UserContext);\n  \n  return (\n    <section className={`content-${theme}`}>\n      <h2>Welcome, {user.name}!</h2>\n      <p>This content is in {theme} mode.</p>\n    </section>\n  );\n}"
          },
          "contextWithReducer": {
            "explanation": "You can combine context with useReducer for more complex state management:",
            "code": "import React, { createContext, useContext, useReducer } from 'react';\n\n// Create context\nconst TodoContext = createContext();\n\n// Reducer function\nfunction todoReducer(state, action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [...state, { id: Date.now(), text: action.text, completed: false }];\n    case 'TOGGLE_TODO':\n      return state.map(todo =>\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\n      );\n    default:\n      return state;\n  }\n}\n\n// Context provider component\nfunction TodoProvider({ children }) {\n  const [todos, dispatch] = useReducer(todoReducer, []);\n  \n  return (\n    <TodoContext.Provider value={{ todos, dispatch }}>\n      {children}\n    </TodoContext.Provider>\n  );\n}\n\n// Custom hook to use the todo context\nfunction useTodo() {\n  const context = useContext(TodoContext);\n  if (!context) {\n    throw new Error('useTodo must be used within a TodoProvider');\n  }\n  return context;\n}\n\n// Components that use the context\nfunction TodoList() {\n  const { todos, dispatch } = useTodo();\n  \n  return (\n    <ul>\n      {todos.map(todo => (\n        <li\n          key={todo.id}\n          onClick={() => dispatch({ type: 'TOGGLE_TODO', id: todo.id })}\n          style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}\n        >\n          {todo.text}\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction AddTodo() {\n  const { dispatch } = useTodo();\n  const [text, setText] = useState('');\n  \n  function handleSubmit(e) {\n    e.preventDefault();\n    if (text.trim()) {\n      dispatch({ type: 'ADD_TODO', text });\n      setText('');\n    }\n  }\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      <input value={text} onChange={e => setText(e.target.value)} />\n      <button type=\"submit\">Add Todo</button>\n    </form>\n  );\n}\n\n// App component\nfunction App() {\n  return (\n    <TodoProvider>\n      <h1>Todo App</h1>\n      <AddTodo />\n      <TodoList />\n    </TodoProvider>\n  );\n}"
          }
        },
        "React useRef": {
          "introduction": "The useRef Hook returns a mutable ref object whose .current property is initialized to the passed argument. The returned object will persist for the full lifetime of the component.",
          "accessingDOMElements": {
            "explanation": "One of the most common uses of useRef is to access DOM elements directly:",
            "code": "import React, { useRef, useEffect } from 'react';\n\nfunction AutoFocusInput() {\n  const inputRef = useRef(null);\n  \n  useEffect(() => {\n    // Focus the input element when the component mounts\n    inputRef.current.focus();\n  }, []);\n  \n  return <input ref={inputRef} type=\"text\" />;\n}"
          },
          "persistingValuesAcrossRenders": {
            "explanation": "useRef can be used to keep any mutable value around similar to how you'd use instance fields in classes:",
            "code": "import React, { useState, useRef, useEffect } from 'react';\n\nfunction Stopwatch() {\n  const [time, setTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const intervalRef = useRef(null);\n  \n  useEffect(() => {\n    if (isRunning) {\n      intervalRef.current = setInterval(() => {\n        setTime(time => time + 1);\n      }, 1000);\n    }\n    \n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  }, [isRunning]);\n  \n  function handleStartStop() {\n    setIsRunning(!isRunning);\n  }\n  \n  function handleReset() {\n    setTime(0);\n    setIsRunning(false);\n  }\n  \n  return (\n    <div>\n      <h1>Time: {time}s</h1>\n      <button onClick={handleStartStop}>\n        {isRunning ? 'Stop' : 'Start'}\n      </button>\n      <button onClick={handleReset}>Reset</button>\n    </div>\n  );\n}"
          },
          "trackingPreviousValues": {
            "explanation": "useRef can be used with useEffect to track previous values:",
            "code": "import React, { useState, useRef, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const prevCountRef = useRef();\n  \n  useEffect(() => {\n    // Store current count value in ref after render\n    prevCountRef.current = count;\n  });\n  \n  const prevCount = prevCountRef.current;\n  \n  return (\n    <div>\n      <h1>Current: {count}, Previous: {prevCount !== undefined ? prevCount : 'N/A'}</h1>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}"
          },
          "useRefVsState": {
            "explanation": "Unlike setState, updating a ref's .current property doesn't trigger a re-render. Use useState for values that should trigger a re-render when they change, and useRef for values that shouldn't.",
            "code": "function TextInputWithFocusButton() {\n  const inputRef = useRef(null);\n  const [isDisabled, setIsDisabled] = useState(false);\n  \n  // This value changes won't trigger re-renders\n  const clickCount = useRef(0);\n  \n  const handleClick = () => {\n    clickCount.current += 1;\n    console.log(`Button clicked ${clickCount.current} times`);\n    inputRef.current.focus();\n  };\n  \n  // This state change will trigger a re-render\n  const toggleDisabled = () => {\n    setIsDisabled(!isDisabled);\n  };\n  \n  return (\n    <div>\n      <input ref={inputRef} type=\"text\" disabled={isDisabled} />\n      <button onClick={handleClick}>Focus the input</button>\n      <button onClick={toggleDisabled}>Toggle disabled</button>\n    </div>\n  );\n}"
          }
        },
        "React useReducer": {
          "introduction": "The useReducer Hook is an alternative to useState for complex state logic. It accepts a reducer function and an initial state, and returns the current state paired with a dispatch function.",
          "basicUsage": {
            "explanation": "A simple counter implementation with useReducer:",
            "code": "import React, { useReducer } from 'react';\n\n// Reducer function\nfunction counterReducer(state, action) {\n switch (action.type) {\n case 'INCREMENT':\n return { count: state.count + 1 };\n case 'DECREMENT':\n return { count: state.count - 1 };\n case 'RESET':\n return { count: 0 };\n default:\n return state;\n }\n}\n\nfunction Counter() {\n // Initial state\n const initialState = { count: 0 };\n \n // useReducer returns current state and dispatch function\n const [state, dispatch] = useReducer(counterReducer, initialState);\n \n return (\n <div>\n <h1>Count: {state.count}</h1>\n <button onClick={() => dispatch({ type: 'INCREMENT' })}>+</button>\n <button onClick={() => dispatch({ type: 'DECREMENT' })}>-</button>\n <button onClick={() => dispatch({ type: 'RESET' })}>Reset</button>\n </div>\n );\n}"
          },
          "complexStateManagement": {
            "explanation": "useReducer is especially useful for managing more complex state with multiple sub-values:",
            "code": "import React, { useReducer } from 'react';\n\nconst initialState = {\n user: null,\n posts: [],\n isLoading: false,\n error: null\n};\n\nfunction userReducer(state, action) {\n switch (action.type) {\n case 'FETCH_START':\n return { ...state, isLoading: true, error: null };\n case 'FETCH_SUCCESS':\n return { ...state, isLoading: false, user: action.payload };\n case 'FETCH_POSTS_SUCCESS':\n return { ...state, isLoading: false, posts: action.payload };\n case 'FETCH_ERROR':\n return { ...state, isLoading: false, error: action.payload };\n case 'LOGOUT':\n return { ...initialState };\n default:\n return state;\n }\n}\n\nfunction UserDashboard() {\n const [state, dispatch] = useReducer(userReducer, initialState);\n\n const fetchUser = async (id) => {\n dispatch({ type: 'FETCH_START' });\n try {\n const userData = await api.getUser(id);\n dispatch({ type: 'FETCH_SUCCESS', payload: userData });\n \n const userPosts = await api.getUserPosts(id);\n dispatch({ type: 'FETCH_POSTS_SUCCESS', payload: userPosts });\n } catch (error) {\n dispatch({ type: 'FETCH_ERROR', payload: error.message });\n }\n };\n\n return (\n <div>\n {state.isLoading && <p>Loading...</p>}\n {state.error && <p>Error: {state.error}</p>}\n {state.user && (\n <div>\n <h1>{state.user.name}'s Dashboard</h1>\n <button onClick={() => dispatch({ type: 'LOGOUT' })}>Logout</button>\n <h2>Posts</h2>\n <ul>\n {state.posts.map(post => (\n <li key={post.id}>{post.title}</li>\n ))}\n </ul>\n </div>\n )}\n </div>\n );\n}"
          },
          "comparisonWithUseState": {
            "explanation": "When to use useReducer vs useState:",
            "advantages": [
              "Better for complex state logic with multiple sub-values",
              "When the next state depends on the previous state",
              "When actions have clear, semantic meanings in your application",
              "When you need to pass state update logic down to deeply nested components"
            ],
            "disadvantages": [
              "More verbose than useState for simple state updates",
              "Requires understanding of reducer patterns",
              "May be overkill for simple UI state"
            ]
          }
        },
        "React useCallback": {
          "introduction": "The useCallback Hook returns a memoized callback function. This helps prevent unnecessary re-renders when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders.",
          "basicUsage": {
            "explanation": "A simple example of useCallback to prevent recreation of a function on every render:",
            "code": "import React, { useState, useCallback } from 'react';\n\nfunction ParentComponent() {\n const [count, setCount] = useState(0);\n const [text, setText] = useState('');\n\n // This function will be recreated only when count changes\n const handleClick = useCallback(() => {\n console.log(`Button clicked, count: ${count}`);\n setCount(count + 1);\n }, [count]);\n\n return (\n <div>\n <input \n value={text} \n onChange={(e) => setText(e.target.value)} \n placeholder=\"Type something...\"\n />\n <p>Text: {text}</p>\n <p>Count: {count}</p>\n <ChildButton onClick={handleClick} />\n </div>\n );\n}\n\n// A React.memo component that only re-renders when its props change\nconst ChildButton = React.memo(({ onClick }) => {\n console.log('ChildButton rendered');\n return <button onClick={onClick}>Increment Count</button>;\n});"
          },
          "dependencyArray": {
            "explanation": "The dependency array works like useEffect - the callback is regenerated when dependencies change:",
            "code": "// Will be recreated when either a or b changes\nconst memoizedCallback = useCallback(() => {\n doSomething(a, b);\n}, [a, b]);\n\n// Empty array means the function is created once and never changes\nconst onlyOnceCallback = useCallback(() => {\n doSomething();\n}, []);"
          },
          "practicalExample": {
            "explanation": "A practical example with event handlers in a list:",
            "code": "import React, { useState, useCallback } from 'react';\n\nfunction TodoList() {\n const [todos, setTodos] = useState([]);\n const [newTodo, setNewTodo] = useState('');\n\n // Memoized to prevent recreation on every render\n const addTodo = useCallback(() => {\n if (newTodo.trim()) {\n setTodos(prevTodos => [...prevTodos, { id: Date.now(), text: newTodo }]);\n setNewTodo('');\n }\n }, [newTodo]);\n\n const removeTodo = useCallback((id) => {\n setTodos(prevTodos => prevTodos.filter(todo => todo.id !== id));\n }, []);\n\n return (\n <div>\n <input\n value={newTodo}\n onChange={(e) => setNewTodo(e.target.value)}\n placeholder=\"Add a new todo\"\n />\n <button onClick={addTodo}>Add</button>\n\n <ul>\n {todos.map(todo => (\n <TodoItem \n key={todo.id} \n todo={todo} \n onRemove={removeTodo} \n />\n ))}\n </ul>\n </div>\n );\n}\n\nconst TodoItem = React.memo(({ todo, onRemove }) => {\n console.log(`Rendering todo: ${todo.text}`);\n return (\n <li>\n {todo.text}\n <button onClick={() => onRemove(todo.id)}>Remove</button>\n </li>\n );\n});"
          },
          "whenToUse": {
            "bestCases": [
              "When passing callbacks to optimized child components that use React.memo or shouldComponentUpdate",
              "When callbacks are used as dependencies in useEffect hooks",
              "For event handlers that require stable references",
              "When dealing with complex event handlers that depend on props or state"
            ]
          }
        },
        "React useMemo": {
          "introduction": "The useMemo Hook returns a memoized value. It only recomputes the memoized value when one of the dependencies has changed. This optimization helps avoid expensive calculations on every render.",
          "basicUsage": {
            "explanation": "A simple example that memoizes an expensive calculation:",
            "code": "import React, { useState, useMemo } from 'react';\n\nfunction ExpensiveCalculation() {\n const [number, setNumber] = useState(1);\n const [dark, setDark] = useState(false);\n\n // This expensive calculation will only run when the number changes\n const expensiveResult = useMemo(() => {\n console.log('Computing expensive result...');\n return computeExpensiveValue(number);\n }, [number]);\n\n const theme = useMemo(() => {\n return {\n backgroundColor: dark ? '#333' : '#FFF',\n color: dark ? '#FFF' : '#333'\n };\n }, [dark]);\n\n return (\n <div style={theme}>\n <input \n type=\"number\" \n value={number} \n onChange={e => setNumber(parseInt(e.target.value))} \n />\n <button onClick={() => setDark(prevDark => !prevDark)}>\n Toggle theme\n </button>\n <div>\n Result: {expensiveResult}\n </div>\n </div>\n );\n}\n\nfunction computeExpensiveValue(num) {\n console.log('Computing...');\n // Simulate expensive operation\n for (let i = 0; i < 1000000000; i++) {}\n return num * 2;\n}"
          },
          "objectMemoization": {
            "explanation": "Using useMemo to prevent object recreation on every render:",
            "code": "import React, { useState, useMemo } from 'react';\n\nfunction StyleComponent() {\n const [color, setColor] = useState('red');\n const [fontSize, setFontSize] = useState(16);\n const [margin, setMargin] = useState(10);\n\n // Without useMemo, this object would be recreated on every render\n // causing child components to re-render unnecessarily\n const style = useMemo(() => ({\n color,\n fontSize: `${fontSize}px`,\n margin: `${margin}px`\n }), [color, fontSize, margin]);\n\n return (\n <div>\n <ChildComponent style={style} />\n <div>\n <button onClick={() => setColor(c => c === 'red' ? 'blue' : 'red')}>\n Toggle Color\n </button>\n <button onClick={() => setFontSize(s => s + 2)}>\n Increase Font Size\n </button>\n <button onClick={() => setMargin(m => m + 5)}>\n Increase Margin\n </button>\n </div>\n </div>\n );\n}\n\nconst ChildComponent = React.memo(({ style }) => {\n console.log('ChildComponent rendered');\n return <div style={style}>I'm styled efficiently!</div>;\n});"
          },
          "filteringExample": {
            "explanation": "Using useMemo for expensive filtering operations:",
            "code": "import React, { useState, useMemo } from 'react';\n\nfunction FilteredList() {\n const [items] = useState([\n { id: 1, name: 'Apple', category: 'Fruit' },\n { id: 2, name: 'Banana', category: 'Fruit' },\n { id: 3, name: 'Carrot', category: 'Vegetable' },\n { id: 4, name: 'Broccoli', category: 'Vegetable' },\n { id: 5, name: 'Orange', category: 'Fruit' },\n // ... imagine hundreds more items\n ]);\n \n const [selectedCategory, setSelectedCategory] = useState('All');\n const [searchTerm, setSearchTerm] = useState('');\n\n // This filtering operation is memoized to avoid recalculation on every render\n const filteredItems = useMemo(() => {\n console.log('Filtering items...');\n return items.filter(item => {\n const matchesCategory = selectedCategory === 'All' || item.category === selectedCategory;\n const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase());\n return matchesCategory && matchesSearch;\n });\n }, [items, selectedCategory, searchTerm]);\n\n return (\n <div>\n <div>\n <select \n value={selectedCategory} \n onChange={(e) => setSelectedCategory(e.target.value)}\n >\n <option value=\"All\">All</option>\n <option value=\"Fruit\">Fruits</option>\n <option value=\"Vegetable\">Vegetables</option>\n </select>\n <input \n type=\"text\" \n value={searchTerm} \n onChange={(e) => setSearchTerm(e.target.value)} \n placeholder=\"Search...\"\n />\n </div>\n <p>Found {filteredItems.length} items</p>\n <ul>\n {filteredItems.map(item => (\n <li key={item.id}>{item.name} - {item.category}</li>\n ))}\n </ul>\n </div>\n );\n}"
          },
          "vsUseCallback": {
            "explanation": "Comparing useMemo and useCallback:",
            "comparison": "useCallback(fn, deps) is equivalent to useMemo(() => fn, deps). While useCallback returns a memoized function, useMemo returns a memoized value of any type.",
            "code": "// These are equivalent:\nconst memoizedFunc = useCallback(() => {\n doSomething(a, b);\n}, [a, b]);\n\nconst memoizedFunc = useMemo(() => {\n return () => {\n doSomething(a, b);\n };\n}, [a, b]);"
          },
          "whenToUse": {
            "bestCases": [
              "When you have computationally expensive calculations",
              "When creating reference values (objects, arrays, functions) that other hooks depend on",
              "When a component is re-rendering too often with unchanged data",
              "When passing objects to React.memo components that would otherwise cause unnecessary renders"
            ],
            "cautions": [
              "Don't overuse - for simple operations, the overhead of useMemo might be more than the computation itself",
              "Remember that useMemo doesn't guarantee the value won't be recalculated",
              "Always include all dependencies to avoid stale closures"
            ]
          }
        }
      }
    }
  },
  {
    "NodeJS": {
      "Node.js HOME": {
        "introduction": "Node.js is an open-source, server-side JavaScript runtime environment that executes JavaScript code outside a web browser. Built on Chrome's V8 JavaScript engine, Node.js enables developers to use JavaScript for server-side scripting to produce dynamic web content.",
        "keyFeatures": [
          "Asynchronous and Event-Driven architecture",
          "Non-blocking I/O operations",
          "Single-threaded but highly scalable",
          "Cross-platform compatibility",
          "Fast execution of JavaScript code",
          "Rich ecosystem with npm (Node Package Manager)"
        ],
        "useCases": [
          "Web applications and APIs",
          "Real-time applications (chat, gaming)",
          "Streaming applications",
          "Microservices architecture",
          "Command-line tools",
          "IoT (Internet of Things) applications"
        ],
        "example": {
          "description": "A simple 'Hello World' Node.js server:",
          "code": "// Import the HTTP module\nconst http = require('http');\n\n// Define hostname and port\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\n// Create HTTP server\nconst server = http.createServer((req, res) => {\n  // Set response headers\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  \n  // Send response\n  res.end('Hello, World!\\n');\n});\n\n// Start the server\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});"
        }
      },
      "Node.js Intro": {
        "whatIsNodeJs": {
          "description": "Node.js is a runtime environment for JavaScript that runs on the server-side. It allows developers to build scalable network applications using JavaScript on the server.",
          "historyAndOrigin": "Created by Ryan Dahl in 2009, Node.js was developed to overcome limitations of traditional web-serving techniques. It was built on Chrome's V8 JavaScript engine, focusing on performance and low memory usage.",
          "advantages": [
            "JavaScript everywhere (same language on front-end and back-end)",
            "Asynchronous programming model",
            "High performance due to non-blocking I/O",
            "Large and active community",
            "Extensive package ecosystem (npm)"
          ]
        },
        "howNodeJsWorks": {
          "eventLoop": {
            "description": "The event loop is the heart of Node.js, allowing it to perform non-blocking I/O operations despite JavaScript being single-threaded.",
            "explanation": "When Node.js starts, it initializes the event loop, processes the provided input script, then begins processing the event loop. The event loop handles the callback queue and executes callbacks when conditions are met.",
            "diagram": "Event Loop Diagram: Initialize → Execute callbacks → Process events → Wait for events → Execute callbacks → Repeat"
          },
          "callbackPattern": {
            "description": "Node.js uses callbacks to handle asynchronous operations. A callback is a function passed as an argument to another function, which is then executed when the operation completes.",
            "example": "// Reading a file asynchronously using callbacks\nconst fs = require('fs');\n\nfs.readFile('example.txt', 'utf8', (err, data) => {\n  if (err) {\n    console.error('Error reading file:', err);\n    return;\n  }\n  console.log('File content:', data);\n});\n\nconsole.log('This will run before file content is displayed');"
          }
        },
        "nodeJsVsDeno": {
          "comparison": "Deno is a more recent JavaScript/TypeScript runtime also created by Ryan Dahl. It addresses some of Node.js's design issues but has different trade-offs.",
          "differences": [
            "Deno has built-in TypeScript support",
            "Deno has a security-first approach with permissions model",
            "Deno uses ES modules instead of CommonJS",
            "Deno has no package.json or node_modules",
            "Node.js has a much larger ecosystem and community"
          ]
        }
      },
      "Node.js Get Started": {
        "installation": {
          "description": "Installing Node.js is the first step to start developing Node.js applications.",
          "platforms": {
            "windows": {
              "steps": [
                "Download the Windows installer from the official Node.js website",
                "Run the installer and follow the installation wizard",
                "Verify installation by running `node -v` and `npm -v` in Command Prompt"
              ]
            },
            "macOS": {
              "steps": [
                "Download the macOS installer from the official Node.js website",
                "Run the installer and follow the installation wizard",
                "Alternatively, use Homebrew: `brew install node`",
                "Verify installation by running `node -v` and `npm -v` in Terminal"
              ]
            },
            "linux": {
              "steps": [
                "Using package manager (Ubuntu/Debian): `sudo apt update && sudo apt install nodejs npm`",
                "Using package manager (CentOS/RHEL): `sudo yum install nodejs npm`",
                "Using NVM (recommended): `curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash`",
                "Verify installation by running `node -v` and `npm -v` in Terminal"
              ]
            }
          }
        },
        "firstApplication": {
          "description": "Creating your first Node.js application.",
          "steps": [
            "Create a new directory for your project: `mkdir my-first-node-app`",
            "Navigate to the project directory: `cd my-first-node-app`",
            "Initialize a new Node.js project: `npm init -y`",
            "Create a new file called app.js"
          ],
          "example": {
            "description": "Basic HTTP server in app.js:",
            "code": "// Import required module\nconst http = require('http');\n\n// Create server\nconst server = http.createServer((req, res) => {\n  // Set response headers\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  \n  // Send a response\n  res.end('<h1>Hello from my first Node.js application!</h1>');\n});\n\n// Set port and start server\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});"
          },
          "runningTheApp": {
            "description": "To run your application, use the following command:",
            "command": "node app.js",
            "result": "Server running on port 3000",
            "access": "Open your browser and navigate to http://localhost:3000"
          }
        },
        "nodeJsREPL": {
          "description": "Node.js REPL (Read-Eval-Print Loop) is an interactive shell that processes Node.js expressions.",
          "useCases": [
            "Testing JavaScript code snippets",
            "Debugging code",
            "Exploring Node.js APIs",
            "Rapid prototyping"
          ],
          "commands": {
            "starting": "Type `node` in your terminal to start the REPL",
            "exit": "Type `.exit` or press Ctrl+C twice to exit",
            "help": "Type `.help` to see available commands",
            "clear": "Type `.clear` to clear the current context",
            "save": "Type `.save filename` to save the current REPL session to a file",
            "load": "Type `.load filename` to load a file into the current REPL session"
          },
          "example": {
            "description": "Example REPL session:",
            "code": "> const name = 'Node.js'\n'Node.js'\n> console.log(`Hello, ${name}!`)\nHello, Node.js!\nundefined\n> .exit"
          }
        }
      },
      "Node.js Modules": {
        "introduction": {
          "description": "Modules in Node.js are reusable blocks of code whose functionality can be imported into other files. Node.js follows the CommonJS module system (though ES modules are also supported in newer versions).",
          "benefits": [
            "Code organization and reusability",
            "Encapsulation of functionality",
            "Dependency management",
            "Namespace protection (avoiding global scope pollution)"
          ]
        },
        "coreModules": {
          "description": "Node.js comes with several built-in modules that provide essential functionality without any additional installation.",
          "examples": [
            "fs - File System operations",
            "http - HTTP server and client",
            "path - Path manipulation utilities",
            "os - Operating system related utilities",
            "events - Event handling",
            "util - Utility functions",
            "crypto - Cryptographic functionality",
            "stream - Stream handling",
            "buffer - Binary data handling"
          ]
        },
        "creatingModules": {
          "description": "Create your own modules by exporting objects, functions, or values from one file and importing them in another.",
          "example": {
            "description": "Creating and using a custom module:",
            "moduleFile": "// math.js - Our custom module\nfunction add(a, b) {\n  return a + b;\n}\n\nfunction subtract(a, b) {\n  return a - b;\n}\n\nfunction multiply(a, b) {\n  return a * b;\n}\n\nfunction divide(a, b) {\n  if (b === 0) {\n    throw new Error('Division by zero');\n  }\n  return a / b;\n}\n\n// Export functions\nmodule.exports = {\n  add,\n  subtract,\n  multiply,\n  divide\n};",
            "appFile": "// app.js - Using our custom module\nconst math = require('./math');\n\nconsole.log('Addition:', math.add(5, 3));\nconsole.log('Subtraction:', math.subtract(5, 3));\nconsole.log('Multiplication:', math.multiply(5, 3));\nconsole.log('Division:', math.divide(6, 2));"
          }
        },
        "modulePatterns": {
          "description": "Different patterns for creating and using modules in Node.js.",
          "patterns": {
            "exportingObject": {
              "description": "Export an object with properties and methods.",
              "code": "// logger.js\nconst logger = {\n  info: function(message) {\n    console.log(`INFO: ${message}`);\n  },\n  warning: function(message) {\n    console.log(`WARNING: ${message}`);\n  },\n  error: function(message) {\n    console.log(`ERROR: ${message}`);\n  }\n};\n\nmodule.exports = logger;"
            },
            "exportingFunction": {
              "description": "Export a single function as the module.",
              "code": "// greet.js\nmodule.exports = function(name) {\n  return `Hello, ${name}!`;\n};"
            },
            "exportingClass": {
              "description": "Export a class as the module.",
              "code": "// user.js\nclass User {\n  constructor(name, email) {\n    this.name = name;\n    this.email = email;\n  }\n  \n  greet() {\n    return `Hello, my name is ${this.name}`;\n  }\n  \n  getInfo() {\n    return {\n      name: this.name,\n      email: this.email\n    };\n  }\n}\n\nmodule.exports = User;"
            },
            "namedExports": {
              "description": "Export multiple named items.",
              "code": "// utils.js\nexports.generateId = function() {\n  return Math.random().toString(36).substr(2, 9);\n};\n\nexports.formatDate = function(date) {\n  return new Date(date).toLocaleDateString();\n};\n\nexports.capitalize = function(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};"
            }
          }
        },
        "esModules": {
          "description": "ES Modules (ESM) is the official standard format for JavaScript modules. Node.js supports ES Modules alongside the CommonJS format.",
          "usingESM": "To use ES Modules in Node.js, either use the .mjs file extension or set \"type\": \"module\" in your package.json.",
          "example": {
            "description": "Using ES Modules in Node.js:",
            "packageJson": "{\n  \"name\": \"my-es-modules-app\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\"\n}",
            "mathModule": "// math.js\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function subtract(a, b) {\n  return a - b;\n}\n\nexport function multiply(a, b) {\n  return a * b;\n}\n\nexport function divide(a, b) {\n  if (b === 0) {\n    throw new Error('Division by zero');\n  }\n  return a / b;\n}\n\n// Default export\nexport default {\n  add,\n  subtract,\n  multiply,\n  divide\n};",
            "appFile": "// app.js\n// Named imports\nimport { add, multiply } from './math.js';\n\n// Default import\nimport math from './math.js';\n\nconsole.log('Using named import:', add(5, 3));\nconsole.log('Using default import:', math.subtract(10, 4));"
          },
          "esModulesVsCommonJs": {
            "differences": [
              "ES Modules are static, while CommonJS is dynamic",
              "ES Modules support top-level await",
              "ES Modules have named exports and default exports",
              "CommonJS uses require() and module.exports",
              "ES Modules use import and export statements"
            ]
          }
        }
      },
      "Node.js HTTP Module": {
        "introduction": {
          "description": "The HTTP module is a core module in Node.js that allows creating web servers and making HTTP requests. It provides functionality to transfer data over HTTP protocol.",
          "importingModule": "const http = require('http');"
        },
        "creatingServer": {
          "description": "Creating a basic HTTP server using the http.createServer() method.",
          "basicServer": {
            "description": "A simple HTTP server that responds with 'Hello World':",
            "code": "const http = require('http');\n\n// Create HTTP server\nconst server = http.createServer((req, res) => {\n  // Set status code and headers\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  \n  // Send response body\n  res.end('Hello World!');\n});\n\n// Listen on port 3000\nserver.listen(3000, '127.0.0.1', () => {\n  console.log('Server running at http://127.0.0.1:3000/');\n});"
          },
          "routingRequests": {
            "description": "Handling different URLs and HTTP methods for routing:",
            "code": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  const url = req.url;\n  const method = req.method;\n  \n  // Set default content type\n  res.setHeader('Content-Type', 'text/html');\n  \n  // Routing logic\n  if (url === '/') {\n    res.statusCode = 200;\n    res.end('<h1>Welcome to the Home Page</h1>');\n  } \n  else if (url === '/about' && method === 'GET') {\n    res.statusCode = 200;\n    res.end('<h1>About Us</h1><p>This is the about page.</p>');\n  } \n  else if (url === '/api/users' && method === 'GET') {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'application/json');\n    res.end(JSON.stringify({\n      users: [\n        { id: 1, name: 'John Doe' },\n        { id: 2, name: 'Jane Smith' }\n      ]\n    }));\n  } \n  else {\n    res.statusCode = 404;\n    res.end('<h1>404 - Page Not Found</h1>');\n  }\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on port 3000');\n});"
          }
        },
        "requestObject": {
          "description": "The request (req) object contains information about the incoming HTTP request.",
          "properties": [
            "req.url - URL of the request",
            "req.method - HTTP method (GET, POST, etc.)",
            "req.headers - HTTP headers as an object",
            "req.httpVersion - HTTP version"
          ],
          "handlingRequestData": {
            "description": "Handling data from POST, PUT requests:",
            "code": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  if (req.method === 'POST' && req.url === '/api/users') {\n    // Set up to receive data\n    let body = '';\n    \n    // Handle data chunks\n    req.on('data', (chunk) => {\n      body += chunk.toString();\n      \n      // Safety check against too large requests\n      if (body.length > 1e6) {\n        // Request entity too large\n        req.connection.destroy();\n      }\n    });\n    \n    // Handle end of request\n    req.on('end', () => {\n      try {\n        // Parse JSON body\n        const userData = JSON.parse(body);\n        \n        // Process the data\n        console.log('Received user data:', userData);\n        \n        // Send response\n        res.statusCode = 201; // Created\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({ \n          message: 'User created successfully',\n          user: userData\n        }));\n      } catch (error) {\n        // Handle invalid JSON\n        res.statusCode = 400; // Bad Request\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({ error: 'Invalid JSON' }));\n      }\n    });\n  } else {\n    // Handle other routes\n    res.statusCode = 404;\n    res.end('Not Found');\n  }\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on port 3000');\n});"
          }
        },
        "responseObject": {
          "description": "The response (res) object is used to send data back to the client.",
          "methods": [
            "res.writeHead(statusCode, headers) - Sets status code and multiple headers at once",
            "res.setHeader(name, value) - Sets a single header",
            "res.write(data) - Writes response data (can be called multiple times)",
            "res.end([data]) - Ends the response, optionally sending data"
          ],
          "example": {
            "description": "Different ways to send responses:",
            "code": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  // Example 1: Text response with custom headers\n  if (req.url === '/text') {\n    res.writeHead(200, {\n      'Content-Type': 'text/plain',\n      'Custom-Header': 'Hello-World'\n    });\n    res.end('This is a plain text response');\n  }\n  \n  // Example 2: HTML response\n  else if (req.url === '/html') {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/html');\n    \n    // Multiple writes before end\n    res.write('<html>');\n    res.write('<head><title>Node.js HTTP</title></head>');\n    res.write('<body>');\n    res.write('<h1>HTML Response</h1>');\n    res.write('<p>This is an HTML response from Node.js</p>');\n    res.write('</body>');\n    res.write('</html>');\n    res.end();\n  }\n  \n  // Example 3: JSON response\n  else if (req.url === '/json') {\n    const data = {\n      message: 'This is a JSON response',\n      timestamp: Date.now(),\n      items: [1, 2, 3, 4, 5]\n    };\n    \n    res.writeHead(200, { 'Content-Type': 'application/json' });\n    res.end(JSON.stringify(data));\n  }\n  \n  // Example 4: Redirect\n  else if (req.url === '/redirect') {\n    res.writeHead(302, { 'Location': '/html' });\n    res.end();\n  }\n  \n  // Example 5: 404 Not Found\n  else {\n    res.statusCode = 404;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('404 Not Found');\n  }\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on port 3000');\n});"
          }
        },
        "httpClient": {
          "description": "The HTTP module can also be used as a client to make HTTP requests to other servers.",
          "getRequest": {
            "description": "Making a GET request:",
            "code": "const http = require('http');\n\n// Options for the request\nconst options = {\n  hostname: 'jsonplaceholder.typicode.com',\n  port: 80,\n  path: '/posts/1',\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json'\n  }\n};\n\n// Make the request\nconst req = http.request(options, (res) => {\n  console.log(`Status Code: ${res.statusCode}`);\n  console.log(`Headers: ${JSON.stringify(res.headers)}`);\n  \n  let data = '';\n  \n  // Receive data in chunks\n  res.on('data', (chunk) => {\n    data += chunk;\n  });\n  \n  // When the entire response is received\n  res.on('end', () => {\n    try {\n      const parsedData = JSON.parse(data);\n      console.log('Response data:', parsedData);\n    } catch (error) {\n      console.error('Error parsing JSON:', error);\n    }\n  });\n});\n\n// Handle errors\nreq.on('error', (error) => {\n  console.error('Error making request:', error);\n});\n\n// End the request\nreq.end();"
          },
          "postRequest": {
            "description": "Making a POST request with data:",
            "code": "const http = require('http');\n\n// Data to send\nconst postData = JSON.stringify({\n  title: 'Node.js HTTP Client',\n  body: 'This is a post request example',\n  userId: 1\n});\n\n// Request options\nconst options = {\n  hostname: 'jsonplaceholder.typicode.com',\n  port: 80,\n  path: '/posts',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Content-Length': Buffer.byteLength(postData)\n  }\n};\n\n// Make the request\nconst req = http.request(options, (res) => {\n  console.log(`Status Code: ${res.statusCode}`);\n  \n  let data = '';\n  \n  res.on('data', (chunk) => {\n    data += chunk;\n  });\n  \n  res.on('end', () => {\n    console.log('Response data:', JSON.parse(data));\n  });\n});\n\n// Handle errors\nreq.on('error', (error) => {\n  console.error('Error making request:', error);\n});\n\n// Write data to request body\nreq.write(postData);\n\n// End the request\nreq.end();"
          },
          "httpGet": {
            "description": "Simplified GET request using http.get():",
            "code": "const http = require('http');\n\nhttp.get('http://jsonplaceholder.typicode.com/users', (res) => {\n  let data = '';\n  \n  // Receive data in chunks\n  res.on('data', (chunk) => {\n    data += chunk;\n  });\n  \n  // When complete, parse and log the data\n  res.on('end', () => {\n    try {\n      const users = JSON.parse(data);\n      console.log('Users:', users);\n    } catch (error) {\n      console.error('Error parsing JSON:', error);\n    }\n  });\n}).on('error', (error) => {\n  console.error('Error making GET request:', error);\n});"
          }
        },
        "practicalExamples": {
          "restAPI": {
            "description": "Building a simple RESTful API for a todo list application:",
            "code": "const http = require('http');\n\n// Simple in-memory database\nlet todos = [\n  { id: 1, text: 'Learn Node.js', completed: false },\n  { id: 2, text: 'Build an API', completed: false }\n];\n\n// Helper function to parse JSON body\nfunction parseBody(req) {\n  return new Promise((resolve, reject) => {\n    let body = '';\n    \n    req.on('data', (chunk) => {\n      body += chunk.toString();\n    });\n    \n    req.on('end', () => {\n      try {\n        resolve(body ? JSON.parse(body) : {});\n      } catch (error) {\n        reject(error);\n      }\n    });\n  });\n}\n\n// Create server\nconst server = http.createServer(async (req, res) => {\n  // Set CORS headers\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n  \n  // Handle OPTIONS request (for CORS preflight)\n  if (req.method === 'OPTIONS') {\n    res.statusCode = 204; // No Content\n    return res.end();\n  }\n  \n  // Extract URL and method\n  const url = req.url;\n  const method = req.method;\n  \n  // Set content type for all responses\n  res.setHeader('Content-Type', 'application/json');\n  \n  // Routes handling\n  try {\n    // GET /todos - Get all todos\n    if (url === '/todos' && method === 'GET') {\n      res.statusCode = 200;\n      return res.end(JSON.stringify(todos));\n    }\n    \n    // GET /todos/:id - Get a specific todo\n    if (url.match(/^\\/todos\\/\\d+$/) && method === 'GET') {\n      const id = parseInt(url.split('/')[2]);\n      const todo = todos.find(t => t.id === id);\n      \n      if (!todo) {\n        res.statusCode = 404;\n        return res.end(JSON.stringify({ error: 'Todo not found' }));\n      }\n      \n      res.statusCode = 200;\n      return res.end(JSON.stringify(todo));\n    }\n    \n    // POST /todos - Create a new todo\n    if (url === '/todos' && method === 'POST') {\n      const body = await parseBody(req);\n      \n      if (!body.text) {\n        res.statusCode = 400;\n        return res.end(JSON.stringify({ error: 'Text is required' }));\n      }\n      \n      const newTodo = {\n        id: todos.length > 0 ? Math.max(...todos.map(t => t.id)) + 1 : 1,\n        text: body.text,\n        completed: body.completed || false\n      };\n      \n      todos.push(newTodo);\n      \n      res.statusCode = 201;\n      return res.end(JSON.stringify(newTodo));\n    }\n    \n    // PUT /todos/:id - Update a todo\n    if (url.match(/^\\/todos\\/\\d+$/) && method === 'PUT') {\n      const id = parseInt(url.split('/')[2]);\n      const todoIndex = todos.findIndex(t => t.id === id);\n      \n      if (todoIndex === -1) {\n        res.statusCode = 404;\n        return res.end(JSON.stringify({ error: 'Todo not found' }));\n      }\n      \n      const body = await parseBody(req);\n      \n      todos[todoIndex] = {\n        ...todos[todoIndex],\n        ...(body.text !== undefined && { text: body.text }),\n        ...(body.completed !== undefined && { completed: body.completed })\n      };\n      \n      res.statusCode = 200;\n      return res.end(JSON.stringify(todos[todoIndex]));\n    }\n    \n    // DELETE /todos/:id - Delete a todo\n    if (url.match(/^\\/todos\\/\\d+$/) && method === 'DELETE') {\n      const id = parseInt(url.split('/')[2]);\n      const todoIndex = todos.findIndex(t => t.id === id);\n      \n      if (todoIndex === -1) {\n        res.statusCode = 404;\n        return res.end(JSON.stringify({ error: 'Todo not found' }));\n      }\n      \n      const deletedTodo = todos[todoIndex];\n      todos = todos.filter(t => t.id !== id);\n      \n      res.statusCode = 200;\n      return res.end(JSON.stringify(deletedTodo));\n    }\n    \n    // If no route matches\n    res.statusCode = 404;\n    return res.end(JSON.stringify({ error: 'Not found' }));\n  } "
          }
        }
      },
      "Node.js File System": {
        "introduction": {
          "description": "The File System (fs) module in Node.js provides an API for interacting with the file system in a way modeled on standard POSIX functions. It allows you to read from, write to, update, and delete files on your system.",
          "importing": "const fs = require('fs');"
        },
        "synchronousVsAsynchronous": {
          "description": "The fs module provides both synchronous and asynchronous methods. Asynchronous methods are preferred in production to avoid blocking the event loop.",
          "comparison": {
            "synchronous": {
              "description": "Synchronous methods end with 'Sync' and block the Node.js event loop until the operation completes.",
              "example": "// Synchronous file read\nconst fs = require('fs');\n\ntry {\n  const data = fs.readFileSync('file.txt', 'utf8');\n  console.log('File content:', data);\n} catch (err) {\n  console.error('Error reading file:', err);\n}"
            },
            "asynchronous": {
              "description": "Asynchronous methods take a callback function that is called when the operation completes.",
              "example": "// Asynchronous file read\nconst fs = require('fs');\n\nfs.readFile('file.txt', 'utf8', (err, data) => {\n  if (err) {\n    console.error('Error reading file:', err);\n    return;\n  }\n  console.log('File content:', data);\n});\n\nconsole.log('This code runs before the file is read');"
            },
            "promises": {
              "description": "Node.js also provides promise-based versions of the fs methods through fs.promises.",
              "example": "// Promise-based file read\nconst fs = require('fs').promises;\n\nfs.readFile('file.txt', 'utf8')\n  .then(data => {\n    console.log('File content:', data);\n  })\n  .catch(err => {\n    console.error('Error reading file:', err);\n  });"
            },
            "asyncAwait": {
              "description": "Modern Node.js applications often use async/await with promise-based fs methods.",
              "example": "// Async/await with fs.promises\nconst fs = require('fs').promises;\n\nasync function readFileContent() {\n  try {\n    const data = await fs.readFile('file.txt', 'utf8');\n    console.log('File content:', data);\n  } catch (err) {\n    console.error('Error reading file:', err);\n  }\n}\n\nreadFileContent();"
            }
          }
        },
        "commonFileOperations": {
          "readingFiles": {
            "description": "Reading the contents of a file",
            "examples": {
              "readEntireFile": {
                "description": "Reading an entire file at once:",
                "code": "// Asynchronous\nfs.readFile('file.txt', 'utf8', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});\n\n// Synchronous\ntry {\n  const data = fs.readFileSync('file.txt', 'utf8');\n  console.log(data);\n} catch (err) {\n  console.error(err);\n}\n\n// Promise-based\nfs.promises.readFile('file.txt', 'utf8')\n  .then(data => console.log(data))\n  .catch(err => console.error(err));"
              },
              "readingStreams": {
                "description": "Reading a file as a stream (for large files):",
                "code": "const fs = require('fs');\n\n// Create a readable stream\nconst readStream = fs.createReadStream('largefile.txt', { encoding: 'utf8' });\n\n// Handle data chunks as they come in\nreadStream.on('data', (chunk) => {\n  console.log(`Received ${chunk.length} bytes of data.`);\n  // Process the chunk\n});\n\n// Handle end of stream\nreadStream.on('end', () => {\n  console.log('Finished reading file');\n});\n\n// Handle errors\nreadStream.on('error', (err) => {\n  console.error('Error reading file:', err);\n});"
              }
            }
          },
          "writingFiles": {
            "description": "Writing content to files",
            "examples": {
              "writeEntireFile": {
                "description": "Writing to a file (creates or overwrites):",
                "code": "// Asynchronous\nfs.writeFile('output.txt', 'Hello, World!', 'utf8', (err) => {\n  if (err) throw err;\n  console.log('File has been written');\n});\n\n// Synchronous\ntry {\n  fs.writeFileSync('output.txt', 'Hello, World!', 'utf8');\n  console.log('File has been written');\n} catch (err) {\n  console.error(err);\n}\n\n// Promise-based\nfs.promises.writeFile('output.txt', 'Hello, World!', 'utf8')\n  .then(() => console.log('File has been written'))\n  .catch(err => console.error(err));"
              },
              "appendToFile": {
                "description": "Appending to a file (creates if doesn't exist):",
                "code": "// Asynchronous\nfs.appendFile('log.txt', '\\nNew log entry: ' + new Date().toISOString(), (err) => {\n  if (err) throw err;\n  console.log('Data appended to file');\n});\n\n// Synchronous\ntry {\n  fs.appendFileSync('log.txt', '\\nNew log entry: ' + new Date().toISOString());\n  console.log('Data appended to file');\n} catch (err) {\n  console.error(err);\n}\n\n// Promise-based\nfs.promises.appendFile('log.txt', '\\nNew log entry: ' + new Date().toISOString())\n  .then(() => console.log('Data appended to file'))\n  .catch(err => console.error(err));"
              },
              "writingStreams": {
                "description": "Writing to a file using streams (for large data):",
                "code": "const fs = require('fs');\n\n// Create a writable stream\nconst writeStream = fs.createWriteStream('output.txt');\n\n// Write data to the stream\nwriteStream.write('Hello, ');\nwriteStream.write('World!\\n');\nwriteStream.write('This is a stream example.');\n\n// End the stream\nwriteStream.end();\n\n// Handle finish event\nwriteStream.on('finish', () => {\n  console.log('Finished writing to file');\n});\n\n// Handle errors\nwriteStream.on('error', (err) => {\n  console.error('Error writing to file:', err);\n});"
              }
            }
          },
          "fileInfo": {
            "description": "Getting information about files",
            "example": {
              "description": "Checking file stats:",
              "code": "const fs = require('fs');\n\n// Asynchronous\nfs.stat('file.txt', (err, stats) => {\n  if (err) {\n    console.error('Error:', err);\n    return;\n  }\n  \n  console.log('File size:', stats.size, 'bytes');\n  console.log('Is file:', stats.isFile());\n  console.log('Is directory:', stats.isDirectory());\n  console.log('Last modified:', stats.mtime);\n  console.log('Created:', stats.birthtime);\n});\n\n// Synchronous\ntry {\n  const stats = fs.statSync('file.txt');\n  console.log('File size:', stats.size, 'bytes');\n} catch (err) {\n  console.error('Error:', err);\n}\n\n// Promise-based\nfs.promises.stat('file.txt')\n  .then(stats => console.log('File size:', stats.size, 'bytes'))\n  .catch(err => console.error('Error:', err));"
            }
          },
          "directoryOperations": {
            "description": "Working with directories",
            "examples": {
              "createDirectory": {
                "description": "Creating a directory:",
                "code": "// Create a directory\nfs.mkdir('new-directory', (err) => {\n  if (err) {\n    console.error('Error creating directory:', err);\n    return;\n  }\n  console.log('Directory created');\n});\n\n// Create nested directories (recursive)\nfs.mkdir('parent/child/grandchild', { recursive: true }, (err) => {\n  if (err) {\n    console.error('Error creating nested directories:', err);\n    return;\n  }\n  console.log('Nested directories created');\n});"
              },
              "readDirectory": {
                "description": "Reading directory contents:",
                "code": "fs.readdir('my-directory', (err, files) => {\n  if (err) {\n    console.error('Error reading directory:', err);\n    return;\n  }\n  \n  console.log('Directory contents:');\n  files.forEach(file => {\n    console.log(file);\n  });\n});\n\n// With file types\nfs.readdir('my-directory', { withFileTypes: true }, (err, dirents) => {\n  if (err) {\n    console.error('Error reading directory:', err);\n    return;\n  }\n  \n  // Filter for files only\n  const files = dirents\n    .filter(dirent => dirent.isFile())\n    .map(dirent => dirent.name);\n    \n  console.log('Files in directory:', files);\n  \n  // Filter for directories only\n  const directories = dirents\n    .filter(dirent => dirent.isDirectory())\n    .map(dirent => dirent.name);\n    \n  console.log('Subdirectories:', directories);\n});"
              },
              "removeDirectory": {
                "description": "Removing directories:",
                "code": "// Remove empty directory\nfs.rmdir('empty-directory', (err) => {\n  if (err) {\n    console.error('Error removing directory:', err);\n    return;\n  }\n  console.log('Directory removed');\n});\n\n// Remove directory and all contents (Node.js >= 14.14.0)\nfs.rm('directory-with-content', { recursive: true, force: true }, (err) => {\n  if (err) {\n    console.error('Error removing directory recursively:', err);\n    return;\n  }\n  console.log('Directory and contents removed');\n});"
              }
            }
          },
          "fileManipulation": {
            "description": "Manipulating files",
            "examples": {
              "renameFile": {
                "description": "Renaming or moving a file:",
                "code": "fs.rename('old-file.txt', 'new-file.txt', (err) => {\n  if (err) {\n    console.error('Error renaming file:', err);\n    return;\n  }\n  console.log('File renamed successfully');\n});\n\n// Move file to another directory\nfs.rename('file.txt', 'new-directory/file.txt', (err) => {\n  if (err) {\n    console.error('Error moving file:', err);\n    return;\n  }\n  console.log('File moved successfully');\n});"
              },
              "copyFile": {
                "description": "Copying a file (Node.js >= 8.5.0):",
                "code": "fs.copyFile('source.txt', 'destination.txt', (err) => {\n  if (err) {\n    console.error('Error copying file:', err);\n    return;\n  }\n  console.log('File copied successfully');\n});\n\n// Copy file and don't overwrite if destination exists\nfs.copyFile('source.txt', 'destination.txt', fs.constants.COPYFILE_EXCL, (err) => {\n  if (err) {\n    console.error('Error copying file (may already exist):', err);\n    return;\n  }\n  console.log('File copied successfully');\n});"
              },
              "deleteFile": {
                "description": "Deleting a file:",
                "code": "fs.unlink('file-to-delete.txt', (err) => {\n  if (err) {\n    console.error('Error deleting file:', err);\n    return;\n  }\n  console.log('File deleted successfully');\n});"
              }
            }
          }
        },
        "watchingFiles": {
          "description": "Monitoring file changes",
          "example": {
            "description": "Watching a file or directory for changes:",
            "code": "const fs = require('fs');\n\n// Watch a file for changes\nfs.watch('watched-file.txt', (eventType, filename) => {\n  console.log(`Event type: ${eventType}`);\n  if (filename) {\n    console.log(`File changed: ${filename}`);\n  }\n});\n\n// Watch a directory for changes\nfs.watch('watched-directory', { recursive: true }, (eventType, filename) => {\n  console.log(`Event: ${eventType} in file/dir: ${filename}`);\n});"
          }
        },
        "practicalExamples": {
          "logRotation": {
            "description": "A simple log rotation system:",
            "code": "const fs = require('fs');\nconst path = require('path');\n\n// Log file paths\nconst logFile = 'app.log';\nconst rotatedLogFile = (index) => `app.log.${index}`;\n\n// Function to rotate logs\nasync function rotateLog() {\n  try {\n    // Check if log file exists\n    try {\n      await fs.promises.access(logFile);\n    } catch {\n      // Log file doesn't exist, no need to rotate\n      return;\n    }\n    \n    // Get current log file size\n    const stats = await fs.promises.stat(logFile);\n    const fileSizeInMB = stats.size / (1024 * 1024);\n    \n    // Rotate if file is larger than 10MB\n    if (fileSizeInMB >= 10) {\n      // Find the maximum rotation index\n      const dir = path.dirname(logFile);\n      const files = await fs.promises.readdir(dir);\n      \n      let maxIndex = 0;\n      const pattern = new RegExp(`^${path.basename(logFile)}\\.\\d+$`);\n      \n      for (const file of files) {\n        if (pattern.test(file)) {\n          const index = parseInt(file.split('.').pop());\n          maxIndex = Math.max(maxIndex, index);\n        }\n      }\n      \n      // Rename the current log file\n      await fs.promises.rename(logFile, rotatedLogFile(maxIndex + 1));\n      \n      console.log(`Log rotated: ${logFile} -> ${rotatedLogFile(maxIndex + 1)}`);\n    }\n  } catch (err) {\n    console.error('Error rotating log:', err);\n  }\n}\n\n// Function to write to log\nasync function writeLog(message) {\n  const logEntry = `[${new Date().toISOString()}] ${message}\\n`;\n  \n  try {\n    await fs.promises.appendFile(logFile, logEntry);\n    \n    // Check if rotation is needed after write\n    await rotateLog();\n  } catch (err) {\n    console.error('Error writing to log:', err);\n  }\n}\n\n// Example usage\n(async () => {\n  for (let i = 0; i < 1000; i++) {\n    await writeLog(`Test log entry ${i} with some data to increase file size...`);\n  }\n})();"
          },
          "fileUploadHandler": {
            "description": "A basic file upload handler:",
            "code": "const fs = require('fs');\nconst http = require('http');\nconst path = require('path');\n\n// Create upload directory if it doesn't exist\nconst uploadDir = path.join(__dirname, 'uploads');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\n// Create HTTP server to handle file uploads\nconst server = http.createServer((req, res) => {\n  if (req.method === 'POST' && req.url === '/upload') {\n    // Handle file upload\n    const fileName = `upload-${Date.now()}${path.extname(req.headers['file-name'] || '') || '.bin'}`;\n    const filePath = path.join(uploadDir, fileName);\n    \n    // Create a write stream\n    const fileWriteStream = fs.createWriteStream(filePath);\n    \n    // Handle file write success\n    fileWriteStream.on('finish', () => {\n      res.writeHead(200, { 'Content-Type': 'application/json' });\n      res.end(JSON.stringify({\n        success: true,\n        fileName: fileName,\n        path: filePath\n      }));\n    });\n    \n    // Handle file write error\n    fileWriteStream.on('error', (err) => {\n      console.error('Error writing file:', err);\n      res.writeHead(500, { 'Content-Type': 'application/json' });\n      res.end(JSON.stringify({ success: false, error: 'Failed to save file' }));\n    });\n    \n    // Pipe request data to file\n    req.pipe(fileWriteStream);\n    \n    // Handle request errors\n    req.on('error', (err) => {\n      console.error('Error receiving upload:', err);\n      fileWriteStream.destroy();\n      fs.unlink(filePath, () => {});\n    });\n  } else {\n    // Serve a simple HTML form for testing uploads\n    if (req.url === '/' && req.method === 'GET') {\n      res.writeHead(200, { 'Content-Type': 'text/html' });\n      res.end(`\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <title>File Upload</title>\n        </head>\n        <body>\n          <h1>Upload a File</h1>\n          <form id=\"uploadForm\" enctype=\"multipart/form-data\">\n            <input type=\"file\" id=\"fileInput\" name=\"file\" />\n            <button type=\"submit\">Upload</button>\n          </form>\n          <div id=\"result\"></div>\n          \n          <script>\n            document.getElementById('uploadForm').addEventListener('submit', async (e) => {\n              e.preventDefault();\n              const fileInput = document.getElementById('fileInput');\n              const file = fileInput.files[0];\n              if (!file) return alert('Please select a file');\n              \n              const result = document.getElementById('result');\n              result.textContent = 'Uploading...';\n              \n              try {\n                const response = await fetch('/upload', {\n                  method: 'POST',\n                  headers: {\n                    'File-Name': file.name\n                  },\n                  body: file\n                });\n                \n                const data = await response.json();\n                result.textContent = data.success ?\n                  `File uploaded: ${data.fileName}` :\n                  `Upload failed: ${data.error}`;\n              } catch (err) {\n                result.textContent = 'Upload failed: ' + err.message;\n              }\n            });\n          </script>\n        </body>\n        </html>\n      `);\n    } else {\n      res.writeHead(404, { 'Content-Type': 'text/plain' });\n      res.end('Not Found');\n    }\n  }\n});\n\nserver.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});"
          }
        }
      },
      "Node.js URL Module": {
        "introduction": {
          "description": "The URL module in Node.js provides utilities for URL resolution and parsing. It offers both legacy API and a newer API that implements the WHATWG URL Standard used by modern browsers.",
          "importingModule": "// Legacy API\nconst url = require('url');\n\n// WHATWG URL API (recommended)\nconst { URL } = require('url');"
        },
        "parsingURLs": {
          "description": "Parsing URLs with the WHATWG URL API",
          "example": {
            "description": "Creating and parsing URLs:",
            "code": "const { URL } = require('url');\n\n// Creating a new URL object\nconst myURL = new URL('https://user:pass@www.example.com:8080/path/to/page?query=string#hash');\n\nconsole.log('Href:', myURL.href);\nconsole.log('Protocol:', myURL.protocol);\nconsole.log('Username:', myURL.username);\nconsole.log('Password:', myURL.password);\nconsole.log('Host:', myURL.host);\nconsole.log('Hostname:', myURL.hostname);\nconsole.log('Port:', myURL.port);\nconsole.log('Origin:', myURL.origin);\nconsole.log('Pathname:', myURL.pathname);\nconsole.log('Search:', myURL.search);\nconsole.log('Hash:', myURL.hash);\n\n// Creating a URL with a base URL\nconst relativeURL = new URL('/another-path', 'https://example.com');\nconsole.log('Relative URL resolved:', relativeURL.href);"
          }
        },
        "searchParams": {
          "description": "Working with query parameters using URLSearchParams",
          "example": {
            "description": "Manipulating search parameters:",
            "code": "const { URL, URLSearchParams } = require('url');\n\n// Creating a URL with query parameters\nconst myURL = new URL('https://example.com/search?q=node.js&type=article');\n\n// Get URLSearchParams object\nconst params = myURL.searchParams;\n\n// Reading parameters\nconsole.log('q parameter:', params.get('q'));\nconsole.log('type parameter:', params.get('type'));\n\n// Adding a parameter\nparams.append('category', 'tutorial');\n\n// Setting a parameter (replaces existing values)\nparams.set('q', 'node.js url module');\n\n// Checking if a parameter exists\nconsole.log('Has category parameter:', params.has('category'));\n\n// Deleting a parameter\nparams.delete('type');\n\n// Iterating over parameters\nconsole.log('\\nAll parameters:');\nfor (const [name, value] of params) {\n  console.log(`${name}: ${value}`);\n}\n\n// Converting parameters to string\nconsole.log('\\nSearch string:', params.toString());\n\n// Creating URLSearchParams from string, object or iterable\nconst params1 = new URLSearchParams('foo=bar&baz=qux');\nconst params2 = new URLSearchParams([['foo', 'bar'], ['baz', 'qux']]);\nconst params3 = new URLSearchParams({ foo: 'bar', baz: 'qux' });\n\nconsole.log('\\nCreated from string:', params1.toString());\nconsole.log('Created from iterable:', params2.toString());\nconsole.log('Created from object:', params3.toString());"
          }
        },
        "legacyURLAPI": {
          "description": "Using the legacy URL API for backward compatibility",
          "example": {
            "description": "Legacy URL parsing and formatting:",
            "code": "const url = require('url');\n\n// Parse a URL string\nconst parsedUrl = url.parse('https://user:pass@www.example.com:8080/path/to/page?query=string#hash', true);\n\nconsole.log('Protocol:', parsedUrl.protocol);\nconsole.log('Auth:', parsedUrl.auth);\nconsole.log('Host:', parsedUrl.host);\nconsole.log('Hostname:', parsedUrl.hostname);\nconsole.log('Port:', parsedUrl.port);\nconsole.log('Path:', parsedUrl.path);\nconsole.log('Pathname:', parsedUrl.pathname);\nconsole.log('Query (as object):', parsedUrl.query);\nconsole.log('Hash:', parsedUrl.hash);\n\n// Format a parsed URL back to a string\nconst formattedUrl = url.format(parsedUrl);\nconsole.log('Formatted URL:', formattedUrl);\n\n// Resolve relative URLs\nconst resolvedUrl = url.resolve('https://example.com/one/two', '/three');\nconsole.log('Resolved URL:', resolvedUrl);"
          }
        },
        "practicalExamples": {
          "routingWithURLParsing": {
            "description": "Using URL parsing for routing in a web server",
            "code": "const http = require('http');\nconst { URL } = require('url');\n\n// Create HTTP server with URL-based routing\nconst server = http.createServer((req, res) => {\n  // Parse the URL (using current host as base)\n  const baseURL = `http://${req.headers.host}`;\n  const parsedUrl = new URL(req.url, baseURL);\n  \n  // Get pathname and search params\n  const pathname = parsedUrl.pathname;\n  const params = parsedUrl.searchParams;\n  \n  // Set response header\n  res.setHeader('Content-Type', 'text/html');\n  \n  // Simple routing based on pathname\n  if (pathname === '/') {\n    res.writeHead(200);\n    res.end('<h1>Home Page</h1>');\n  } \n  else if (pathname === '/about') {\n    res.writeHead(200);\n    res.end('<h1>About Page</h1>');\n  } \n  else if (pathname === '/users') {\n    // Get user ID from query parameters\n    const userId = params.get('id');\n    \n    if (userId) {\n      res.writeHead(200);\n      res.end(`<h1>User Details</h1><p>Showing details for user ID: ${userId}</p>`);\n    } else {\n      res.writeHead(200);\n      res.end('<h1>Users List</h1><p>No specific user selected.</p>');\n    }\n  } \n  else if (pathname.startsWith('/products/')) {\n    // Extract product ID from path\n    const productId = pathname.split('/')[2];\n    \n    res.writeHead(200);\n    res.end(`<h1>Product Details</h1><p>Showing details for product ID: ${productId}</p>`);\n  } \n  else {\n    res.writeHead(404);\n    res.end('<h1>404 Not Found</h1>');\n  }\n});\n\nserver.listen(3000, () => {\n  console.log('Server running at http://localhost:3000/');\n});"
          },
          "urlValidation": {
            "description": "Validating and normalizing URLs",
            "code": "const { URL } = require('url');\n\n/**\n * Validates a URL and returns a normalized version if valid\n * @param {string} urlString - The URL to validate\n * @returns {string|null} - Normalized URL or null if invalid\n */\nfunction validateAndNormalizeURL(urlString) {\n  try {\n    // Prepend a protocol if missing\n    if (!urlString.match(/^[a-zA-Z][a-zA-Z\\d+-.]*:/))\n      urlString = `https://${urlString}`;\n    \n    // Try to create URL object (will throw if invalid)\n    const myURL = new URL(urlString);\n    \n    // Allow only http and https protocols\n    if (myURL.protocol !== 'http:' && myURL.protocol !== 'https:') {\n      return null;\n    }\n    \n    // Normalize the URL\n    return myURL.href;\n  } catch (err) {\n    // Invalid URL\n    return null;\n  }\n}\n\n// Test the function\nconst testUrls = [\n  'example.com',\n  'https://example.com/path',\n  'http://user:pass@example.com:8080/path?query=string#hash',\n  'ftp://example.com',  // Should fail (not http/https)\n  'not a url',          // Should fail (invalid)\n  'https://example.com/a/../b'  // Should normalize path\n];\n\nfor (const url of testUrls) {\n  const result = validateAndNormalizeURL(url);\n  console.log(`Original: ${url}`);\n  console.log(`Result: ${result || 'Invalid URL'}\\n`);\n}"
          }
        }
      },
      "Node.js NPM": {
        "introduction": {
          "description": "npm (Node Package Manager) is the default package manager for Node.js. It allows you to install, share, and manage dependencies in your projects and provides a way to share packages among the community.",
          "keyFeatures": [
            "Package installation and dependency management",
            "Version management using semantic versioning",
            "Publishing and sharing code",
            "Running scripts and task automation",
            "Managing user and organization permissions"
          ]
        },
        "packageJson": {
          "description": "The package.json file is the heart of any Node.js project. It contains metadata about the project and lists its dependencies.",
          "essential_fields": {
            "name": "Project name (must be lowercase, one word, may contain hyphens and underscores)",
            "version": "Project version in semver format (major.minor.patch)",
            "description": "Brief description of the project",
            "main": "The entry point to your package (default: index.js)",
            "scripts": "Command scripts that can be run with npm run",
            "dependencies": "Production dependencies required by the application",
            "devDependencies": "Development-only dependencies (not needed in production)",
            "peerDependencies": "Dependencies expected to be provided by the consumer of your package",
            "engines": "Node.js version requirements",
            "author": "Package author information",
            "license": "Package license (e.g., MIT, ISC, etc.)"
          },
          "example": {
            "name": "my-awesome-package",
            "version": "1.0.0",
            "description": "A package that does awesome things",
            "main": "index.js",
            "scripts": {
              "test": "jest",
              "start": "node index.js",
              "build": "webpack"
            },
            "dependencies": {
              "express": "^4.18.2",
              "lodash": "^4.17.21"
            },
            "devDependencies": {
              "jest": "^29.5.0",
              "webpack": "^5.88.2"
            },
            "author": "Your Name <your.email@example.com>",
            "license": "MIT"
          }
        },
        "commonCommands": {
          "installation": [
            {
              "command": "npm init",
              "description": "Initializes a new package.json file interactively"
            },
            {
              "command": "npm init -y",
              "description": "Creates a package.json with default values"
            }
          ],
          "dependency_management": [
            {
              "command": "npm install <package>",
              "description": "Installs a package and adds to dependencies"
            },
            {
              "command": "npm install <package> --save-dev",
              "description": "Installs a package and adds to devDependencies"
            },
            {
              "command": "npm install <package>@<version>",
              "description": "Installs a specific version of a package"
            },
            {
              "command": "npm install",
              "description": "Installs all dependencies listed in package.json"
            },
            {
              "command": "npm ci",
              "description": "Clean install from package-lock.json (faster for CI environments)"
            },
            {
              "command": "npm update",
              "description": "Updates all packages to their latest version based on specified version range"
            },
            {
              "command": "npm uninstall <package>",
              "description": "Removes a package"
            },
            {
              "command": "npm list",
              "description": "Lists installed packages"
            },
            {
              "command": "npm outdated",
              "description": "Checks for outdated dependencies"
            }
          ]
        }
      },
      "node.js events": {
        "description": "Node.js uses an event-driven, non-blocking I/O model. The Events module provides a way to work with events in Node.js applications.",
        "eventEmitter": {
          "description": "The EventEmitter is a class that facilitates communication between objects in Node.js. It's the core of Node.js asynchronous event-driven architecture.",
          "basic_usage": {
            "import": "const EventEmitter = require('events');",
            "create_instance": "const myEmitter = new EventEmitter();",
            "register_listener": "myEmitter.on('event', (arg1, arg2) => { console.log('Event occurred!', arg1, arg2); });",
            "emit_event": "myEmitter.emit('event', 'arg1Value', 'arg2Value');"
          },
          "common_methods": [
            {
              "method": "on(event, listener)",
              "description": "Adds a listener to the end of the listeners array for the specified event"
            },
            {
              "method": "once(event, listener)",
              "description": "Adds a one-time listener that will be removed after it's called"
            },
            {
              "method": "emit(event, [args])",
              "description": "Emits an event, executing each attached listener in order"
            },
            {
              "method": "removeListener(event, listener)",
              "description": "Removes a specified listener from the listener array for the event"
            },
            {
              "method": "removeAllListeners([event])",
              "description": "Removes all listeners, or those of the specified event"
            },
            {
              "method": "setMaxListeners(n)",
              "description": "By default, EventEmitters will print a warning if more than 10 listeners are added for a particular event"
            },
            {
              "method": "listeners(event)",
              "description": "Returns an array of listeners for the specified event"
            }
          ],
          "example": {
            "code": "const EventEmitter = require('events');\n\nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\n\n// Register listener\nmyEmitter.on('event', function(a, b) {\n  console.log(a, b, this);\n});\n\n// Emit event\nmyEmitter.emit('event', 'a', 'b');"
          }
        },
        "error_handling": {
          "description": "Special handling for 'error' events is crucial in Node.js",
          "best_practices": [
            "Always register a listener for the 'error' event to prevent crashes",
            "Use try-catch blocks within event listeners for synchronous code",
            "Return promises or use async/await for asynchronous error handling",
            "Consider using domain module (deprecated) or AsyncLocalStorage for more complex error handling"
          ],
          "example": "myEmitter.on('error', (err) => {\n  console.error('An error occurred:', err.message);\n});"
        },
        "async_patterns": {
          "description": "Event emitters can be used with modern async patterns",
          "examples": [
            {
              "pattern": "Promises with events",
              "code": "const waitForEvent = (emitter, event) => {\n  return new Promise((resolve) => {\n    emitter.once(event, resolve);\n  });\n};\n\n// Usage\nawait waitForEvent(server, 'listening');"
            },
            {
              "pattern": "Async Iterator",
              "code": "async function* createEventIterator(emitter, event) {\n  while (true) {\n    yield await new Promise(resolve => emitter.once(event, resolve));\n  }\n};\n\n// Usage\nfor await (const data of createEventIterator(emitter, 'data')) {\n  console.log(data);\n}"
            }
          ]
        }
      },
      "Node.js file upload": {
        "description": "Node.js provides several approaches for handling file uploads in web applications.",
        "approaches": {
          "raw_http": {
            "description": "Using the built-in http module and manually parsing multipart/form-data",
            "advantages": ["No dependencies", "Full control over the process"],
            "disadvantages": [
              "Complex implementation",
              "Need to handle chunking and parsing manually"
            ],
            "example": "const http = require('http');\nconst fs = require('fs');\n\nhttp.createServer((req, res) => {\n  if (req.method === 'POST' && req.headers['content-type'].includes('multipart/form-data')) {\n    let data = [];\n    req.on('data', chunk => {\n      data.push(chunk);\n    });\n    req.on('end', () => {\n      // Process the complete multipart data\n      // (simplified - actual implementation would need proper multipart parsing)\n      const fileData = Buffer.concat(data);\n      fs.writeFile('uploaded-file.dat', fileData, (err) => {\n        if (err) throw err;\n        res.end('File uploaded');\n      });\n    });\n  }\n}).listen(3000);"
          },
          "express_multer": {
            "description": "Using Express and Multer middleware for file uploads",
            "setup": {
              "install": "npm install express multer",
              "code": "const express = require('express');\nconst multer = require('multer');\nconst app = express();\n\n// Configure storage\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/'); // Upload directory\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + '-' + file.originalname); // Unique filename\n  }\n});\n\nconst upload = multer({ storage: storage });\n\n// Single file upload\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.json({\n    message: 'File uploaded successfully',\n    file: req.file\n  });\n});\n\n// Multiple files upload\napp.post('/upload-multiple', upload.array('files', 10), (req, res) => {\n  res.json({\n    message: 'Files uploaded successfully',\n    files: req.files\n  });\n});\n\napp.listen(3000);"
            },
            "multer_options": [
              {
                "option": "dest or storage",
                "description": "Where to store the files"
              },
              {
                "option": "fileFilter",
                "description": "Function to control which files are accepted"
              },
              {
                "option": "limits",
                "description": "Limits of the uploaded data"
              }
            ],
            "handling_file_types": {
              "description": "Filter files based on their mimetype",
              "example": "const fileFilter = (req, file, cb) => {\n  // Accept images only\n  if (!file.originalname.match(/\\.(jpg|jpeg|png|gif)$/)) {\n    return cb(new Error('Only image files are allowed!'), false);\n  }\n  cb(null, true);\n};\n\nconst upload = multer({ \n  storage: storage,\n  fileFilter: fileFilter\n});"
            }
          },
          "formidable": {
            "description": "Using the formidable package for parsing form data",
            "setup": {
              "install": "npm install formidable",
              "code": "const http = require('http');\nconst formidable = require('formidable');\nconst fs = require('fs');\n\nhttp.createServer((req, res) => {\n  if (req.url === '/upload' && req.method.toLowerCase() === 'post') {\n    // Create a new form instance\n    const form = new formidable.IncomingForm();\n    \n    // Parse the incoming request\n    form.parse(req, (err, fields, files) => {\n      if (err) {\n        res.writeHead(500, { 'Content-Type': 'text/plain' });\n        res.end('An error occurred');\n        return;\n      }\n      \n      // Access the uploaded file\n      const oldPath = files.file.filepath;\n      const newPath = './uploads/' + files.file.originalFilename;\n      \n      // Move the file to uploads directory\n      fs.rename(oldPath, newPath, (err) => {\n        if (err) throw err;\n        res.writeHead(200, { 'Content-Type': 'text/plain' });\n        res.end('File uploaded successfully');\n      });\n    });\n    return;\n  }\n  \n  // Show a file upload form\n  res.writeHead(200, { 'Content-Type': 'text/html' });\n  res.write('<form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">');\n  res.write('<input type=\"file\" name=\"file\"><br>');\n  res.write('<input type=\"submit\" value=\"Upload\">');\n  res.write('</form>');\n  return res.end();\n}).listen(3000);"
            }
          },
          "busboy": {
            "description": "Using the busboy package for parsing incoming HTML form data",
            "setup": {
              "install": "npm install busboy",
              "code": "const http = require('http');\nconst Busboy = require('busboy');\nconst fs = require('fs');\nconst path = require('path');\n\nhttp.createServer((req, res) => {\n  if (req.method === 'POST') {\n    const busboy = Busboy({ headers: req.headers });\n    \n    busboy.on('file', (fieldname, file, info) => {\n      const { filename, encoding, mimeType } = info;\n      console.log(`File [${fieldname}]: filename: ${filename}, encoding: ${encoding}, mimeType: ${mimeType}`);\n      \n      const saveTo = path.join('./uploads', filename);\n      file.pipe(fs.createWriteStream(saveTo));\n      \n      file.on('data', (data) => {\n        console.log(`File [${fieldname}] got ${data.length} bytes`);\n      });\n      \n      file.on('end', () => {\n        console.log(`File [${fieldname}] Finished`);\n      });\n    });\n    \n    busboy.on('field', (fieldname, val) => {\n      console.log(`Field [${fieldname}]: value: ${val}`);\n    });\n    \n    busboy.on('finish', () => {\n      res.writeHead(200, { 'Content-Type': 'text/plain' });\n      res.end('Upload complete!');\n    });\n    \n    req.pipe(busboy);\n  } else {\n    res.writeHead(404);\n    res.end();\n  }\n}).listen(3000);"
            }
          }
        },
        "memory_vs_disk": {
          "description": "Options for storing uploaded files in memory or on disk",
          "memory": {
            "advantages": [
              "Faster processing",
              "No cleanup needed",
              "Good for small files"
            ],
            "disadvantages": [
              "Memory consumption for large files",
              "Data lost if server crashes"
            ]
          },
          "disk": {
            "advantages": [
              "Handles large files",
              "Lower memory usage",
              "Data persists if server crashes"
            ],
            "disadvantages": [
              "Slower",
              "Requires cleanup",
              "File system operations can be blocking"
            ]
          },
          "example_multer_memory": "const upload = multer({ storage: multer.memoryStorage() });\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  // Access file buffer directly\n  const fileBuffer = req.file.buffer;\n  // Process the file in memory\n});"
        },
        "streaming_uploads": {
          "description": "Using streams for efficient handling of large file uploads",
          "example": "const fs = require('fs');\nconst http = require('http');\n\nhttp.createServer((req, res) => {\n  if (req.method === 'POST') {\n    const writeStream = fs.createWriteStream('large-file.dat');\n    \n    req.pipe(writeStream);\n    \n    req.on('end', () => {\n      res.end('Upload complete');\n    });\n    \n    writeStream.on('error', (err) => {\n      console.error(err);\n      res.statusCode = 500;\n      res.end('Error saving file');\n    });\n  }\n}).listen(3000);"
        },
        "best_practices": [
          "Always validate file types and sizes",
          "Use a virus scanning service for uploaded files",
          "Store files outside the web root",
          "Generate random filenames to prevent overwriting",
          "Implement proper error handling for failed uploads",
          "Consider using cloud storage services for production",
          "Implement rate limiting to prevent abuse",
          "Set appropriate Content-Type headers when serving files"
        ]
      },
      "nodejs_email": {
        "description": "Node.js provides several libraries for sending emails from your applications.",
        "libraries": {
          "nodemailer": {
            "description": "The most popular and comprehensive email sending library for Node.js",
            "installation": "npm install nodemailer",
            "basic_usage": {
              "code": "const nodemailer = require('nodemailer');\n\n// Create transporter object\nconst transporter = nodemailer.createTransport({\n  host: 'smtp.example.com',\n  port: 587,\n  secure: false, // true for 465, false for other ports\n  auth: {\n    user: 'username@example.com', \n    pass: 'password'\n  }\n});\n\n// Send mail with defined transport object\nasync function sendMail() {\n  try {\n    const info = await transporter.sendMail({\n      from: '\"Fred Foo\" <foo@example.com>',\n      to: 'bar@example.com, baz@example.com',\n      subject: 'Hello ✔',\n      text: 'Hello world?',\n      html: '<b>Hello world?</b>'\n    });\n    \n    console.log('Message sent: %s', info.messageId);\n  } catch (error) {\n    console.error('Error sending email:', error);\n  }\n}\n\nsendMail();"
            },
            "features": [
              "Support for Unicode content",
              "HTML content with embedded images",
              "Attachments",
              "SSL/TLS support",
              "OAuth2 authentication",
              "SMTP pooling",
              "Various transports (SMTP, sendmail, Amazon SES, etc.)"
            ],
            "transport_options": [
              {
                "type": "SMTP",
                "config": "const transporter = nodemailer.createTransport({\n  host: 'smtp.gmail.com',\n  port: 587,\n  secure: false,\n  auth: {\n    user: 'username@gmail.com',\n    pass: 'password'\n  }\n});"
              },
              {
                "type": "Gmail",
                "config": "const transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'username@gmail.com',\n    pass: 'password'\n  }\n});"
              },
              {
                "type": "OAuth2",
                "config": "const transporter = nodemailer.createTransport({\n  host: 'smtp.gmail.com',\n  port: 465,\n  secure: true,\n  auth: {\n    type: 'OAuth2',\n    user: 'username@gmail.com',\n    clientId: 'YOUR_CLIENT_ID',\n    clientSecret: 'YOUR_CLIENT_SECRET',\n    refreshToken: 'YOUR_REFRESH_TOKEN',\n    accessToken: 'YOUR_ACCESS_TOKEN'\n  }\n});"
              },
              {
                "type": "Amazon SES",
                "config": "const transporter = nodemailer.createTransport({\n  SES: new AWS.SES({\n    apiVersion: '2010-12-01',\n    region: 'us-east-1'\n  })\n});"
              }
            ],
            "advanced_usage": {
              "attachments": "const mailOptions = {\n  from: 'sender@example.com',\n  to: 'receiver@example.com',\n  subject: 'Email with attachments',\n  text: 'Please see the attached files',\n  attachments: [\n    { // File on disk\n      filename: 'text1.txt',\n      path: '/path/to/file.txt'\n    },\n    { // Buffer\n      filename: 'text2.txt',\n      content: Buffer.from('Hello world!')\n    },\n    { // Stream\n      filename: 'text3.txt',\n      content: fs.createReadStream('/path/to/file.txt')\n    },\n    { // URL\n      filename: 'license.txt',\n      path: 'https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE'\n    },\n    { // Inline attachment (cid attachment)\n      filename: 'image.png',\n      path: '/path/to/image.png',\n      cid: 'unique@cid' // Referenced in HTML as <img src=\"cid:unique@cid\">\n    }\n  ]\n};",
              "templates": {
                "description": "Using templates for email content",
                "handlebars_example": "const hbs = require('nodemailer-express-handlebars');\nconst path = require('path');\n\n// Point to the templates directory\nconst handlebarOptions = {\n  viewEngine: {\n    partialsDir: path.resolve('./views/'),\n    defaultLayout: false\n  },\n  viewPath: path.resolve('./views/')\n};\n\n// Use handlebars as the template engine\ntransporter.use('compile', hbs(handlebarOptions));\n\n// Send email with template\nconst mailOptions = {\n  from: 'sender@example.com',\n  to: 'receiver@example.com',\n  subject: 'Welcome Email',\n  template: 'welcome', // corresponds to welcome.handlebars file\n  context: {\n    name: 'John Doe',\n    activationLink: 'http://example.com/activate'\n  }\n};"
              },
              "bulk_emails": "// Create only one transporter\nconst transporter = nodemailer.createTransport({...});\n\n// Function to send email\nasync function sendEmail(to, subject, text) {\n  return transporter.sendMail({\n    from: 'sender@example.com',\n    to,\n    subject,\n    text\n  });\n}\n\n// Send bulk emails\nasync function sendBulkEmails(recipients) {\n  const promises = recipients.map(recipient => {\n    return sendEmail(\n      recipient.email,\n      'Your personalized subject',\n      `Hello ${recipient.name}, this is your personalized message.`\n    );\n  });\n  \n  try {\n    await Promise.all(promises);\n    console.log('All emails sent successfully');\n  } catch (error) {\n    console.error('Error sending bulk emails:', error);\n  }\n}"
            }
          },
          "mailgun_js": {
            "description": "Official Mailgun API client for Node.js",
            "installation": "npm install mailgun-js",
            "basic_usage": {
              "code": "const mailgun = require('mailgun-js')({apiKey: 'YOUR_API_KEY', domain: 'YOUR_DOMAIN'});\n\nconst data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'user@example.com',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomeness!'\n};\n\nmailgun.messages().send(data, (error, body) => {\n  if (error) console.error(error);\n  console.log(body);\n});"
            }
          },
          "amazon_ses": {
            "description": "Using AWS SDK to send emails via Amazon SES",
            "installation": "npm install aws-sdk",
            "basic_usage": {
              "code": "const AWS = require('aws-sdk');\n\n// Configure AWS\nAWS.config.update({\n  accessKeyId: 'YOUR_ACCESS_KEY_ID',\n  secretAccessKey: 'YOUR_SECRET_ACCESS_KEY',\n  region: 'us-east-1'\n});\n\nconst ses = new AWS.SES({ apiVersion: '2010-12-01' });\n\nconst params = {\n  Destination: {\n    ToAddresses: ['recipient@example.com']\n  },\n  Message: {\n    Body: {\n      Html: {\n        Charset: 'UTF-8',\n        Data: '<h1>Hello World</h1><p>This is a test email from Amazon SES.</p>'\n      },\n      Text: {\n        Charset: 'UTF-8',\n        Data: 'Hello World. This is a test email from Amazon SES.'\n      }\n    },\n    Subject: {\n      Charset: 'UTF-8',\n      Data: 'Test Email from Amazon SES'\n    }\n  },\n  Source: 'sender@example.com'\n};\n\nses.sendEmail(params, (err, data) => {\n  if (err) console.error(err);\n  else console.log('Email sent:', data.MessageId);\n});"
            }
          }
        },
        "email_templates": {
          "description": "Libraries for creating and managing email templates",
          "options": [
            {
              "name": "email-templates",
              "description": "A comprehensive solution for rendering emails with different template engines",
              "installation": "npm install email-templates",
              "usage": "const Email = require('email-templates');\nconst path = require('path');\n\nconst email = new Email({\n  views: { root: path.join(__dirname, 'emails') },\n  message: {\n    from: 'sender@example.com'\n  },\n  transport: {\n    host: 'smtp.example.com',\n    port: 587,\n    secure: false,\n    auth: {\n      user: 'username',\n      pass: 'password'\n    }\n  }\n});\n\nemail.send({\n  template: 'welcome',\n  message: {\n    to: 'john@example.com'\n  },\n  locals: {\n    name: 'John Doe',\n    activationLink: 'https://example.com/activate?token=abc123'\n  }\n}).then(console.log).catch(console.error);"
            },
            {
              "name": "mjml",
              "description": "Responsive email framework that makes email design easy",
              "installation": "npm install mjml",
              "usage": "const mjml2html = require('mjml');\nconst nodemailer = require('nodemailer');\n\n// Convert MJML to HTML\nconst htmlOutput = mjml2html(`\n<mjml>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n        <mj-text>Hello World</mj-text>\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n`);\n\n// Send the email\nconst transporter = nodemailer.createTransport({...});\n\ntransporter.sendMail({\n  from: 'sender@example.com',\n  to: 'receiver@example.com',\n  subject: 'MJML Email',\n  html: htmlOutput.html\n});"
            }
          ]
        },
        "best_practices": [
          "Use environment variables for storing sensitive email credentials",
          "Implement retry mechanisms for failed email deliveries",
          "Set up proper SPF, DKIM, and DMARC records to improve deliverability",
          "Use a specialized email service (Mailgun, SendGrid, etc.) for production applications",
          "Always include plain text alternative with HTML emails",
          "Test emails with different clients and devices",
          "Implement email verification and bounce handling",
          "Follow anti-spam regulations (CAN-SPAM, GDPR, etc.)",
          "Implement rate limiting to prevent abuse",
          "Use a dedicated email address for sending (no-reply@example.com)"
        ],
        "testing": {
          "description": "Options for testing email functionality without sending real emails",
          "solutions": [
            {
              "name": "Ethereal Email",
              "description": "Nodemailer's built-in test mail service",
              "usage": "// Create test account\nnodemailer.createTestAccount((err, account) => {\n  if (err) {\n    console.error('Failed to create test account', err);\n    return;\n  }\n  \n  // Create reusable transporter using the test account\n  const transporter = nodemailer.createTransport({\n    host: 'smtp.ethereal.email',\n    port: 587,\n    secure: false,\n    auth: {\n      user: account.user,\n      pass: account.pass\n    }\n  });\n  \n  // Send test email\n  transporter.sendMail({\n    from: '\"Test User\" <test@example.com>',\n    to: 'recipient@example.com',\n    subject: 'Test Email',\n    text: 'This is a test email'\n  }, (err, info) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    \n    // Preview URL\n    console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\n  });\n});"
            },
            {
              "name": "MailHog",
              "description": "Email testing tool for developers",
              "usage": "// Configure Nodemailer to use MailHog\nconst transporter = nodemailer.createTransport({\n  host: '127.0.0.1', // MailHog address\n  port: 1025, // MailHog SMTP port\n  ignoreTLS: true\n});"
            },
            {
              "name": "Mock Transport",
              "description": "Custom transport that captures emails without sending",
              "usage": "// Create a mock transport\nconst messages = [];\nconst mockTransport = {\n  name: 'mock',\n  version: '1.0.0',\n  send: (mail, callback) => {\n    const message = mail.message.toString();\n    messages.push(message);\n    callback(null, { message });\n  }\n};\n\n// Create a transport using the mock\nconst transporter = nodemailer.createTransport(mockTransport);"
            }
          ]
        }
      }
    }
  },
  {
    "ExpressJS": {
      "Introduction to Express": {
        "introduction": {
          "description": "Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.",
          "installation": "npm install express",
          "basic_setup": "const express = require('express');\nconst app = express();\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});",
          "example": "// Complete minimal Express app\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});"
        }
      },
      "Creating a server with Express": {
        "server_creation": {
          "description": "Methods to create and configure an Express server",
          "basic_server": {
            "syntax": "const express = require('express');\nconst app = express();\n\napp.listen(PORT, [callback]);",
            "example": "const express = require('express');\nconst app = express();\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});"
          },
          "https_server": {
            "syntax": "const express = require('express');\nconst https = require('https');\nconst fs = require('fs');\nconst app = express();\n\nconst options = {\n  key: fs.readFileSync('path/to/key.pem'),\n  cert: fs.readFileSync('path/to/cert.pem')\n};\n\nhttps.createServer(options, app).listen(PORT, [callback]);",
            "example": "const express = require('express');\nconst https = require('https');\nconst fs = require('fs');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Secure Hello World!');\n});\n\nconst options = {\n  key: fs.readFileSync('key.pem'),\n  cert: fs.readFileSync('cert.pem')\n};\n\nhttps.createServer(options, app).listen(3443, () => {\n  console.log('Secure server running on port 3443');\n});"
          },
          "app_settings": {
            "syntax": "app.set(name, value);",
            "example": "app.set('port', process.env.PORT || 3000);\napp.set('view engine', 'ejs');\napp.set('views', './views');\napp.set('case sensitive routing', true);\napp.set('strict routing', true);\napp.set('x-powered-by', false);"
          }
        }
      },
      "Middleware": {
        "description": "Functions that have access to the request object (req), the response object (res), and the next middleware function in the application's request-response cycle.",
        "built_in": {
          "express.json": {
            "syntax": "app.use(express.json([options]));",
            "description": "Parses incoming requests with JSON payloads",
            "example": "app.use(express.json());\n\napp.post('/api/users', (req, res) => {\n  console.log(req.body); // Contains parsed JSON\n  res.send('User created');\n});"
          },
          "express.urlencoded": {
            "syntax": "app.use(express.urlencoded([options]));",
            "description": "Parses incoming requests with URL-encoded payloads",
            "example": "app.use(express.urlencoded({ extended: true }));\n\napp.post('/login', (req, res) => {\n  console.log(req.body.username);\n  console.log(req.body.password);\n  res.send('Form submitted');\n});"
          },
          "express.static": {
            "syntax": "app.use(express.static(root, [options]));",
            "description": "Serves static files such as images, CSS, JavaScript, etc.",
            "example": "app.use(express.static('public'));\napp.use('/assets', express.static('assets'));\napp.use('/vendor', express.static(path.join(__dirname, 'node_modules')));"
          }
        },
        "custom": {
          "syntax": "function middlewareName(req, res, next) {\n  // Middleware logic\n  next(); // Call next to pass control to the next middleware\n}",
          "application_level": {
            "description": "Middleware bound to the app object using app.use() or app.METHOD()",
            "example": "// Logger middleware\napp.use((req, res, next) => {\n  console.log(`${req.method} ${req.url} at ${new Date().toISOString()}`);\n  next();\n});\n\n// Authentication middleware\nconst authenticate = (req, res, next) => {\n  const token = req.headers.authorization;\n  if (!token) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n  // Verify token\n  // If valid, set req.user and proceed\n  req.user = { id: 'user123', name: 'John' };\n  next();\n};\n\napp.use('/api', authenticate);"
          },
          "router_level": {
            "description": "Middleware bound to an instance of express.Router()",
            "example": "const router = express.Router();\n\nrouter.use((req, res, next) => {\n  console.log('Router specific middleware');\n  next();\n});\n\nrouter.get('/user/:id', (req, res) => {\n  res.send(`User: ${req.params.id}`);\n});\n\napp.use('/api', router);"
          },
          "error_handling": {
            "syntax": "function errorHandler(err, req, res, next) {\n  // Error handling logic\n}",
            "example": "app.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Something broke!');\n});"
          }
        },
        "third_party": {
          "cors": {
            "syntax": "const cors = require('cors');\napp.use(cors([options]));",
            "description": "Enables Cross-Origin Resource Sharing",
            "example": "const cors = require('cors');\n\n// Allow all origins\napp.use(cors());\n\n// Custom configuration\napp.use(cors({\n  origin: ['https://example.com', 'https://subdomain.example.com'],\n  methods: ['GET', 'POST'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n  credentials: true\n}));"
          },
          "helmet": {
            "syntax": "const helmet = require('helmet');\napp.use(helmet());",
            "description": "Helps secure Express apps with various HTTP headers",
            "example": "const helmet = require('helmet');\n\n// Use all helmet middleware\napp.use(helmet());\n\n// Configure specific middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: [\"'self'\", 'trusted-cdn.com']\n    }\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  }\n}));"
          },
          "morgan": {
            "syntax": "const morgan = require('morgan');\napp.use(morgan([format], [options]));",
            "description": "HTTP request logger middleware",
            "example": "const morgan = require('morgan');\n\n// Predefined format\napp.use(morgan('combined'));\n\n// Custom format\napp.use(morgan(':method :url :status :res[content-length] - :response-time ms'));\n\n// Log to file\nconst accessLogStream = fs.createWriteStream(path.join(__dirname, 'access.log'), { flags: 'a' });\napp.use(morgan('combined', { stream: accessLogStream }));"
          },
          "compression": {
            "syntax": "const compression = require('compression');\napp.use(compression([options]));",
            "description": "Compresses response bodies for all requests",
            "example": "const compression = require('compression');\n\napp.use(compression());\n\n// With options\napp.use(compression({\n  level: 6,\n  filter: (req, res) => {\n    if (req.headers['x-no-compression']) {\n      return false;\n    }\n    return compression.filter(req, res);\n  }\n}));"
          },
          "cookie_parser": {
            "syntax": "const cookieParser = require('cookie-parser');\napp.use(cookieParser([secret], [options]));",
            "description": "Parse Cookie header and populate req.cookies",
            "example": "const cookieParser = require('cookie-parser');\n\napp.use(cookieParser('my-secret-key'));\n\napp.get('/get-cookie', (req, res) => {\n  console.log(req.cookies); // Parsed cookies\n  console.log(req.signedCookies); // Signed cookies\n  res.send('Cookie read');\n});\n\napp.get('/set-cookie', (req, res) => {\n  res.cookie('name', 'value', {\n    maxAge: 900000,\n    httpOnly: true,\n    secure: true,\n    signed: true\n  });\n  res.send('Cookie set');\n});"
          },
          "session": {
            "syntax": "const session = require('express-session');\napp.use(session([options]));",
            "description": "Creates a session middleware with given options",
            "example": "const session = require('express-session');\n\napp.use(session({\n  secret: 'your-secret-key',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: true, maxAge: 60000 },\n  store: new RedisStore({\n    host: 'localhost',\n    port: 6379\n  })\n}));\n\napp.get('/view-count', (req, res) => {\n  req.session.views = (req.session.views || 0) + 1;\n  res.send(`You have viewed this page ${req.session.views} times.`);\n});"
          }
        }
      },
      "Routing": {
        "description": "Defines how an application responds to client requests to specific endpoints (URIs) and methods",
        "basic_routing": {
          "syntax": "app.METHOD(PATH, HANDLER);",
          "methods": [
            "get",
            "post",
            "put",
            "delete",
            "patch",
            "options",
            "head"
          ],
          "example": "app.get('/', (req, res) => {\n  res.send('GET request to homepage');\n});\n\napp.post('/users', (req, res) => {\n  res.send('POST request to create user');\n});\n\napp.put('/users/:id', (req, res) => {\n  res.send(`PUT request to update user ${req.params.id}`);\n});\n\napp.delete('/users/:id', (req, res) => {\n  res.send(`DELETE request to remove user ${req.params.id}`);\n});"
        },
        "route_parameters": {
          "syntax": "app.METHOD('/path/:param1/:param2', HANDLER);",
          "description": "Named URL segments used to capture values at specific positions in the URL",
          "example": "app.get('/users/:userId/books/:bookId', (req, res) => {\n  res.send(`User ID: ${req.params.userId}, Book ID: ${req.params.bookId}`);\n});\n\n// Optional parameters with ?\napp.get('/users/:userId/posts/:postId?', (req, res) => {\n  const postInfo = req.params.postId \n    ? `Post ID: ${req.params.postId}` \n    : 'All posts';\n  res.send(`User ID: ${req.params.userId}, ${postInfo}`);\n});"
        },
        "route_handlers": {
          "single_handler": {
            "syntax": "app.METHOD(PATH, (req, res, next) => {});",
            "example": "app.get('/single', (req, res) => {\n  res.send('Single handler');\n});"
          },
          "multiple_handlers": {
            "syntax": "app.METHOD(PATH, HANDLER1, HANDLER2, ...);",
            "example": "app.get('/multiple',\n  (req, res, next) => {\n    console.log('First handler');\n    req.user = { id: 1, name: 'John' };\n    next();\n  },\n  (req, res) => {\n    res.send(`Hello, ${req.user.name}`);\n  }\n);"
          },
          "array_of_handlers": {
            "syntax": "app.METHOD(PATH, [HANDLER1, HANDLER2, ...]);",
            "example": "const validateUser = (req, res, next) => {\n  if (req.query.userId) {\n    next();\n  } else {\n    res.status(400).send('Missing userId');\n  }\n};\n\nconst getUser = (req, res, next) => {\n  req.user = { id: req.query.userId, name: 'John' };\n  next();\n};\n\napp.get('/users', [validateUser, getUser], (req, res) => {\n  res.send(`User: ${req.user.name}`);\n});"
          }
        },
        "router_instance": {
          "syntax": "const router = express.Router([options]);\nrouter.METHOD(PATH, HANDLER);\napp.use([PATH], router);",
          "description": "Creates a modular, mountable route handler",
          "example": "// users.js\nconst express = require('express');\nconst router = express.Router();\n\nrouter.get('/', (req, res) => {\n  res.send('All users');\n});\n\nrouter.get('/:id', (req, res) => {\n  res.send(`User ${req.params.id}`);\n});\n\nrouter.post('/', (req, res) => {\n  res.send('Create new user');\n});\n\nmodule.exports = router;\n\n// app.js\nconst usersRouter = require('./users');\napp.use('/api/users', usersRouter);"
        },
        "app_route": {
          "syntax": "app.route(PATH).METHOD(HANDLER).METHOD(HANDLER);",
          "description": "Creates chainable route handlers for a single route path",
          "example": "app.route('/book')\n  .get((req, res) => {\n    res.send('Get a book');\n  })\n  .post((req, res) => {\n    res.send('Add a book');\n  })\n  .put((req, res) => {\n    res.send('Update a book');\n  });"
        },
        "all_method": {
          "syntax": "app.all(PATH, HANDLER);",
          "description": "This method is like the standard app.METHOD() methods, but it matches all HTTP methods",
          "example": "app.all('/api/*', (req, res, next) => {\n  console.log('Accessing API...');\n  next(); // Pass control to the next handler\n});"
        }
      },
      "Handling form data and JSON": {
        "description": "Methods for handling different types of data in Express",
        "query_parameters": {
          "syntax": "req.query",
          "description": "Object containing properties mapped to each query string parameter",
          "example": "// URL: /search?q=javascript&sort=desc\napp.get('/search', (req, res) => {\n  const query = req.query.q;\n  const sort = req.query.sort;\n  res.send(`Search for: ${query}, Sort: ${sort}`);\n});"
        },
        "route_parameters": {
          "syntax": "req.params",
          "description": "Object containing properties mapped to route parameters",
          "example": "app.get('/users/:userId/posts/:postId', (req, res) => {\n  const userId = req.params.userId;\n  const postId = req.params.postId;\n  res.send(`User ID: ${userId}, Post ID: ${postId}`);\n});"
        },
        "form_data": {
          "syntax": "req.body",
          "description": "Contains key-value pairs of data submitted in the request body",
          "example": "// Parse URL-encoded form data\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  \n  // Process login\n  if (username === 'admin' && password === 'password') {\n    res.send('Login successful');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});"
        },
        "json_data": {
          "syntax": "req.body",
          "description": "Contains parsed JSON data submitted in the request body",
          "example": "// Parse JSON data\napp.use(express.json());\n\napp.post('/api/products', (req, res) => {\n  const product = req.body;\n  \n  // Validate product\n  if (!product.name || !product.price) {\n    return res.status(400).json({ error: 'Name and price are required' });\n  }\n  \n  // Process product\n  res.status(201).json({\n    id: 123,\n    ...product,\n    createdAt: new Date()\n  });\n});"
        },
        "file_uploads": {
          "syntax": "const multer = require('multer');\nconst upload = multer([options]);",
          "description": "Handles multipart/form-data for file uploads using the multer middleware",
          "example": "const multer = require('multer');\nconst path = require('path');\n\n// Configure storage\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + path.extname(file.originalname));\n  }\n});\n\n// File filter\nconst fileFilter = (req, file, cb) => {\n  if (file.mimetype.startsWith('image/')) {\n    cb(null, true);\n  } else {\n    cb(new Error('Not an image! Please upload only images.'), false);\n  }\n};\n\nconst upload = multer({\n  storage: storage,\n  limits: {\n    fileSize: 1024 * 1024 * 5 // 5 MB\n  },\n  fileFilter: fileFilter\n});\n\n// Single file upload\napp.post('/upload', upload.single('profileImage'), (req, res) => {\n  if (!req.file) {\n    return res.status(400).send('No file uploaded.');\n  }\n  res.send({\n    message: 'File uploaded successfully',\n    file: req.file\n  });\n});\n\n// Multiple files upload\napp.post('/upload-multiple', upload.array('gallery', 5), (req, res) => {\n  if (!req.files || req.files.length === 0) {\n    return res.status(400).send('No files uploaded.');\n  }\n  res.send({\n    message: 'Files uploaded successfully',\n    files: req.files\n  });\n});\n\n// Multiple fields\napp.post('/upload-fields',\n  upload.fields([\n    { name: 'avatar', maxCount: 1 },\n    { name: 'gallery', maxCount: 5 }\n  ]),\n  (req, res) => {\n    res.send({\n      message: 'Files uploaded successfully',\n      avatar: req.files.avatar,\n      gallery: req.files.gallery\n    });\n  }\n);"
        },
        "cookies": {
          "syntax": "req.cookies, res.cookie(name, value, [options])",
          "description": "Read and set cookies using cookie-parser middleware",
          "example": "const cookieParser = require('cookie-parser');\napp.use(cookieParser());\n\n// Set a cookie\napp.get('/set-cookie', (req, res) => {\n  res.cookie('user', 'john', {\n    maxAge: 86400000, // 1 day\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'strict'\n  });\n  res.send('Cookie set');\n});\n\n// Read cookies\napp.get('/get-cookie', (req, res) => {\n  const user = req.cookies.user;\n  res.send(`User from cookie: ${user || 'not set'}`);\n});\n\n// Clear a cookie\napp.get('/clear-cookie', (req, res) => {\n  res.clearCookie('user');\n  res.send('Cookie cleared');\n});"
        },
        "sessions": {
          "syntax": "req.session",
          "description": "Persistent data storage across requests using express-session middleware",
          "example": "const session = require('express-session');\napp.use(session({\n  secret: 'your-secret-key',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    maxAge: 1000 * 60 * 60 * 24 // 1 day\n  }\n}));\n\n// Set session data\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  \n  // Validate (simplified)\n  if (username === 'admin' && password === 'password') {\n    req.session.authenticated = true;\n    req.session.user = { username, role: 'admin' };\n    res.send('Logged in');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\n// Read session data\napp.get('/profile', (req, res) => {\n  if (req.session.authenticated) {\n    res.send(`Welcome ${req.session.user.username}! Your role is ${req.session.user.role}`);\n  } else {\n    res.status(401).send('Please login first');\n  }\n});\n\n// Destroy session\napp.get('/logout', (req, res) => {\n  req.session.destroy(err => {\n    if (err) {\n      return res.status(500).send('Error logging out');\n    }\n    res.clearCookie('connect.sid');\n    res.send('Logged out');\n  });\n});"
        },
        "request_headers": {
          "syntax": "req.get(headerName) or req.headers",
          "description": "Access HTTP request headers",
          "example": "app.get('/headers', (req, res) => {\n  const userAgent = req.get('User-Agent');\n  const contentType = req.get('Content-Type');\n  const allHeaders = req.headers;\n  \n  res.json({\n    userAgent,\n    contentType,\n    allHeaders\n  });\n});"
        },
        "response_headers": {
          "syntax": "res.set(field, [value]) or res.set({key: value})",
          "description": "Set HTTP response headers",
          "example": "app.get('/custom-headers', (req, res) => {\n  // Set a single header\n  res.set('Cache-Control', 'no-cache');\n  \n  // Set multiple headers\n  res.set({\n    'Content-Type': 'application/json',\n    'X-Custom-Header': 'Custom Value',\n    'X-Powered-By': 'Express'\n  });\n  \n  res.send({ message: 'Check the headers' });\n});"
        }
      },
      "Serving static files": {
        "description": "Serving static files such as images, CSS files, and JavaScript files",
        "basic_usage": {
          "syntax": "app.use([virtual_path,] express.static(root_directory, [options]));",
          "example": "// Serve files from 'public' directory\napp.use(express.static('public'));\n\n// Access: http://localhost:3000/images/logo.png -> serves public/images/logo.png\n\n// Serve files with a virtual path prefix\napp.use('/static', express.static('public'));\n\n// Access: http://localhost:3000/static/images/logo.png -> serves public/images/logo.png\n\n// Use absolute path\nconst path = require('path');\napp.use('/assets', express.static(path.join(__dirname, 'public')));"
        },
        "options": {
          "syntax": "app.use(express.static(root, { options }));",
          "description": "Configuration options for static file serving",
          "example": "app.use(express.static('public', {\n  dotfiles: 'ignore', // Allow, deny, or ignore dotfiles\n  etag: true, // Enable or disable etag generation\n  extensions: ['html', 'htm'], // File extension fallbacks\n  index: 'index.html', // Default file to serve when a directory is requested\n  lastModified: true, // Set Last-Modified header to file's last modified date\n  maxAge: '1d', // Set Cache-Control max-age header (in ms or as string)\n  redirect: true, // Redirect to trailing '/' when pathname is a directory\n  setHeaders: function (res, path, stat) {\n    // Custom function to set headers on response\n    res.set('x-timestamp', Date.now());\n  }\n}));"
        },
        "multiple_directories": {
          "description": "Serve static files from multiple directories",
          "example": "// Serve from multiple directories\napp.use(express.static('public'));\napp.use(express.static('files'));\napp.use(express.static('uploads'));\n\n// First match wins - if the same file exists in multiple directories,\n// the one in the first directory specified is served"
        },
        "conditional_serving": {
          "description": "Conditionally serve static files based on request properties",
          "example": "// Serve files based on subdomain\napp.use((req, res, next) => {\n  const subdomain = req.subdomains[0];\n  if (subdomain === 'admin') {\n    express.static('admin')(req, res, next);\n  } else {\n    express.static('public')(req, res, next);\n  }\n});\n\n// Serve different files based on user role\napp.use((req, res, next) => {\n  if (req.user && req.user.role === 'admin') {\n    express.static('admin-assets')(req, res, next);\n  } else {\n    express.static('public-assets')(req, res, next);\n  }\n});"
        }
      },
      "Error handling middleware": {
        "custom_error_class": {
          "example": "class ApplicationError extends Error {\n  constructor(message, statusCode) {\n    super(message);\n    this.statusCode = statusCode;\n    this.name = this.constructor.name;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nclass NotFoundError extends ApplicationError {\n  constructor(message = 'Resource not found') {\n    super(message, 404);\n  }\n}\n\nclass ValidationError extends ApplicationError {\n  constructor(message = 'Validation failed', errors = []) {\n    super(message, 400);\n    this.errors = errors;\n  }\n}\n\n// Using custom errors\napp.get('/items/:id', async (req, res, next) => {\n  try {\n    const item = await findItem(req.params.id);\n    if (!item) {\n      throw new NotFoundError(`Item with id ${req.params.id} not found`);\n    }\n    res.json(item);\n  } catch (err) {\n    next(err);\n  }\n});\n\n// Custom error handler that checks error types\napp.use((err, req, res, next) => {\n  if (err instanceof ValidationError) {\n    return res.status(err.statusCode).json({\n      message: err.message,\n      errors: err.errors\n    });\n  } else if (err instanceof ApplicationError) {\n    return res.status(err.statusCode).json({\n      message: err.message\n    });\n  }\n  \n  // Default to 500 server error\n  res.status(500).json({\n    message: 'Internal Server Error'\n  });\n});"
        },
        "async_error_handling": {
          "description": "Handling errors in async/await functions",
          "example": "// Express >= 4.16.0 automatically catches Promise rejections\napp.get('/async', async (req, res, next) => {\n  const data = await fetchData(); // If this rejects, error is passed to next()\n  res.json(data);\n});\n\n// For Express < 4.16.0 or to be explicit\napp.get('/async-explicit', async (req, res, next) => {\n  try {\n    const data = await fetchData();\n    res.json(data);\n  } catch (err) {\n    next(err);\n  }\n});\n\n// Wrapper to catch async errors\nconst asyncHandler = fn => (req, res, next) => {\n  return Promise.resolve(fn(req, res, next)).catch(next);\n};\n\n// Using the wrapper\napp.get('/users', asyncHandler(async (req, res) => {\n  const users = await User.findAll();\n  res.json(users);\n}));"
        },
        "404_handling": {
          "description": "Handling 404 Not Found errors",
          "example": "// Middleware for handling 404s - place after all other routes\napp.use((req, res, next) => {\n  res.status(404).send('Not found');\n});\n\n// Or with more details\napp.use((req, res, next) => {\n  res.status(404).json({\n    status: 'error',\n    message: `Cannot ${req.method} ${req.url}`,\n    suggestions: [\n      'Check the URL for typos',\n      'Make sure the HTTP method is correct'\n    ]\n  });\n});"
        },
        "error_middleware_chain": {
          "description": "Creating a chain of error handling middleware",
          "example": "// Log all errors\napp.use((err, req, res, next) => {\n  console.error(`${req.method} ${req.url}`);\n  console.error(err.stack);\n  next(err); // Pass to next error handler\n});\n\n// Handle client errors\napp.use((err, req, res, next) => {\n  if (err.statusCode >= 400 && err.statusCode < 500) {\n    return res.status(err.statusCode).json({\n      status: 'error',\n      message: err.message\n    });\n  }\n  next(err); // Not a client error, pass to server error handler\n});\n\n// Handle server errors\napp.use((err, req, res, next) => {\n  res.status(500).json({\n    status: 'error',\n    message: process.env.NODE_ENV === 'production' \n      ? 'Internal Server Error' \n      : err.message\n  });\n});"
        }
      },
      "Template engines (e.g., EJS, Pug)": {
        "description": "Rendering dynamic HTML content using template engines",
        "setup": {
          "syntax": "app.set('view engine', 'engine_name');\napp.set('views', 'path_to_views');",
          "example": "// Setting up EJS template engine\napp.set('view engine', 'ejs');\napp.set('views', './views');\n\n// Setting up Pug template engine\napp.set('view engine', 'pug');\napp.set('views', path.join(__dirname, 'views'));"
        },
        "render_template": {
          "syntax": "res.render(view, [locals], [callback])",
          "description": "Renders a view and sends the rendered HTML to the client",
          "example": "// Basic usage\napp.get('/', (req, res) => {\n  res.render('index', { title: 'Express App', message: 'Hello World!' });\n});\n\n// With a callback function\napp.get('/profile', (req, res) => {\n  res.render('profile', { user: req.user }, (err, html) => {\n    if (err) {\n      console.error('Error rendering view:', err);\n      return res.status(500).send('Error rendering view');\n    }\n    \n    // Modify the HTML or add custom headers\n    res.set('Content-Type', 'text/html');\n    res.send(html);\n  });\n});"
        },
        "ejs_engine": {
          "description": "EJS (Embedded JavaScript) template engine syntax and usage",
          "installation": "npm install ejs",
          "examples": {
            "basic_template": "<!-- views/index.ejs -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title><%= title %></title>\n</head>\n<body>\n  <h1><%= message %></h1>\n  \n  <% if (user) { %>\n    <p>Welcome, <%= user.name %>!</p>\n  <% } else { %>\n    <p>Please log in</p>\n  <% } %>\n  \n  <ul>\n  <% users.forEach(function(user) { %>\n    <li><%= user.name %> - <%= user.email %></li>\n  <% }); %>\n  </ul>\n</body>\n</html>",
            "includes": "<!-- views/partials/header.ejs -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title><%= title %></title>\n  <link rel='stylesheet' href='/css/style.css' />\n</head>\n<body>\n  <header>\n    <h1><%= title %></h1>\n    <nav><!-- navigation --></nav>\n  </header>\n\n<!-- views/index.ejs -->\n<%- include('partials/header', { title: 'Home Page' }) %>\n\n<main>\n  <p>Welcome to our site!</p>\n</main>\n\n<%- include('partials/footer') %>"
          },
          "server_code": "app.get('/', (req, res) => {\n  res.render('index', {\n    title: 'EJS Example',\n    message: 'Hello EJS!',\n    user: { name: 'John' },\n    users: [\n      { name: 'Alice', email: 'alice@example.com' },\n      { name: 'Bob', email: 'bob@example.com' },\n      { name: 'Charlie', email: 'charlie@example.com' }\n    ]\n  });\n});"
        },
        "pug_engine": {
          "description": "Pug (formerly Jade) template engine syntax and usage",
          "installation": "npm install pug",
          "examples": {
            "basic_template": "//- views/index.pug\ndoctype html\nhtml\n  head\n    title= title\n  body\n    h1= message\n    \n    if user\n      p Welcome, #{user.name}!\n    else\n      p Please log in\n    \n    ul\n      each user in users\n        li #{user.name} - #{user.email}",
            "includes": "//- views/layout.pug\ndoctype html\nhtml\n  head\n    title= title\n    link(rel='stylesheet', href='/css/style.css')\n  body\n    include partials/header.pug\n    \n    block content\n    \n    include partials/footer.pug\n\n//- views/index.pug\nextends layout\n\nblock content\n  h1= title\n  p Welcome to #{title}"
          },
          "server_code": "app.get('/', (req, res) => {\n  res.render('index', {\n    title: 'Pug Example',\n    message: 'Hello Pug!',\n    user: { name: 'John' },\n    users: [\n      { name: 'Alice', email: 'alice@example.com' },\n      { name: 'Bob', email: 'bob@example.com' },\n      { name: 'Charlie', email: 'charlie@example.com' }\n    ]\n  });\n});"
        },
        "handlebars_engine": {
          "description": "Handlebars template engine syntax and usage",
          "installation": "npm install express-handlebars",
          "setup": "const exphbs = require('express-handlebars');\n\napp.engine('handlebars', exphbs({\n  defaultLayout: 'main',\n  helpers: {\n    formatDate: function(date) {\n      return new Date(date).toLocaleDateString();\n    }\n  }\n}));\n\napp.set('view engine', 'handlebars');",
          "examples": {
            "basic_template": "<!-- views/layouts/main.handlebars -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>{{title}}</title>\n</head>\n<body>\n  {{{body}}}\n</body>\n</html>\n\n<!-- views/home.handlebars -->\n<h1>{{message}}</h1>\n\n{{#if user}}\n  <p>Welcome, {{user.name}}!</p>\n{{else}}\n  <p>Please log in</p>\n{{/if}}\n\n<ul>\n  {{#each users}}\n    <li>{{this.name}} - {{this.email}}</li>\n  {{/each}}\n</ul>"
          },
          "server_code": "app.get('/', (req, res) => {\n  res.render('home', {\n    title: 'Handlebars Example',\n    message: 'Hello Handlebars!',\n    user: { name: 'John' },\n    users: [\n      { name: 'Alice', email: 'alice@example.com' },\n      { name: 'Bob', email: 'bob@example.com' },\n      { name: 'Charlie', email: 'charlie@example.com' }\n    ]\n  });\n});"
        }
      },
      "response_methods": {
        "description": "Methods for sending responses to clients",
        "res_send": {
          "syntax": "res.send([body])",
          "description": "Sends the HTTP response with the provided body",
          "example": "app.get('/send-text', (req, res) => {\n  res.send('Hello World');\n});\n\napp.get('/send-html', (req, res) => {\n  res.send('<h1>Hello World</h1>');\n});\n\napp.get('/send-object', (req, res) => {\n  res.send({ message: 'Hello World' });\n});\n\napp.get('/send-buffer', (req, res) => {\n  res.send(Buffer.from('Hello World'));\n});"
        },
        "res_json": {
          "syntax": "res.json([body])",
          "description": "Sends a JSON response",
          "example": "app.get('/api/user', (req, res) => {\n  res.json({\n    id: 1,\n    name: 'John Doe',\n    email: 'john@example.com',\n    roles: ['user', 'admin']\n  });\n});\n\napp.get('/api/null', (req, res) => {\n  res.json(null); // Valid JSON response\n});"
        },
        "res_jsonp": {
          "syntax": "res.jsonp([body])",
          "description": "Sends a JSON response with JSONP support",
          "example": "app.get('/api/jsonp', (req, res) => {\n  res.jsonp({\n    message: 'JSONP response'\n  });\n});\n\n// Client can request with a callback parameter:\n// GET /api/jsonp?callback=myFunction\n// Response: myFunction({\"message\":\"JSONP response\"});"
        },
        "res_render": {
          "syntax": "res.render(view [, locals] [, callback])",
          "description": "Renders a view with the provided local variables",
          "example": "app.get('/dashboard', (req, res) => {\n  res.render('dashboard', {\n    title: 'Dashboard',\n    user: req.user,\n    stats: {\n      visits: 1000,\n      sales: 50,\n      revenue: 5000\n    }\n  });\n});"
        },
        "res_sendFile": {
          "syntax": "res.sendFile(path [, options] [, callback])",
          "description": "Transfers the file at the given path",
          "example": "app.get('/download', (req, res) => {\n  const file = path.join(__dirname, 'public', 'files', 'document.pdf');\n  \n  res.sendFile(file, {\n    headers: {\n      'Content-Disposition': 'attachment; filename=\"report.pdf\"'\n    }\n  }, (err) => {\n    if (err) {\n      next(err);\n    } else {\n      console.log('File sent successfully');\n    }\n  });\n});"
        },
        "res_download": {
          "syntax": "res.download(path [, filename] [, options] [, callback])",
          "description": "Transfers the file as an attachment (prompts the user to download)",
          "example": "app.get('/download-report', (req, res) => {\n  const file = path.join(__dirname, 'reports', 'quarterly-report.pdf');\n  \n  res.download(file, 'Q1-2023-Report.pdf', (err) => {\n    if (err) {\n      // Handle error, but keep in mind the response may be partially sent\n      if (!res.headersSent) {\n        res.status(500).send('Error downloading file');\n      }\n    } else {\n      // Log download success\n      console.log('File downloaded');\n    }\n  });\n});"
        },
        "res_redirect": {
          "syntax": "res.redirect([status,] path)",
          "description": "Redirects to the specified URL with the specified status code",
          "example": "app.get('/old-page', (req, res) => {\n  res.redirect('/new-page');\n});\n\napp.get('/temporary-redirect', (req, res) => {\n  res.redirect(302, '/target-page');\n});\n\napp.get('/permanent-redirect', (req, res) => {\n  res.redirect(301, '/new-location');\n});\n\napp.get('/external-redirect', (req, res) => {\n  res.redirect('https://example.com');\n});\n\napp.get('/dynamic-redirect', (req, res) => {\n  const { id } = req.query;\n  res.redirect(`/users/${id}`);\n});"
        },
        "res_sendStatus": {
          "syntax": "res.sendStatus(statusCode)",
          "description": "Sets the response status code and sends its string representation as the response body",
          "example": "app.get('/not-found', (req, res) => {\n  res.sendStatus(404); // Sends \"Not Found\"\n});\n\napp.get('/error', (req, res) => {\n  res.sendStatus(500); // Sends \"Internal Server Error\"\n});\n\napp.get('/ok', (req, res) => {\n  res.sendStatus(200); // Sends \"OK\"\n});\n\napp.post('/created', (req, res) => {\n  res.sendStatus(201); // Sends \"Created\"\n});"
        },
        "res_status": {
          "syntax": "res.status(code)",
          "description": "Sets the HTTP status for the response",
          "example": "app.get('/api/user/:id', (req, res) => {\n  // No such user\n  res.status(404).json({\n    error: 'User not found'\n  });\n});\n\napp.post('/api/users', (req, res) => {\n  // Created a new user\n  res.status(201).json({\n    id: 123,\n    name: req.body.name\n  });\n});"
        },
        "res_format": {
          "syntax": "res.format(object)",
          "description": "Performs content negotiation based on the Accept HTTP header",
          "example": "app.get('/users/:id', (req, res) => {\n  const user = {\n    id: req.params.id,\n    name: 'John Doe',\n    email: 'john@example.com'\n  };\n  \n  res.format({\n    'text/plain': () => {\n      res.send(`User: ${user.name} <${user.email}>`);\n    },\n    'text/html': () => {\n      res.send(`<h1>${user.name}</h1><p>Email: ${user.email}</p>`);\n    },\n    'application/json': () => {\n      res.json(user);\n    },\n    'default': () => {\n      // Default to plain text\n      res.status(406).send('Not Acceptable');\n    }\n  });\n});"
        },
        "headers_and_types": {
          "syntax": "res.set(field [, value])\nres.type(type)\nres.get(field)",
          "description": "Methods for working with response headers and content types",
          "example": "app.get('/api/data', (req, res) => {\n  // Set a single header\n  res.set('Cache-Control', 'no-cache');\n  \n  // Set multiple headers\n  res.set({\n    'Content-Type': 'application/json',\n    'X-API-Version': '1.0.0',\n    'X-Custom-Header': 'Custom Value'\n  });\n  \n  // Set content type\n  res.type('json');\n  \n  // Get a header value\n  const contentType = res.get('Content-Type');\n  \n  res.send({ data: 'example', type: contentType });\n});"
        },
        "cookies_management": {
          "syntax": "res.cookie(name, value [, options])\nres.clearCookie(name [, options])",
          "description": "Methods for setting and clearing cookies in the response",
          "example": "app.get('/set-cookies', (req, res) => {\n  // Simple cookie\n  res.cookie('simple', 'value');\n  \n  // Cookie with options\n  res.cookie('options', 'value', {\n    maxAge: 900000, // 15 minutes in milliseconds\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'strict'\n  });\n  \n  // Signed cookie (requires cookie-parser with secret)\n  res.cookie('signed', 'value', { signed: true });\n  \n  // JSON as cookie value\n  res.cookie('user', { name: 'John', role: 'admin' });\n  \n  // Clear a cookie\n  res.clearCookie('old-cookie');\n  \n  res.send('Cookies set');\n});"
        }
      }
    }
  },
  {
    "Python": {
      "Introduction": {
        "Python Overview": {
          "description": "Python is a high-level, interpreted programming language known for its readability and versatility.",
          "details": "'Python is a dynamically typed, general-purpose programming language that supports both object-oriented and functional programming approaches.\n\n '','Python is interpreted, meaning code executes line by line without prior compilation.\n\n '','Created by Guido Van Rossum in 1989 and first released in 1991.\n\n '','Python's design philosophy emphasizes code readability with its use of significant whitespace.\n \n'','Named after the British comedy group Monty Python, not the snake.'",
          "examples": "  'title' : 'Hello World in Python', \n\n 'code':  'print('Hello, World!')'\n\n ,   'title': 'Simple Calculation'\n\n ,  'code': 'result = 5 + 10\nprint(result)   "
        },
        "Installation & Getting Started": {
          "description": "How to install Python and set up your environment for development.",
          "details": "Python can be downloaded from python.org for Windows, macOS, and Linux.\n\n Many Linux distributions and macOS come with Python pre-installed.\n\n  Python 3.x is the current series; Python 2.x is legacy and should be avoided for new projects.\n\n Popular IDEs include PyCharm, Visual Studio Code with Python extension, and IDLE (included with Python).\n\n  Virtual environments help manage dependencies for different projects.",
          "examples": "title': 'Creating a virtual environment','code': '# Create a virtual environment\npython -m venv myenv\n\n# Activate on Windows\nmyenv\\Scripts\\activate\n\n# Activate on macOS/Linux\nsource myenv/bin/activatetitle: Installing packages with pip,code: pip install package_name\npip install -r requirements.txt"
        },

        "What is Syntax?": {
          "description": "The set of rules that defines how Python programs are written and interpreted.",
          "details": "Python syntax is designed to be readable and straightforward.\n\n,Indentation is used to define code blocks instead of braces or keywords.\n\n,Statements typically end with a newline rather than semicolons.\n\n,Python is case-sensitive (variable 'name' is different from 'Name').\n\n,Whitespace is significant and affects how code is interpreted.",
          "examples": "        title: Python indentation\n\n code: # Correct indentation\nif True:\n    print('Indented correctly')\n    \n# Incorrect indentation will raise an IndentationError\nif True:\nprint('This will cause an error') \n\ntitle: Multiple statements on one line\n\n,code: # Multiple statements on one line using semicolons\na = 5; b = 10; print(a + b)"
        },
        "Python Comments": {
          "description": "Non-executable text used to document code.",
          "details": "Single-line comments start with a hash (#) character.\n\n,Python doesn't have a specific syntax for multi-line comments, but triple-quoted strings are often used.\n\n,Comments are ignored by the Python interpreter.\n\n,Good comments explain 'why' rather than 'what' the code is doing.\n\n,Docstrings (documentation strings) use triple quotes and describe modules, functions, classes, or methods.",
          "examples": " title :  Single-line comments\n\n ,  code :  # This is a single-line comment\nprint('Hello')  # This comment is at the end of a line, title: Multi-line comments using triple quotes \n\n, code :  \nThis is often used as a multi-line comment.\nThough technically it's a string that isn't assigned to a variable.\n\"\"\"\n\ndef greet(name):\n    \"\"\"This is a docstring that describes the function.\n    \n    Args:\n        name: The name of the person to greet\n        \n    Returns:\n        A greeting string\n    \"\"\"\n    return f\"Hello, {name}!\""
        },
        "Python Variables": {
          "description": "Named references to objects in memory that store data.",
          "details": " Variables are created when you assign a value to them.\n\n, No explicit declaration or type definition is needed.\n\n, Variable names can contain letters, numbers, and underscores but cannot start with a number.\n\n, Python variables are case-sensitive.\n\n, Multiple assignment is supported in Python.",
          "examples": "title : Variable assignment \n\n code: # Simple variable assignment\nname = \"John\"\nage = 30\npi = 3.14159\nis_valid = True\n\n# Multiple assignment\nx, y, z = 1, 2, 3\n\n# Assigning the same value to multiple variables\na = b = c =   title :  Variable naming rules  codee:  # Valid variable names\nname = \"John\"\n_id = 12345\nuser_count = 100\nUserAge = 25\n\n# Invalid variable names\n# 2name = \"John\"  # Cannot start with a number\n# my-var = 10     # Hyphens are not allowed\n# class = \"Python\" # Cannot use Python keyword "
        }
      },
      "Python Data Types & Operators": {
        "Data Types": {
          "description": "The classification of data that determines what operations can be performed on it and how it's stored in memory.",
          "details": "Python has several built-in data types including numbers, strings, lists, tuples, sets, and dictionaries.\n\n,Python is dynamically typed, meaning variable types are determined at runtime.\n\n,The type() function can be used to check the type of a variable.\n\nPython handles memory management automatically.\n\nData types are categorized as mutable (can be changed) or immutable (cannot be changed).",
          "examples": "title: Basic data types \n\ncode: # Integer\nage = 25\nprint(type(age))  # <class 'int'>\n\n# Float\nheight = 5.9\nprint(type(height))  # <class 'float'>\n\n# String\nname = Alice \n print(type(name))  # <class 'str'>\n\n# Boolean\nis_student = True\nprint(type(is_student))  # <class 'bool'>\n\n# List (mutable)\nfruits = [apple, banana, cherry]\nprint(type(fruits))  # <class 'list'>\n\n# Tuple (immutable)\ncoordinates = (10.0, 20.0)\nprint(type(coordinates))  # <class 'tuple'>\n\n# Dictionary (mutable)\nperson = {\name: John, age: 30}\nprint(type(person))  # <class 'dict'>\n\n# Set (mutable)\nunique_numbers = {1, 2, 3, 4, 5}\nprint(type(unique_numbers))  # <class 'set'>"
        },
        "Python Numbers": {
          "description": "Numeric data types in Python.",
          "details": " Integer (int): Whole numbers without a decimal point.\n\n Float (float): Numbers with a decimal point.\n\n Complex (complex): Numbers with a real and imaginary part (e.g., 3+4j).\n\n Python 3 has unlimited precision for integers.\n\n Floating-point numbers have limited precision and can cause rounding errors in calculations.",
          "examples": "title: Number operations \n\n code:  # Integer operations\nx = 10\ny = 3\nprint(x + y)  # Addition: 13\nprint(x - y)  # Subtraction: 7\nprint(x * y)  # Multiplication: 30\nprint(x / y)  # Division: 3.3333...\nprint(x // y)  # Floor division: 3\nprint(x % y)  # Modulus: 1\nprint(x ** y)  # Exponentiation: 1000\n\n# Float operations\na = 2.5\nb = 1.5\nprint(a + b)  # 4.0\nprint(a * b)  # 3.75\n\n# Complex numbers\nc1 = 3 + 4j\nc2 = 2 + 3j\nprint(c1 + c2)  # (5+7j)\nprint(c1 * c2)  # (6+17j)\n\n title: Number precision\n\n  code: # Integer precision\nbig_number = 1234567890123456789012345678901234567890\nprint(big_number)  # Prints the full number\n\n# Floating-point precision issues\nprint(0.1 + 0.2)  # 0.30000000000000004 (not exactly 0.3)\n\n# Using the decimal module for precise decimal arithmetic\nfrom decimal import Decimal\nprint(Decimal('0.1') + Decimal('0.2'))  # 0.3"
        },
        "Data Conversion": {
          "description": "Converting data from one type to another.",
          "details": " Python provides built-in functions for type conversion: int(), float(), str(), list(), tuple(), set(), dict().\n\n Implicit conversion (coercion) happens automatically in certain contexts.\n\n Explicit conversion is when you manually convert a value using conversion functions.\n\n Not all conversions are possible; attempting invalid conversions raises errors.\n\n Data may be lost during conversion (e.g., float to int loses decimal portion).",
          "examples": "title: Explicit type conversion \n\n, code: \n\n# String to int or float\nnum_str = \"123\"\nnum_int = int(num_str)  # 123\nnum_float = float(num_str)  # 123.0\n\n# Int or float to string\nx = 100\ny = 3.14\nstr_x = str(x)  # \"100\"\nstr_y = str(y)  # \"3.14\"\n\n# Convert between collection types\nmy_list = [1, 2, 3, 4, 5]\nmy_tuple = tuple(my_list)  # (1, 2, 3, 4, 5)\nmy_set = set(my_list)     # {1, 2, 3, 4, 5}\n\n, title: Implicit type conversion\n\n, code: # Integer and float in an operation results in a float\nx = 10      # int\ny = 3.5     # float\nz = x + y   # 13.5 (float)\n\n# Concatenating different types with strings requires explicit conversion\nage = 25\n# print(\"I am \" + age + \" years old\")  # TypeError\nprint(\"I am \" + str(age) + \" years old\")  # \"I am 25 years old\""
        },
        "Type Casting": {
          "description": "Converting a variable from one data type to another.",
          "details": "Implicit Type Casting (Coercion): Automatic conversion by Python during operations.\n\nExplicit Type Casting: Manual conversion using constructor functions.\n\nCommon type casting functions include int(), float(), str(), list(), tuple(), set(), dict().\n\nType casting can sometimes result in data loss.\n\nNot all type conversions are valid and may raise TypeError or ValueError.",
          "examples": "title: Numeric type casting \n\ncode: # Integer to float\nint_num = 10\nfloat_num = float(int_num)  # 10.0\n\n# Float to integer (truncates decimal part)\npi = 3.14159\ntruncated_pi = int(pi)  # 3\n\n# String to number\nage_str = 25 \n age_int = int(age_str)  # 25\n\n# Number to string\ncount = 42\ncount_str = str(count)  #  42 \n\n# Handling errors in type casting\ntry:\n    # This will raise a ValueError\n    invalid_num = int(abc)\nexcept ValueError as e:\n    print(f Error: {e})\n\title: Collection type casting\n\ncode: # String to list (list of characters)\nname = Python \n char_list = list(name)  # ['P', 'y', 't', 'h', 'o', 'n']\n\n# List to tuple\nnumbers = [1, 2, 3, 4]\nnumbers_tuple = tuple(numbers)  # (1, 2, 3, 4)\n\n# List to set (removes duplicates)\nduplicates = [1, 2, 2, 3, 3, 3, 4]\nunique_set = set(duplicates)  # {1, 2, 3, 4}\n\n# Creating a dictionary from a list of tuples\nitems = [( apple , 1), ( banana , 2)]\nfruit_dict = dict(items)  # { apple : 1,  banana: 2}"
        },
        "Python Operators": {
          "description": "Symbols that perform operations on variables and values.",
          "details": " Arithmetic Operators: +, -, *, /, //, %, **  \n\n Assignment Operators: =, +=, -=, *=, /=, //=, %=, **= \n\n Comparison Operators: ==, !=, >, <, >=, <=\n\n Logical Operators: and, or, not\n\n Identity Operators: is, is not\n\n Membership Operators: in, not in\n\n Bitwise Operators: &, |, ^, ~, <<, >>",
          "examples": " title: Arithmetic operators\n\n code: a = 10\nb = 3\n\nprint(a + b)   # Addition: 13\nprint(a - b)   # Subtraction: 7\nprint(a * b)   # Multiplication: 30\nprint(a / b)   # Division: 3.3333...\nprint(a / / b)  # Floor division: 3\nprint(a % b)   # Modulus: 1\nprint(a ** b)  # Exponentiation: 1000\n\n title: Assignment operators\n\n code: x = 5           # Basic assignment\n\nx += 3          # x = x + 3 (x is now 8)\nx -= 2          # x = x - 2 (x is now 6)\nx *= 2          # x = x * 2 (x is now 12)\nx /= 4          # x = x / 4 (x is now 3.0)\nx / /= 1         # x = x / / 1 (x is now 3.0)\nx %= 2          # x = x % 2 (x is now 1.0)\nx **= 3         # x = x ** 3 (x is now 1.0)\n\n title: Comparison operators\n\n code: a = 10\nb = 20\n\nprint(a == b)  # Equal to: False\nprint(a != b)  # Not equal to: True\nprint(a > b)   # Greater than: False\nprint(a < b)   # Less than: True\nprint(a >= b)  # Greater than or equal to: False\nprint(a <= b)  # Less than or equal to: True\n\n title: Logical operators\n\n code: x = True\ny = False\n\nprint(x and y)  # Logical AND: False\nprint(x or y)   # Logical OR: True\nprint(not x)    # Logical NOT: False\n\n# Short-circuit evaluation\na = 5\nb = 10\nif a > 0 and b/a > 1:  # Second condition only evaluated if first is True\n    print( Both conditions are True )\n title: Identity and membership operators\n\n code: # Identity operators (check if objects are the same object in memory)\na = [1, 2, 3]\nb = [1, 2, 3]\nc = a\n\nprint(a is b)      # False (different objects with same content)\nprint(a is c)      # True (same object)\nprint(a is not b)  # True\n\n# Membership operators (check if a value exists in a sequence)\nfruits = [ apple , banana , cherry ]\nprint( apple  in fruits)        # True\nprint( mango  not in fruits)   # True\n title: Bitwise operators \n\n code: a = 10  # 1010 in binary\nb = 7   # 0111 in binary\n\nprint(a & b)   # Bitwise AND: 2 (0010)\nprint(a | b)   # Bitwise OR: 15 (1111)\nprint(a ^ b)   # Bitwise XOR: 13 (1101)\nprint(~a)      # Bitwise NOT: -11 (invert all bits and add 1)\nprint(a << 1)  # Left shift: 20 (10100)\nprint(a >> 1)  # Right shift: 5 (0101)"
        },
        "Python Booleans": {
          "description": "The Boolean data type can have two values: True or False.",
          "details": " Boolean values are the result of comparison operations.\n\n The bool() function can convert other types to Boolean.\n\n In conditional statements, non-Boolean values are implicitly converted to Booleans.\n\n False values include: False, None, 0, empty strings, empty containers, and numeric zero.\n\n Any other value is considered True in a Boolean context.",
          "examples": "title: Boolean operations \n\n  code: a = True\nb = Fals \n\nprint(a and b)  # False\nprint(a or b)   # True\nprint(not a)    # False\n\n# Comparison operations result in booleans\nx = 5\ny = 10\nprint(x < y)    # True\nprint(x == y)   # False\n\n    title: Boolean conversion and falsy values\n\n code: # Converting value  to boolean\nprint(bool(0))      # False\nprint(bool(1))      # True\nprint(bool(-1))     # True (any non-zero number is True)\nprint(bool(\"\"))     # False (empty string)\nprint(bool(\"Hello\")) # True (non-empty string)\nprint(bool([]))     # False (empty list)\nprint(bool([1, 2])) # True (non-empty list)\nprint(bool(None))   # False\n\n# Using as condition in if statement\nx = \nif x:\n    print(x is not empty)\nelse:\n    print(x is empty)"
        }
      },
      "Strings": {
        "Python Strings": {
          "description": "Sequences of characters enclosed in quotes.",
          "details": "Strings can be defined using single quotes ('), double quotes (\"), or triple quotes (''' or \"\"\") for multi-line strings. Strings in Python are immutable, meaning they cannot be changed after creation. Python strings are indexed, with the first character having an index of 0. Python allows negative indexing, where -1 refers to the last character. Strings can be sliced to access substrings.",
          "examples": "# Different ways to create strings\nsingle_quotes = 'Hello, Python!'\ndouble_quotes = \"Hello, Python!\"\ntriple_quotes = '''This is a\nmulti-line string.'''\nprint(single_quotes)\nprint(double_quotes)\nprint(triple_quotes)\n\n# String indexing\ntext = \"Python\"\nprint(text[0])      # 'P' (first character)\nprint(text[3])      # 'h'\nprint(text[-1])     # 'n' (last character)\n\n# String slicing\nprint(text[0:2])    # 'Py' (from index 0 up to but not including 2)\nprint(text[2:])     # 'thon' (from index 2 to the end)\nprint(text[-3:])    # 'hon' (last three characters)"
        },
        "Operation on Strings": {
          "description": "Various operations that can be performed on strings.",
          "details": "Concatenation: Joining strings using the + operator. Repetition: Repeating strings using the * operator. Slicing and Indexing: Accessing parts of strings. Checking Membership: Using 'in' and 'not in' operators. String Iteration: Looping through characters in a string.",
          "examples": "# Concatenation using + operator\nfirst_name = \"John\"\nlast_name = \"Doe\"\nfull_name = first_name + \" \" + last_name\nprint(full_name)  # \"John Doe\"\n\n# String repetition using * operator\nsymbol = \"*\"\nline = symbol * 30\nprint(line)  # \"******************************\"\n\n# Checking membership\nmessage = \"Hello, Python!\"\nprint(\"Python\" in message)        # True\nprint(\"Java\" not in message)      # True\n\n# Iterating through a string\nfor char in \"Python\":\n    print(char)\n\n# String comparison\nprint(\"apple\" < \"banana\")  # True (lexicographical comparison)\nprint(\"a\" < \"A\")          # False (ASCII value of 'a' is greater than 'A')"
        },
        "String Methods": {
          "description": "Built-in functions that can be used on strings to perform various operations.",
          "details": "Python provides many built-in methods for string manipulation. These methods return new strings as strings are immutable. Common string methods include those for case conversion, searching, replacing, and formatting. String methods do not modify the original string. Multiple methods can be chained together.",
          "examples": "# Case conversion methods\ntext = \"Hello, World!\"\n\nprint(text.upper())      # \"HELLO, WORLD!\" (convert to uppercase)\nprint(text.lower())      # \"hello, world!\" (convert to lowercase)\nprint(text.capitalize()) # \"Hello, world!\" (capitalize first letter)\nprint(text.title())      # \"Hello, World!\" (capitalize each word)\nprint(text.swapcase())   # \"hELLO, wORLD!\" (swap case of each character)\n\n# Search and replace methods\ntext = \"Python is amazing and Python is easy to learn.\"\n\n# Search methods\nprint(text.count(\"Python\"))          # 2 (count occurrences)\nprint(text.find(\"amazing\"))          # 10 (index of first occurrence)\nprint(text.rfind(\"Python\"))          # 25 (index of last occurrence)\nprint(text.startswith(\"Python\"))     # True\nprint(text.endswith(\"learn.\"))       # True\n\n# Replace methods\nnew_text = text.replace(\"Python\", \"JavaScript\")\nprint(new_text)  # \"JavaScript is amazing and JavaScript is easy to learn.\""
        },
        "Format Strings": {
          "description": "Methods for formatting strings with variables and expressions.",
          "details": "Python offers several ways to format strings: %-formatting, str.format(), and f-strings (formatted string literals). F-strings (introduced in Python 3.6) are the most concise and readable option. The format() method provides more control over formatting. %-formatting is the oldest method but still used in legacy code. Format specifiers control how values are displayed (width, precision, alignment, etc.).",
          "examples": "# Using f-strings (Python 3.6+)\nname = \"Alice\"\nage = 30\n\n# Basic f-string\ngreeting = f\"Hello, {name}! You are {age} years old.\"\nprint(greeting)  # \"Hello, Alice! You are 30 years old.\"\n\n# Expressions in f-strings\nprint(f\"{name} will be {age + 5} years old in 5 years.\")  # \"Alice will be 35 years old in 5 years.\"\n\n# Formatting in f-strings\npi = 3.14159\nprint(f\"Pi rounded to 2 decimal places: {pi:.2f}\")  # \"Pi rounded to 2 decimal places: 3.14\"\n\n# Alignment and padding\nprint(f\"{name:>10}\")  # Right-aligned: '     Alice'\nprint(f\"{name:<10}\")  # Left-aligned: 'Alice     '\nprint(f\"{name:^10}\")  # Center-aligned: '  Alice   '\""
        },
        "Escape Characters": {
          "description": "Special characters that are used to represent certain actions in strings.",
          "details": "Escape characters start with a backslash (\\) followed by a character. They allow including special characters in strings that would otherwise be difficult to include directly. Common escape sequences include \\n (newline), \\t (tab), \\\\ (backslash), \\' (single quote), and \\\" (double quote). Raw strings (prefixed with 'r') ignore escape characters. Unicode characters can be represented using \\u or \\U escape sequences.",
          "examples": "# Newline and tab\nprint(\"First line\\nSecond line\")  # Prints two lines\nprint(\"Name:\\tJohn\\tAge:\\t30\")  # Uses tabs for alignment\n\n# Quotes inside strings\nsingle_quote = 'I\\'m learning Python'  # Escaping single quote\ndouble_quote = \"He said, \\\"Hello!\\\"\"  # Escaping double quotes\n\n# Backslash\nfile_path = \"C:\\\\Users\\\\Username\\\\Documents\"  # Escaping backslashes\n\n# Using raw strings for paths (r prefix)\nraw_path = r\"C:\\Users\\Username\\Documents\"  # Backslashes are not escaped\n\n# Unicode characters using escape sequences\nprint(\"\\u03A0\")  # Greek capital letter Pi (Π)\nprint(\"\\u00A9\")  # Copyright symbol (©)\nprint(\"\\U0001F600\")  # Emoji: Grinning face (😀)"
        }
      },
      "Python Lists": {
        "Python Lists": {
          "description": "Ordered, mutable collections of items that can be of different types.",
          "details": "Lists are created using square brackets [] or the list() constructor. Lists are ordered, meaning items have a defined order that does not change. Lists are mutable, meaning they can be modified after creation. Lists can contain items of different data types, including other lists. Lists can be indexed and sliced like strings.",
          "examples": "# Empty list\nempty_list = []\nalso_empty = list()\n\n# List with values\nnumbers = [1, 2, 3, 4, 5]\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\n# List with mixed data types\nmixed = [1, \"Hello\", 3.14, True, [1, 2, 3]]\n\n# Creating a list using list comprehension\nsquares = [x**2 for x in range(1, 6)]  # [1, 4, 9, 16, 25]\n\n# Creating a list from other iterables\nstring_chars = list(\"Python\")  # ['P', 'y', 't', 'h', 'o', 'n']\nrange_list = list(range(5))    # [0, 1, 2, 3, 4]"
        },
        "List Indexes": {
          "description": "Methods to access individual elements or slices of lists.",
          "details": "List indices start at 0 for the first element. Negative indices count from the end of the list, with -1 referring to the last element. Lists can be sliced using the syntax [start:end:step]. IndexError is raised when trying to access an out-of-range index. Lists support nested indexing for accessing elements in nested lists.",
          "examples": "fruits = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\"]\n\n# Positive indexing (starts at 0)\nprint(fruits[0])  # \"apple\"\nprint(fruits[2])  # \"cherry\"\n\n# Negative indexing (starts at -1)\nprint(fruits[-1])  # \"kiwi\"\nprint(fruits[-3])  # \"cherry\"\n\n# Accessing elements in nested lists\nnested = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(nested[1][2])  # 6 (second list, third element)\n\n# Handling index errors\ntry:\n    print(fruits[10])  # This will raise an IndexError\nexcept IndexError as e:\n    print(f\"Error: {e}\")\n\n# List slicing\nfruits = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"mango\"]\n\n# Basic slicing [start:end] (end index is exclusive)\nprint(fruits[1:4])  # [\"banana\", \"cherry\", \"orange\"]\n\n# Omitting start index starts from beginning\nprint(fruits[:3])  # [\"apple\", \"banana\", \"cherry\"]\n\n# Omitting end index goes to the end\nprint(fruits[3:])  # [\"orange\", \"kiwi\", \"mango\"]\n\n# Negative indices in slices\nprint(fruits[-3:])  # [\"orange\", \"kiwi\", \"mango\"]\nprint(fruits[:-2])  # [\"apple\", \"banana\", \"cherry\", \"orange\"]\n\n# Step in slicing [start:end:step]\nprint(fruits[::2])  # [\"apple\", \"cherry\", \"kiwi\"] (every second item)\nprint(fruits[::-1])  # [\"mango\", \"kiwi\", \"orange\", \"cherry\", \"banana\", \"apple\"] (reversed)"
        },
        "Add List Items": {
          "description": "Methods to add items to lists.",
          "details": "append(): Adds a single item to the end of the list. insert(): Adds an item at a specified position. extend(): Adds multiple items from another iterable to the end of the list. Concatenation (+): Creates a new list by combining two lists. Lists can also be modified using slices and assignments.",
          "examples": "# Start with a list\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\n# append() - add a single item to the end\nfruits.append(\"orange\")\nprint(fruits)  # [\"apple\", \"banana\", \"cherry\", \"orange\"]\n\n# insert() - add an item at a specific position\nfruits.insert(1, \"mango\")  # Insert at index 1\nprint(fruits)  # [\"apple\", \"mango\", \"banana\", \"cherry\", \"orange\"]\n\n# extend() - add multiple items from an iterable\nmore_fruits = [\"kiwi\", \"grape\"]\nfruits.extend(more_fruits)\nprint(fruits)  # [\"apple\", \"mango\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"grape\"]\n\n# + operator - concatenate lists (creates a new list)\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist3 = list1 + list2\nprint(list3)  # [1, 2, 3, 4, 5, 6]\n\n# Using slice assignment to add items\nnumbers = [1, 2, 5, 6]\nnumbers[2:2] = [3, 4]  # Insert at index 2\nprint(numbers)  # [1, 2, 3, 4, 5, 6]"
        },
        "Remove List Items": {
          "description": "Methods to remove items from lists.",
          "details": "remove(): Removes the first occurrence of a specified value. pop(): Removes an item at a specified position and returns it. clear(): Removes all items from the list. del statement: Removes items or entire lists. Lists can also be modified using slices and assignments.",
          "examples": "# Start with a list\nfruits = [\"apple\", \"banana\", \"cherry\", \"apple\", \"orange\"]\n\n# remove() - removes the first occurrence of a value\nfruits.remove(\"apple\")\nprint(fruits)  # [\"banana\", \"cherry\", \"apple\", \"orange\"]\n\n# pop() - removes and returns an item at specified index\nfruit = fruits.pop(1)  # Remove item at index 1\nprint(fruit)  # \"cherry\"\nprint(fruits)  # [\"banana\", \"apple\", \"orange\"]\n\n# pop() without index - removes and returns the last item\nlast_fruit = fruits.pop()\nprint(last_fruit)  # \"orange\"\nprint(fruits)  # [\"banana\", \"apple\"]\n\n# del statement - removes an item at specified index\ncolors = [\"red\", \"green\", \"blue\", \"yellow\"]\ndel colors[2]  # Remove item at index 2\nprint(colors)  # [\"red\", \"green\", \"yellow\"]\n\n# del statement with slice - removes a range of items\nnumbers = [1, 2, 3, 4, 5, 6]\ndel numbers[1:4]  # Remove items from index 1 to 3\nprint(numbers)  # [1, 5, 6]\n\n# clear() - removes all items from the list\ncolors.clear()\nprint(colors)  # []"
        },
        "Change List Items": {
          "description": "Methods to modify existing items in lists.",
          "details": "Individual items can be modified using their index. Multiple items can be modified using slicing. List operations like sort() and reverse() modify the list in-place. Assignment operations (+=, *=) can modify lists. List comprehensions can be used to create modified copies of lists.",
          "examples": "# Modifying individual items\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfruits[1] = \"mango\"  # Change the second item\nprint(fruits)  # [\"apple\", \"mango\", \"cherry\"]\n\n# Modifying multiple items using slicing\nnumbers = [1, 2, 3, 4, 5]\nnumbers[1:4] = [20, 30, 40]  # Replace items at indices 1, 2, and 3\nprint(numbers)  # [1, 20, 30, 40, 5]\n\n# Modifying with a different number of items\nletters = ['a', 'b', 'c', 'd', 'e']\nletters[1:4] = ['B']  # Replace 3 items with 1\nprint(letters)  # ['a', 'B', 'e']\n\n# Modifying lists in-place\nnumbers = [3, 1, 4, 1, 5, 9]\nnumbers.sort()  # Sort in ascending order\nprint(numbers)  # [1, 1, 3, 4, 5, 9]\n\nnumbers.reverse()  # Reverse the list\nprint(numbers)  # [9, 5, 4, 3, 1, 1]"
        },
        "List Comprehension": {
          "description": "A concise way to create new lists based on existing iterables.",
          "details": "List comprehensions provide a shorter syntax to create lists from other sequences. Basic syntax: [expression for item in iterable]. Conditional syntax: [expression for item in iterable if condition]. Nested syntax: [expression for item1 in iterable1 for item2 in iterable2]. List comprehensions are often more readable and faster than equivalent for loops.",
          "examples": "# Creating a list of squares\nsquares = [x**2 for x in range(1, 6)]\nprint(squares)  # [1, 4, 9, 16, 25]\n\n# Converting a list of strings to uppercase\nfruits = [\"apple\", \"banana\", \"cherry\"]\nuppercase_fruits = [fruit.upper() for fruit in fruits]\nprint(uppercase_fruits)  # [\"APPLE\", \"BANANA\", \"CHERRY\"]\n\n# Creating a list of tuples\ncoordinates = [(x, y) for x in range(1, 3) for y in range(1, 3)]\nprint(coordinates)  # [(1, 1), (1, 2), (2, 1), (2, 2)]\n\n# Filtering even numbers\neven_numbers = [x for x in range(1, 11) if x % 2 == 0]\nprint(even_numbers)  # [2, 4, 6, 8, 10]\n\n# Filtering and transforming\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nodd_squares = [x**2 for x in numbers if x % 2 != 0]\nprint(odd_squares)  # [1, 9, 25, 49, 81]\n\n# Conditional expressions in list comprehensions\nnumbers = [1, 2, 3, 4, 5]\nresult = [x if x % 2 == 0 else -x for x in numbers]\nprint(result)  # [-1, 2, -3, 4, -5]\n\n# Flattening a 2D matrix\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflattened = [num for row in matrix for num in row]\nprint(flattened)  # [1, 2, 3, 4, 5, 6, 7, 8, 9]"
        },
        "List Methods": {
          "description": "Built-in methods for manipulating and working with lists.",
          "details": "append(), extend(), insert(): Add items to a list. remove(), pop(), clear(): Remove items from a list. index(), count(): Find items in a list. sort(), reverse(): Change the order of items. copy(): Create a shallow copy of a list.",
          "examples": "fruits = [\"apple\", \"banana\", \"cherry\"]\n\n# Adding items\nfruits.append(\"orange\")  # Add an item to the end\nfruits.insert(1, \"mango\")  # Insert an item at position 1\nfruits.extend([\"kiwi\", \"grape\"])  # Add multiple items\nprint(fruits)  # ['apple', 'mango', 'banana', 'cherry', 'orange', 'kiwi', 'grape']\n\n# Removing items\nfruits.remove(\"banana\")  # Remove the first occurrence of a value\nlast_fruit = fruits.pop()  # Remove and return the last item\nthird_fruit = fruits.pop(2)  # Remove and return item at index 2\nprint(fruits)  # ['apple', 'mango', 'orange', 'kiwi']\n\n# Clear all items\nfruits.clear()\nprint(fruits)  # []\n\n# count() and index() methods\nnumbers = [1, 2, 3, 2, 4, 2, 5]\ncount_twos = numbers.count(2)  # 3\nfirst_two_index = numbers.index(2)  # 1\nsecond_two_index = numbers.index(2, 2, 6)  # 3\n\n# sorting and reversing\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6]\nnumbers.sort()  # [1, 1, 2, 3, 4, 5, 6, 9]\nnumbers.sort(reverse=True)  # [9, 6, 5, 4, 3, 2, 1, 1]\n\n# copying lists\noriginal = [1, 2, [3, 4]]\ncopy1 = original.copy()  # shallow copy\ncopy2 = list(original)  # shallow copy\ncopy3 = original[:]  # shallow copy"
        }
      },
      "Python Tuples": {
        "Python Tuples": {
          "description": "Ordered, immutable collections of items that can be of different types.",
          "details": "Tuples are created using parentheses () or the tuple() constructor. Tuples are ordered, meaning items have a defined order that does not change. Tuples are immutable, meaning they cannot be modified after creation. Tuples can contain items of different data types, including other tuples. Tuples are generally faster than lists and can be used as dictionary keys.",
          "examples": "# Empty tuple\nempty_tuple = ()\nalso_empty = tuple()\n\n# Tuple with values\nnumbers = (1, 2, 3, 4, 5)\nfruits = (\"apple\", \"banana\", \"cherry\")\n\n# Tuple with mixed data types\nmixed = (1, \"Hello\", 3.14, True, (1, 2, 3))\n\n# A single-item tuple requires a trailing comma\nsingle_item = (42,)  # This is a tuple\nnot_a_tuple = (42)   # This is an integer\n\n# Creating a tuple without parentheses (tuple packing)\ncoordinates = 10.5, 20.5, 30.5\nprint(coordinates)  # (10.5, 20.5, 30.5)\n\n# Creating a tuple from other iterables\nstring_chars = tuple(\"Python\")  # ('P', 'y', 't', 'h', 'o', 'n')\nrange_tuple = tuple(range(5))    # (0, 1, 2, 3, 4)"
        },
        "Tuple Indexes": {
          "description": "Methods to access individual elements or slices of tuples.",
          "details": "Tuple indices start at 0 for the first element. Negative indices count from the end of the tuple, with -1 referring to the last element. Tuples can be sliced using the syntax [start:end:step], just like lists. IndexError is raised when trying to access an out-of-range index. Tuples support nested indexing for accessing elements in nested tuples.",
          "examples": "fruits = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\")\n\n# Positive indexing (starts at 0)\nprint(fruits[0])  # \"apple\"\nprint(fruits[2])  # \"cherry\"\n\n# Negative indexing (starts at -1)\nprint(fruits[-1])  # \"kiwi\"\nprint(fruits[-3])  # \"cherry\"\n\n# Accessing elements in nested tuples\nnested = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(nested[1][2])  # 6 (second tuple, third element)\n\n# Handling index errors\ntry:\n    print(fruits[10])  # This will raise an IndexError\nexcept IndexError as e:\n    print(f\"Error: {e}\")"
        },
        "Manipulating Tuples": {
          "description": "Methods to work with tuples despite their immutability.",
          "details": "Tuples cannot be modified after creation (immutable). To \"change\" a tuple, you need to create a new tuple. Tuples can be concatenated using the + operator. Tuples can be repeated using the * operator. Tuples can be converted to lists, modified, and then converted back to tuples.",
          "examples": "# Since tuples are immutable, you can't modify them like lists\ntuple1 = (1, 2, 3)\n\n# The following would raise a TypeError\n# tuple1[0] = 10\n\n# Concatenating tuples (creates a new tuple)\ntuple2 = (4, 5, 6)\ncombined = tuple1 + tuple2\nprint(combined)  # (1, 2, 3, 4, 5, 6)\n\n# Repeating tuples (creates a new tuple)\nrepeated = tuple1 * 3\nprint(repeated)  # (1, 2, 3, 1, 2, 3, 1, 2, 3)\n\n# Converting to list, modifying, and converting back to tuple\nmy_list = list(tuple1)\nmy_list[0] = 10\nmy_list.append(4)\nmodified_tuple = tuple(my_list)\nprint(modified_tuple)  # (10, 2, 3, 4)"
        },
        "Unpack Tuples": {
          "description": "Assigning individual tuple items to variables.",
          "details": "Tuple unpacking assigns each item in a tuple to a variable. The number of variables must match the number of items in the tuple. You can use the * operator to collect multiple values into a single variable. Tuple unpacking works in for loops and function returns. Tuple unpacking can be used for swapping variables without a temporary variable.",
          "examples": "# Unpacking a tuple into individual variables\ncoordinates = (10.5, 20.5)\nx, y = coordinates\nprint(x)  # 10.5\nprint(y)  # 20.5\n\n# Unpacking more values\nperson = (\"John\", \"Doe\", 30, \"New York\")\nfirst_name, last_name, age, city = person\nprint(f\"{first_name} {last_name} is {age} years old and lives in {city}.\")\n\n# Unpacking with the * operator\nnumbers = (1, 2, 3, 4, 5)\nfirst, *middle, last = numbers\nprint(first)   # 1\nprint(middle)  # [2, 3, 4]\nprint(last)    # 5\n\n# Swapping variables using tuple unpacking\na = 5\nb = 10\na, b = b, a  # Swap values\nprint(a)  # 10\nprint(b)  # 5"
        }
      },
      "Python Sets": {
        "description": "An unordered collection of unique elements.",
        "Creating Sets": {
          "description": "Methods to create Python sets.",
          "details": "Sets are created using curly braces {} or the set() constructor. Sets only contain unique elements. Empty sets must be created using the set() constructor as {} would create an empty dictionary.",
          "examples": "# Creating a set using curly braces\nmy_set = {\"apple\", \"banana\", \"cherry\"}\n\n# Creating a set using set() constructor\nmy_set2 = set([\"apple\", \"banana\", \"cherry\"])\n\n# Creating an empty set (must use the constructor)\nempty_set = set()  # Empty dict would be: {}"
        },
        "Add/Remove Set Items": {
          "description": "Methods to modify sets by adding or removing elements.",
          "details": "add(): Adds a single item to the set. update(): Adds multiple items from another iterable to the set. remove(): Removes a specified item, raising a KeyError if the item is not present. discard(): Removes a specified item if present, without raising an error if the item is not found. pop(): Removes and returns a random item from the set.",
          "examples": "# Adding items to a set\nfruits = {\"apple\", \"banana\", \"cherry\"}\n\n# add() - add a single item\nfruits.add(\"orange\")\nprint(fruits) # {'apple', 'banana', 'cherry', 'orange'}\n\n# Adding a duplicate item (has no effect)\nfruits.add(\"apple\")\nprint(fruits) # {'apple', 'banana', 'cherry', 'orange'}\n\n# update() - add multiple items from iterables\nfruits.update([\"mango\", \"kiwi\"], {\"grape\", \"pineapple\"})\nprint(fruits) # {'apple', 'banana', 'cherry', 'orange', 'mango', 'kiwi', 'grape', 'pineapple'}\n\n# Removing items from sets\nfruits = {\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\"}\n\n# remove() - removes a specified item\nfruits.remove(\"banana\")\nprint(fruits) # {'apple', 'cherry', 'orange', 'kiwi'}\n\n# discard() - removes a specified item if present\nfruits.discard(\"cherry\")\nprint(fruits) # {'apple', 'orange', 'kiwi'}"
        },
        "Join Sets": {
          "description": "Methods to combine sets or find their differences.",
          "details": "union(): Returns a new set containing all items from both sets. update(): Updates the set with all items from another set. intersection(): Returns a new set containing only items in both sets. difference(): Returns a new set with items only in the first set. symmetric_difference(): Returns a new set with items in either set but not in both.",
          "examples": "# Set operations\nset1 = {\"a\", \"b\", \"c\"}\nset2 = {\"c\", \"d\", \"e\"}\n\n# Union - all elements from both sets\nunion_set = set1.union(set2)  # or set1 | set2\nprint(union_set)  # {'a', 'b', 'c', 'd', 'e'}\n\n# Intersection - elements common to both sets\nintersection_set = set1.intersection(set2)  # or set1 & set2\nprint(intersection_set)  # {'c'}\n\n# Difference - elements in first set but not in second\ndifference_set = set1.difference(set2)  # or set1 - set2\nprint(difference_set)  # {'a', 'b'}\n\n# Symmetric difference - elements in either set but not in both\nsym_diff_set = set1.symmetric_difference(set2)  # or set1 ^ set2\nprint(sym_diff_set)  # {'a', 'b', 'd', 'e'}"
        },
        "Set Methods": {
          "description": "Built-in methods for manipulating and working with sets.",
          "details": "add(): Adds an element to the set. clear(): Removes all elements from the set. copy(): Returns a copy of the set. difference(): Returns the difference of two or more sets. difference_update(): Removes all elements of another set from this set. discard(): Removes an element from the set if it is a member. intersection(): Returns the intersection of two sets. intersection_update(): Updates the set with the intersection of itself and another. isdisjoint(): Returns whether two sets have a null intersection. issubset(): Returns whether another set contains this set. issuperset(): Returns whether this set contains another set. pop(): Removes and returns an arbitrary set element. remove(): Removes an element from the set. symmetric_difference(): Returns the symmetric difference of two sets. symmetric_difference_update(): Updates the set with the symmetric difference of itself and another. union(): Returns the union of sets. update(): Updates the set with the union of itself and others.",
          "examples": "# Set method examples\nset_a = {1, 2, 3, 4, 5}\nset_b = {4, 5, 6, 7, 8}\n\n# Difference operations\ndiff = set_a.difference(set_b)  # {1, 2, 3}\nset_a.difference_update(set_b)  # set_a is now {1, 2, 3}\n\n# Checking subset/superset\nset_c = {1, 2}\nprint(set_c.issubset(set_a))  # True\nprint(set_a.issuperset(set_c))  # True\n\n# Checking disjoint sets\nprint(set_a.isdisjoint(set_b))  # True - no common elements\n\n# Union and intersection\nunion_result = set_a.union(set_b)  # {1, 2, 3, 4, 5, 6, 7, 8}\nintersection_result = set_a.intersection(set_b)  # {}"
        }
      },
      "Python Dictionaries": {
        "description": "Dictionaries are used to store data values in key:value pairs.",
        "Python Dictionaries": {
          "description": "A dictionary is a collection which is ordered (as of Python 3.7), changeable and does not allow duplicates.",
          "details": "Dictionaries are created using curly braces with key:value pairs. Each key is separated from its value by a colon. Keys must be unique and immutable (strings, numbers, or tuples). Values can be of any data type.",
          "examples": "# Creating a dictionary\nperson = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\n\n# Using dict() constructor\nperson2 = dict(name=\"John\", age=30, city=\"New York\")\n\n# Dictionary with mixed keys\nmixed_dict = {\n    \"string_key\": \"value\",\n    1: \"numeric key\",\n    (\"tuple\", \"key\"): \"using tuple as key\"\n}"
        },
        "Access Items": {
          "description": "How to access dictionary items.",
          "details": "Dictionary items are accessed by using square bracket notation with the key. The get() method can also be used, which returns None or a default value if the key doesn't exist. The keys(), values(), and items() methods return dictionary views.",
          "examples": "person = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\n\n# Access using key\nprint(person[\"name\"])  # John\n\n# Using get() method (safer, returns None or default if key doesn't exist)\nprint(person.get(\"age\"))  # 30\nprint(person.get(\"country\", \"USA\"))  # USA (default value)\n\n# Access keys, values, and items\nprint(person.keys())  # dict_keys(['name', 'age', 'city'])\nprint(person.values())  # dict_values(['John', 30, 'New York'])\nprint(person.items())  # dict_items([('name', 'John'), ('age', 30), ('city', 'New York')])\n\n# Check if key exists\nif \"name\" in person:\n    print(\"Name exists\")"
        },
        "Add/Remove Items": {
          "description": "How to modify dictionary contents.",
          "details": "Items can be added or modified using the assignment operator with a key. The update() method can add or change multiple items at once. Items can be removed using pop(), popitem(), or del.",
          "examples": "person = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\n\n# Adding or changing items\nperson[\"email\"] = \"john@example.com\"  # Add new key-value pair\nperson[\"age\"] = 31  # Change existing value\n\n# Update multiple items at once\nperson.update({\"country\": \"USA\", \"age\": 32})\n\n# Removing items\nremoved_value = person.pop(\"age\")  # Removes key and returns value\nprint(f\"Removed: {removed_value}\")  # Removed: 32\n\n# Remove and return last inserted item (Python 3.7+)\nlast_item = person.popitem()\nprint(last_item)  # ('country', 'USA')\n\n# Delete a specific key\ndel person[\"city\"]\n\n# Clear entire dictionary\nperson.clear()"
        },
        "Copy Dictionaries": {
          "description": "Ways to copy dictionaries in Python.",
          "details": "Simple assignment creates a reference, not a copy. Shallow copies can be created using copy() or dict(). For nested dictionaries, a deep copy can be created using the copy module.",
          "examples": "original = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\n\n# Wrong way (creates reference)\nwrong_copy = original  # Changes to wrong_copy affect original\n\n# Shallow copy using copy()\nshallow_copy = original.copy()\n\n# Shallow copy using dict()\nshallow_copy2 = dict(original)\n\n# Deep copy (for nested dictionaries)\nimport copy\ndeep_copy = copy.deepcopy(original)"
        }
      },
      "Conditional Statements": {
        "description": "Control flow statements that execute different code based on conditions.",
        "if Statement": {
          "description": "Executes a block of code if a condition is true.",
          "details": "The if statement evaluates a condition and executes a block of code only if the condition is True. It can use comparison operators (==, !=, >, <, >=, <=) and logical operators (and, or, not).",
          "examples": "# Basic if statement\nx = 10\n\nif x > 5:\n    print(\"x is greater than 5\")\n    \n# Using comparison operators\n# == (equal), != (not equal), > (greater than), < (less than),\n# >= (greater than or equal), <= (less than or equal)\n\nage = 18\nif age >= 18:\n    print(\"You are an adult\")\n    \n# Using logical operators\n# and, or, not\n\ntemperature = 25\nif temperature > 20 and temperature < 30:\n    print(\"Temperature is comfortable\")"
        },
        "if-else Statement": {
          "description": "Executes one block if condition is true, another if false.",
          "details": "The if-else statement provides an alternative execution path when the condition is False. Python also supports a ternary operator format for simple if-else expressions.",
          "examples": "# Basic if-else\nx = 3\n\nif x > 5:\n    print(\"x is greater than 5\")\nelse:\n    print(\"x is less than or equal to 5\")\n    \n# Ternary operator (one-line if-else)\nage = 15\nstatus = \"Adult\" if age >= 18 else \"Minor\"\nprint(status)  # Minor"
        },
        "elif Statement": {
          "description": "Checks multiple conditions in sequence.",
          "details": "The elif (else if) statement allows checking multiple conditions in sequence. Python evaluates conditions from top to bottom and executes the block associated with the first True condition.",
          "examples": "# if-elif-else chain\nscore = 85\n\nif score >= 90:\n    grade = \"A\"\nelif score >= 80:\n    grade = \"B\"\nelif score >= 70:\n    grade = \"C\"\nelif score >= 60:\n    grade = \"D\"\nelse:\n    grade = \"F\"\n    \nprint(f\"Your grade is {grade}\")  # Your grade is B"
        },
        "Nested if Statement": {
          "description": "if statements inside other if statements.",
          "details": "Nested if statements are if statements placed inside other if statements. They allow for more complex condition checking and can be used to create hierarchical decision structures.",
          "examples": "# Nested if statements\nx = 10\ny = 5\n\nif x > 0:\n    print(\"x is positive\")\n    \n    if y > 0:\n        print(\"y is also positive\")\n    else:\n        print(\"y is not positive\")\nelse:\n    print(\"x is not positive\")"
        }
      },
      "Python Loops": {
        "description": "Statements used to repeatedly execute a block of code.",
        "Python for Loop": {
          "description": "Iterates over a sequence (list, tuple, dictionary, set, or string).",
          "details": "The for loop in Python is used to iterate over a sequence of items such as lists, tuples, dictionaries, sets, or strings. It can also iterate over numeric sequences using the range() function.",
          "examples": "# Iterating over a list\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n\n# Iterating over a string\nfor char in \"Python\":\n    print(char)\n    \n# Using range\nfor i in range(5):  # 0 to 4\n    print(i)\n    \n# Using range with start and end\nfor i in range(2, 6):  # 2 to 5\n    print(i)\n    \n# Using range with step\nfor i in range(1, 10, 2):  # 1, 3, 5, 7, 9\n    print(i)\n    \n# Iterating over a dictionary\nperson = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\n\n# Iterate over keys (default)\nfor key in person:\n    print(key)\n    \n# Iterate over values\nfor value in person.values():\n    print(value)\n    \n# Iterate over key-value pairs\nfor key, value in person.items():\n    print(f\"{key}: {value}\")"
        },
        "Python while Loop": {
          "description": "Executes a block of code as long as a condition is true.",
          "details": "The while loop executes a set of statements as long as a condition is true. It's important to ensure the condition eventually becomes false to avoid infinite loops.",
          "examples": "# Basic while loop\ncount = 0\nwhile count < 5:\n    print(count)\n    count += 1  # Don't forget to update the condition variable!\n    \n# while loop with else clause\ncount = 0\nwhile count < 5:\n    print(count)\n    count += 1\nelse:\n    print(\"Count reached 5\")\n    \n# Using break to exit the loop\ncount = 0\nwhile True:  # Infinite loop\n    print(count)\n    count += 1\n    if count >= 5:\n        break  # Exit the loop when count reaches 5"
        },
        "Nested Loops": {
          "description": "Loops inside other loops.",
          "details": "Nested loops are loops inside another loop. The inner loop is executed completely for each iteration of the outer loop. They are useful for working with multi-dimensional data or when multiple levels of iteration are needed.",
          "examples": "# Nested for loops\nfor i in range(3):  # Outer loop\n    for j in range(3):  # Inner loop\n        print(f\"({i}, {j})\")\n        \n# Creating a multiplication table\nfor i in range(1, 5):\n    for j in range(1, 5):\n        print(f\"{i} × {j} = {i*j}\")\n    print(\"---\")"
        },
        "Control Statements": {
          "description": "Statements that change the loop execution from its normal sequence.",
          "details": "Control statements modify the flow of loops. 'break' exits the loop completely, 'continue' skips the current iteration and proceeds to the next, and 'pass' is a placeholder that does nothing but allows the code to be syntactically correct.",
          "examples": "# break - exits the loop entirely\nfor i in range(10):\n    if i == 5:\n        break  # Exit loop when i equals 5\n    print(i)  # Prints 0, 1, 2, 3, 4\n\n# continue - skips the current iteration\nfor i in range(10):\n    if i % 2 == 0:\n        continue  # Skip even numbers\n    print(i)  # Prints 1, 3, 5, 7, 9\n    \n# pass - does nothing, used as a placeholder\nfor i in range(5):\n    if i == 2:\n        pass  # Do nothing special for i=2\n    print(i)  # Prints all numbers 0 through 4"
        }
      },
      "Python Functions": {
        "description": "A block of code that runs only when it is called.",
        "Python Functions": {
          "description": "How to define and call functions in Python.",
          "details": "Functions are defined using the def keyword followed by a name and parentheses. They can include a docstring that describes the function's purpose. Functions help in organizing code, making it reusable and easier to maintain.",
          "examples": "# Defining a function\ndef greet():\n    print(\"Hello, world!\")\n\n# Calling a function\ngreet()\n\n# Function with a docstring\ndef square(n):\n    \"\"\"Return the square of a number.\"\"\"\n    return n * n\n\n# Accessing the docstring\nprint(square.__doc__)\n\n# Function with parameters\ndef greet_person(name):\n    print(f\"Hello, {name}!\")\n    \ngreet_person(\"Alice\")  # Hello, Alice!"
        },
        "Function Arguments": {
          "description": "Different ways to pass arguments to functions.",
          "details": "Python offers various ways to specify function arguments: default parameters, keyword arguments, variable-length argument lists (*args), and variable-length keyword argument dictionaries (**kwargs). These options provide flexibility when designing function interfaces.",
          "examples": "# Default parameter values\ndef greet(name, message=\"Hello\"):\n    print(f\"{message}, {name}!\")\n    \ngreet(\"Alice\")  # Hello, Alice!\ngreet(\"Bob\", \"Hi\")  # Hi, Bob!\n\n# Keyword arguments\ndef describe_person(name, age, city):\n    print(f\"{name} is {age} years old and lives in {city}\")\n    \ndescribe_person(name=\"Alice\", age=30, city=\"New York\")\ndescribe_person(city=\"Chicago\", name=\"Bob\", age=25)  # Order doesn't matter with keyword args\n\n# Arbitrary number of positional arguments (*args)\ndef sum_all(*numbers):\n    result = 0\n    for num in numbers:\n        result += num\n    return result\n    \nprint(sum_all(1, 2, 3, 4, 5))  # 15\n\n# Arbitrary number of keyword arguments (**kwargs)\ndef print_info(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n        \nprint_info(name=\"Alice\", age=30, job=\"Developer\", country=\"USA\")"
        },
        "return Statement": {
          "description": "How to return values from functions.",
          "details": "The return statement exits a function and returns a value to the caller. Functions can return single values, multiple values (as tuples), or complex data structures like lists or dictionaries. If no return statement is specified, the function returns None by default.",
          "examples": "# Returning a single value\ndef square(n):\n    return n * n\n    \nresult = square(5)\nprint(result)  # 25\n\n# Returning multiple values (as a tuple)\ndef get_min_max(numbers):\n    return min(numbers), max(numbers)\n    \nmin_value, max_value = get_min_max([1, 5, 3, 9, 2])\nprint(f\"Min: {min_value}, Max: {max_value}\")  # Min: 1, Max: 9\n\n# Returning a dictionary\ndef get_person_info(name, age, city):\n    return {\n        \"name\": name,\n        \"age\": age,\n        \"city\": city\n    }\n    \nperson = get_person_info(\"Alice\", 30, \"New York\")\nprint(person)"
        },
        "Python Recursion": {
          "description": "A function that calls itself.",
          "details": "Recursion is a programming technique where a function calls itself to solve a problem. Every recursive function needs at least one base case to prevent infinite recursion. Recursive functions are particularly useful for problems that can be broken down into similar subproblems.",
          "examples": "# Factorial using recursion\ndef factorial(n):\n    if n == 0 or n == 1:  # Base case\n        return 1\n    else:  # Recursive case\n        return n * factorial(n-1)\n        \nprint(factorial(5))  # 120 (5 × 4 × 3 × 2 × 1)\n\n# Fibonacci sequence using recursion\ndef fibonacci(n):\n    if n <= 1:  # Base case\n        return n\n    else:  # Recursive case\n        return fibonacci(n-1) + fibonacci(n-2)\n        \nfor i in range(10):\n    print(fibonacci(i), end=\" \")  # 0 1 1 2 3 5 8 13 21 34"
        }
      },
      "Python Modules": {
        "description": "A file containing Python code that can be imported and used in another Python file.",
        "Python Modules": {
          "description": "How to create, import, and use modules in Python.",
          "details": "Modules are files containing Python code that can be imported into other Python scripts. They help organize related code into manageable units and enable code reuse. Python comes with many built-in modules, and you can also create your own custom modules.",
          "examples": "# Importing an entire module\nimport math\nprint(math.sqrt(16))  # 4.0\n\n# Importing specific functions from a module\nfrom math import sqrt, pi\nprint(sqrt(16))  # 4.0\nprint(pi)  # 3.141592653589793\n\n# Importing with an alias\nimport math as m\nprint(m.sqrt(16))  # 4.0\n\n# Importing all functions (not recommended)\nfrom math import *\nprint(sqrt(16))  # 4.0\n\n# Creating a module\n# Save this as my_module.py\ndef greet(name):\n    return f\"Hello, {name}!\"\n    \nPI = 3.14159\n\n# Using the custom module\n# In another file:\n# import my_module\n# print(my_module.greet(\"Alice\"))  # Hello, Alice!\n# print(my_module.PI)  # 3.14159\n\n# Built-in modules\nimport random\nprint(random.randint(1, 10))  # Random integer between 1 and 10\n\nimport datetime\nprint(datetime.datetime.now())  # Current date and time"
        },
        "Python Packages": {
          "description": "A directory containing multiple module files with a special __init__.py file.",
          "details": "Packages are a way of organizing related modules into a directory hierarchy. A package is a directory that contains a special __init__.py file (which can be empty) and one or more module files. Packages can also contain subpackages, creating a hierarchical structure for more complex code organization.",
          "examples": "# Package structure example\n# my_package/\n#   __init__.py\n#   module1.py\n#   module2.py\n#   subpackage/\n#     __init__.py\n#     module3.py\n\n# Importing from a package\n# import my_package.module1\n# from my_package import module2\n# from my_package.subpackage import module3\n\n# Installing packages with pip\n# pip install package_name\n\n# Common Python packages\nimport os  # Operating system interfaces\nprint(os.getcwd())  # Current working directory\n\nimport sys  # System-specific parameters and functions\nprint(sys.version)  # Python version\n\n# Third-party packages\n# import numpy as np\n# import pandas as pd\n# import matplotlib.pyplot as plt"
        }
      },
      "Python OOPS": {
        "OOPS": "Object-Oriented Programming in Python.\n\n   title: Python OOPS\n\n  description: Classes and objects in Python.\n\n  code: # Defining a class\nclass Person:\n    # Class attribute (shared by all instances)\n    species = \"Homo sapiens\"\n    \n    # Initialize method (constructor)\n    def __init__(self, name, age):\n        # Instance attributes (unique to each instance)\n        self.name = name\n        self.age = age\n    \n    # Instance method\n    def describe(self):\n        return f\"{self.name} is {self.age} years old\"\n    \n    # Instance method\n    def greet(self, message=\"Hello\"):\n        return f\"{message}, my name is {self.name}\"\n        \n    # Class method (works with class attributes)\n    @classmethod\n    def get_species(cls):\n        return cls.species\n        \n    # Static method (doesn't access class or instance attributes)\n    @staticmethod\n    def is_adult(age):\n        return age >= 18\n\n# Creating objects (instances of the class)\nperson1 = Person(\"Alice\", 30)\nperson2 = Person(\"Bob\", 25)\n\n# Accessing attributes\nprint(person1.name)  # Alice\nprint(person1.species)  # Homo sapiens\nprint(Person.species)  # Homo sapiens\n\n# Calling methods\nprint(person1.describe())  # Alice is 30 years old\nprint(person1.greet())  # Hello, my name is Alice\nprint(Person.get_species())  # Homo sapiens\nprint(Person.is_adult(20))  # True \n\n   title: self method\n\n  description: The self parameter is a reference to the current instance of the class.\n\n  code: class Car:\n    def __init__(self, brand, model):\n        # self refers to the current instance\n        self.brand = brand  # instance attribute\n        self.model = model  # instance attribute\n        self.speed = 0      # default value\n    \n    def accelerate(self, increment):\n        # self is used to access instance attributes\n        self.speed += increment\n        return self.speed\n    \n    def brake(self, decrement):\n        # self is used to call other instance methods\n        current_speed = self.speed\n        self.speed = max(0, self.speed - decrement)\n        return f\"Slowed down from {current_speed} to {self.speed}\"\n\nmy_car = Car(\"Toyota\", \"Corolla\")\nprint(f\"{my_car.brand} {my_car.model}\")  # Toyota Corolla\nprint(my_car.accelerate(20))  # 20\nprint(my_car.accelerate(10))  # 30\nprint(my_car.brake(15))  # Slowed down from 30 to 15 ,\n\n   title: __init__ method\n\n  description: The constructor method that is called when an object is created.\n\n  code: class Rectangle:\n    def __init__(self, length, width):\n        # Initialize attributes\n        self.length = length\n        self.width = width\n        # Calculate and store derived attributes\n        self.area = length * width\n        self.perimeter = 2 * (length + width)\n    \n    def __str__(self):\n        # String representation of the object\n        return f\"Rectangle(length={self.length}, width={self.width})\"\n    \n    def __repr__(self):\n        # Official representation of the object\n        return f\"Rectangle({self.length}, {self.width})\"\n\nrect = Rectangle(5, 3)\nprint(rect.length)  # 5\nprint(rect.width)  # 3\nprint(rect.area)  # 15\nprint(rect.perimeter)  # 16\nprint(rect)  # Rectangle(length=5, width=3)"
      },
      "Advanced Topics": {
        "description": "More advanced Python concepts and features.",
        "topics": {
          "Lambda Functions": {
            "description": "Small anonymous functions defined with the lambda keyword.",
            "code": "# Regular function\ndef square(x):\n    return x**2\n\n# Equivalent lambda function\nsquare_lambda = lambda x: x**2\n\nprint(square(5))       # 25\nprint(square_lambda(5)) # 25\n\n# Lambda functions with multiple arguments\nsum_lambda = lambda x, y: x + y\nprint(sum_lambda(3, 4))  # 7\n\n# Lambda functions with sorted(), filter(), map()\nnumbers = [5, 2, 8, 1, 3]\n\n# Sort using a key function\nsorted_numbers = sorted(numbers, key=lambda x: x)\nprint(sorted_numbers)  # [1, 2, 3, 5, 8]\n\n# Filter elements\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\nprint(even_numbers)  # [2, 8]\n\n# Map elements to new values\nsquared_numbers = list(map(lambda x: x**2, numbers))\nprint(squared_numbers)  # [25, 4, 64, 1, 9]"
          },
          "List Comprehensions": {
            "description": "Concise way to create lists based on existing lists.",
            "code": "# Traditional way\nsquares = []\nfor i in range(1, 6):\n    squares.append(i**2)\nprint(squares)  # [1, 4, 9, 16, 25]\n\n# Equivalent list comprehension\nsquares = [i**2 for i in range(1, 6)]\nprint(squares)  # [1, 4, 9, 16, 25]\n\n# List comprehension with condition\neven_squares = [i**2 for i in range(1, 11) if i % 2 == 0]\nprint(even_squares)  # [4, 16, 36, 64, 100]\n\n# Nested list comprehension\nmatrix = [[j for j in range(3)] for i in range(3)]\nprint(matrix)  # [[0, 1, 2], [0, 1, 2], [0, 1, 2]]\n\n# Dictionary comprehension\nsquare_dict = {i: i**2 for i in range(1, 6)}\nprint(square_dict)  # {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n\n# Set comprehension\nsquare_set = {i**2 for i in range(1, 6)}\nprint(square_set)  # {1, 4, 9, 16, 25}"
          },
          "Exception Handling": {
            "description": "How to handle errors in Python.",
            "code": "# Basic try-except\ntry:\n    result = 10 / 0  # This will raise a ZeroDivisionError\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\n\n# Multiple except blocks\ntry:\n    num = int(\"abc\")  # This will raise a ValueError\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\nexcept ValueError:\n    print(\"Invalid value for conversion!\")\n\n# Catching multiple exceptions\ntry:\n    # Some code that might raise exceptions\n    pass\nexcept (ValueError, TypeError) as e:\n    print(f\"Error: {e}\")\n\n# try-except-else-finally\ntry:\n    num = int(\"123\")\nexcept ValueError:\n    print(\"Invalid value!\")\nelse:\n    # Runs if no exception occurs\n    print(f\"Converted successfully: {num}\")\nfinally:\n    # Always runs, regardless of exception\n    print(\"End of try-except block\")\n\n# Raising exceptions\ndef divide(a, b):\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return a / b\n\ntry:\n    result = divide(10, 0)\nexcept ValueError as e:\n    print(e)  # Cannot divide by zero"
          },
          "Python Iterators": {
            "description": "Objects that can be iterated (looped) upon, implementing __iter__() and __next__() methods.",
            "details": "Iterator is an object that contains a countable number of values.\nIterator is an object that can be iterated upon, meaning you can traverse through all the values.\nTechnically, an iterator object must implement the iterator protocol, which consists of the methods __iter__() and __next__().",
            "code": "# Using iterators with built-in functions\nmy_list = [1, 2, 3, 4, 5]\n\n# Create an iterator from a list\niter_obj = iter(my_list)\n\n# Access elements using next()\nprint(next(iter_obj))  # 1\nprint(next(iter_obj))  # 2\nprint(next(iter_obj))  # 3\n\n# StopIteration exception is raised when no more elements\ntry:\n    for _ in range(10):\n        print(next(iter_obj))\nexcept StopIteration:\n    print(\"No more elements\")\n\n# Creating a custom iterator class\nclass PowersOfTwo:\n    \"\"\"Iterator that yields powers of two\"\"\"\n    \n    def __init__(self, max_exponent):\n        self.max_exponent = max_exponent\n        self.exponent = 0\n    \n    def __iter__(self):\n        # Return the iterator object itself\n        self.exponent = 0\n        return self\n    \n    def __next__(self):\n        # Return the next value in the sequence\n        if self.exponent <= self.max_exponent:\n            result = 2 ** self.exponent\n            self.exponent += 1\n            return result\n        else:\n            # End of iteration\n            raise StopIteration\n\n# Using our custom iterator\npowers = PowersOfTwo(5)\nfor power in powers:\n    print(power)  # 1, 2, 4, 8, 16, 32\n\n# Generator function (a simpler way to create iterators)\ndef powers_of_two(max_exponent):\n    exponent = 0\n    while exponent <= max_exponent:\n        yield 2 ** exponent\n        exponent += 1\n\n# Using the generator\nfor power in powers_of_two(5):\n    print(power)  # 1, 2, 4, 8, 16, 32\n\n# Generator expression (like list comprehension but returns an iterator)\npowers_gen = (2 ** x for x in range(6))\nfor power in powers_gen:\n    print(power)"
          },
          "JSON": {
            "description": "JavaScript Object Notation is a lightweight data interchange format that is easy for humans to read and write and easy for machines to parse and generate.",
            "details": "JSON is commonly used for transmitting data in web applications.\nPython has a built-in json module to encode and decode JSON data.\nPython data types are converted to JSON equivalents: dict → object, list/tuple → array, str → string, int/float → number, True/False → true/false, None → null",
            "code": "import json\n\n# Converting Python objects to JSON strings (serialization)\n\n# Dictionary to JSON\nperson = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"city\": \"New York\",\n    \"is_student\": False,\n    \"grades\": [95, 88, 92],\n    \"address\": {\n        \"street\": \"123 Main St\",\n        \"zip\": \"10001\"\n    }\n}\n\n# Convert to JSON string\njson_string = json.dumps(person)\nprint(json_string)\n\n# With formatting options\npretty_json = json.dumps(person, indent=4, sort_keys=True)\nprint(pretty_json)\n\n# Writing JSON to a file\nwith open(\"person.json\", \"w\") as file:\n    json.dump(person, file, indent=4)\n\n# Converting JSON strings to Python objects (deserialization)\n\n# JSON string to dictionary\njson_str = '{\"name\":\"Alice\",\"age\":25,\"city\":\"Boston\"}'\nperson = json.loads(json_str)\nprint(person[\"name\"])  # Alice\n\n# Reading JSON from a file\ntry:\n    with open(\"data.json\", \"r\") as file:\n        data = json.load(file)\n        print(data)\nexcept FileNotFoundError:\n    print(\"File not found\")\n\n# Custom object serialization\nclass Employee:\n    def __init__(self, name, id):\n        self.name = name\n        self.id = id\n\ndef employee_to_json(obj):\n    if isinstance(obj, Employee):\n        return {\"name\": obj.name, \"id\": obj.id}\n    # Raise a TypeError if the object can't be serialized\n    raise TypeError(f\"Object of type {type(obj)} is not JSON serializable\")\n\nemp = Employee(\"John Doe\", 1001)\njson_emp = json.dumps(emp, default=employee_to_json)\nprint(json_emp)"
          },
          "Python try...except": {
            "description": "Comprehensive error handling in Python with try, except, else, and finally blocks.",
            "details": "The try block lets you test a block of code for errors.\nThe except block lets you handle the error.\nThe else block lets you execute code when there is no error.\nThe finally block lets you execute code, regardless of the result of the try and except blocks.",
            "code": "# Basic exception handling\ntry:\n    # Code that might cause an exception\n    x = 10 / 0\nexcept:\n    # Handle all exceptions\n    print(\"An error occurred\")\n\n# Handling specific exceptions\ntry:\n    number = int(input(\"Enter a number: \"))\n    result = 100 / number\nexcept ValueError:\n    print(\"Invalid input. Please enter a valid number.\")\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero.\")\n\n# Handling multiple exceptions with one block\ntry:\n    with open(\"nonexistent_file.txt\", \"r\") as file:\n        content = file.read()\nexcept (FileNotFoundError, IOError) as error:\n    print(f\"File error: {error}\")\n\n# Getting error details with 'as'\ntry:\n    x = 10 / 0\nexcept ZeroDivisionError as e:\n    print(f\"Error message: {e}\")\n    print(f\"Error type: {type(e).__name__}\")\n\n# Using else clause (runs when no exception occurs)\ntry:\n    x = 10 / 5\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero\")\nelse:\n    print(f\"Division result: {x}\")\n\n# Using finally clause (always runs)\ntry:\n    file = open(\"sample.txt\", \"r\")\n    content = file.read()\nexcept FileNotFoundError:\n    print(\"File not found\")\nfinally:\n    # Clean-up code that always runs\n    try:\n        file.close()\n    except NameError:\n        print(\"File was not opened successfully\")\n\n# Creating custom exceptions\nclass CustomError(Exception):\n    \"\"\"A custom exception class\"\"\"\n    def __init__(self, message, error_code):\n        self.message = message\n        self.error_code = error_code\n        super().__init__(self.message)\n\n# Raising a custom exception\ntry:\n    value = -10\n    if value < 0:\n        raise CustomError(\"Value cannot be negative\", 100)\nexcept CustomError as e:\n    print(f\"Error message: {e.message}\")\n    print(f\"Error code: {e.error_code}\")"
          },
          "Python PIP": {
            "description": "PIP is the standard package manager for Python, used to install and manage software packages written in Python.",
            "details": "PIP stands for 'Pip Installs Packages' or 'Preferred Installer Program'.\nPIP comes pre-installed with Python versions 3.4 and above.\nPIP is used to install packages from the Python Package Index (PyPI) and other repositories.",
            "commands": "Install a package: pip install package_name\nInstall a specific version: pip install package_name==1.0.4\nUpgrade a package: pip install --upgrade package_name\nUninstall a package: pip uninstall package_name\nList installed packages: pip list\nShow package information: pip show package_name\nSearch for packages: pip search search_term\nInstall packages from a requirements file: pip install -r requirements.txt\nCreate a requirements file: pip freeze > requirements.txt",
            "examples": "# Create a virtual environment\npython -m venv myenv\n\n# Activate the virtual environment (Windows)\nmyenv\\Scripts\\activate\n\n# Activate the virtual environment (macOS/Linux)\nsource myenv/bin/activate\n\n# Install a package\npip install requests\n\n# Install multiple packages\npip install numpy pandas matplotlib\n\n# Install a specific version\npip install requests==2.25.1\n\n# Upgrade a package\npip install --upgrade requests\n\n# List installed packages\npip list\n\n# Show package details\npip show requests\n\n# Create a requirements.txt file\npip freeze > requirements.txt\n\n# Install from requirements.txt\npip install -r requirements.txt"
          },
          "Data & Time": {
            "description": "Python provides the datetime module to handle dates and times.",
            "details": "The datetime module provides classes for manipulating dates and times.\nThe main classes in the datetime module are date, time, datetime, timedelta, and tzinfo.\ndatetime objects can be formatted into strings using strftime() and parsed from strings using strptime().",
            "code": "import datetime\nfrom datetime import date, time, datetime, timedelta\nimport calendar\n\n# Get current date\ntoday = date.today()\nprint(f\"Today's date: {today}\")  # YYYY-MM-DD format\n\n# Get individual components\nprint(f\"Year: {today.year}, Month: {today.month}, Day: {today.day}\")\n\n# Get current datetime\nnow = datetime.now()\nprint(f\"Current datetime: {now}\")  # YYYY-MM-DD HH:MM:SS.mmmmmm\n\n# Get time components\nprint(f\"Hour: {now.hour}, Minute: {now.minute}, Second: {now.second}\")\n\n# Creating date objects\nspecific_date = date(2023, 12, 31)\nprint(f\"New Year's Eve: {specific_date}\")\n\n# Creating time objects\nnoon = time(12, 0, 0)\nprint(f\"Noon: {noon}\")  # 12:00:00\n\n# Creating datetime objects\nevent_datetime = datetime(2023, 12, 31, 23, 59, 59)\nprint(f\"New Year's countdown: {event_datetime}\")\n\n# Formatting dates and times (strftime)\nformatted_date = now.strftime(\"%A, %B %d, %Y\")\nprint(formatted_date)  # e.g., Monday, January 01, 2023\n\nformatted_time = now.strftime(\"%I:%M %p\")  # 12-hour format with AM/PM\nprint(formatted_time)  # e.g., 03:45 PM\n\n# Common format codes:\n# %Y - Year with century (2023)\n# %m - Month as a number (01-12)\n# %d - Day of the month (01-31)\n# %A - Weekday name (Sunday, Monday, ...)\n# %B - Month name (January, February, ...)\n# %H - Hour (00-23)\n# %I - Hour (01-12)\n# %M - Minute (00-59)\n# %S - Second (00-59)\n# %p - AM/PM\n\n# Parsing strings to datetime objects (strptime)\ndate_string = \"31/12/2023 23:59:59\"\nparsed_date = datetime.strptime(date_string, \"%d/%m/%Y %H:%M:%S\")\nprint(f\"Parsed date: {parsed_date}\")\n\n# Arithmetic with dates using timedelta\ntomorrow = today + timedelta(days=1)\nprint(f\"Tomorrow: {tomorrow}\")\n\none_week_later = today + timedelta(weeks=1)\nprint(f\"Next week: {one_week_later}\")\n\ntwo_hours_later = now + timedelta(hours=2)\nprint(f\"Two hours from now: {two_hours_later}\")\n\n# Calculate difference between dates\ndate1 = date(2023, 1, 1)\ndate2 = date(2023, 12, 31)\ndelta = date2 - date1\nprint(f\"Days between dates: {delta.days}\")  # 364\n\n# Working with weekdays\nweekday_num = today.weekday()  # 0 (Monday) to 6 (Sunday)\nweekday_name = calendar.day_name[weekday_num]\nprint(f\"Today is a {weekday_name}\")\n\n# Calendar functions\nis_leap = calendar.isleap(today.year)\nprint(f\"Is {today.year} a leap year? {is_leap}\")\n\n# Print a month's calendar\nprint(calendar.month(today.year, today.month))\n\n# Get first weekday and number of days in month\nfirst_day, num_days = calendar.monthrange(today.year, today.month)\nprint(f\"First day: {calendar.day_name[first_day]}, Days in month: {num_days}\")"
          }
        }
      },
      "File Handling": {
        "description": "Working with files in Python.",
        "topics": {
          "Python File Handling": {
            "description": "File handling is an important part of any programming language as it allows the program to interact with files on the disk.",
            "details": "Python provides built-in functions for creating, reading, updating, and deleting files.\nFiles are opened using the open() function which returns a file object.\nThe open() function takes two parameters: the file path and the mode.\nCommon file modes include: 'r' (read), 'w' (write), 'a' (append), 'b' (binary), 't' (text, default), '+' (read and write)",
            "code": "# Opening a file\nf = open(\"example.txt\", \"r\")  # Open for reading (default)\n\n# Always close files when done with them\nf.close()\n\n# Better approach using 'with' statement (automatically closes file)\nwith open(\"example.txt\", \"r\") as file:\n    content = file.read()\n    print(content)\n\n# Different file modes:\n# 'r' - Read - Default. Opens file for reading\n# 'w' - Write - Opens file for writing. Creates new file if not exists, overwrites if exists\n# 'x' - Create - Creates a new file, fails if file already exists\n# 'a' - Append - Opens for appending, creates file if not exists\n# 't' - Text - Default mode\n# 'b' - Binary - Binary mode (e.g., images)\n# '+' - Update - Read and write\n\n# Examples of different modes:\nwith open(\"example.txt\", \"r\") as file:  # Read-only\n    pass\n\nwith open(\"example.txt\", \"w\") as file:  # Write-only (overwrites!)\n    pass\n\nwith open(\"example.txt\", \"a\") as file:  # Append\n    pass\n\nwith open(\"example.txt\", \"r+\") as file:  # Read and write\n    pass\n\nwith open(\"example.txt\", \"rb\") as file:  # Read binary\n    pass"
          },
          "Read/Write Files": {
            "description": "How to read from and write to files in Python.",
            "details": "Reading methods: read(), readline(), readlines()\nWriting methods: write(), writelines()\nFile position can be controlled with seek() and tell() methods\nPython supports both text and binary file operations",
            "code": "# Writing to a text file\nwith open(\"sample.txt\", \"w\") as file:\n    file.write(\"Hello, World!\\n\")  # Write a single line\n    file.write(\"This is a sample file.\\n\")\n    \n    # Write multiple lines\n    lines = [\n        \"Line 1\\n\",\n        \"Line 2\\n\",\n        \"Line 3\\n\"\n    ]\n    file.writelines(lines)\n\n# Reading from a text file\n\n# Read entire file content\nwith open(\"sample.txt\", \"r\") as file:\n    content = file.read()\n    print(\"--- Complete file content ---\")\n    print(content)\n\n# Read file line by line\nwith open(\"sample.txt\", \"r\") as file:\n    print(\"--- Line by line reading ---\")\n    for line in file:  # Most efficient for large files\n        print(line, end=\"\")  # 'line' already has newline character\n\n# Read specific number of characters\nwith open(\"sample.txt\", \"r\") as file:\n    print(\"\\n--- First 10 characters ---\")\n    chunk = file.read(10)  # Read first 10 characters\n    print(chunk)\n\n# Read one line at a time\nwith open(\"sample.txt\", \"r\") as file:\n    print(\"\\n--- First line ---\")\n    first_line = file.readline()\n    print(first_line, end=\"\")\n    \n    print(\"--- Second line ---\")\n    second_line = file.readline()\n    print(second_line, end=\"\")\n\n# Read all lines into a list\nwith open(\"sample.txt\", \"r\") as file:\n    print(\"\\n--- All lines as list ---\")\n    lines = file.readlines()  # Returns a list of lines\n    print(lines)\n\n# Appending to a file\nwith open(\"sample.txt\", \"a\") as file:\n    file.write(\"\\nThis line is appended.\\n\")\n    file.write(\"So is this one.\\n\")\n\n# Moving the file pointer with seek()\nwith open(\"sample.txt\", \"r\") as file:\n    print(\"\\n--- Using seek() ---\")\n    # Move to the 5th byte in the file\n    file.seek(5)\n    # Read 10 characters from that position\n    print(file.read(10))\n    \n    # Get current position\n    position = file.tell()\n    print(f\"Current position: {position}\")\n    \n    # Move to the beginning of the file\n    file.seek(0)\n    print(f\"Back to start: '{file.read(5)}'\")\n\n# Working with binary files\nwith open(\"binary_file.bin\", \"wb\") as file:  # Open in binary write mode\n    # Write bytes to the file\n    file.write(b\"Hello, binary world!\")\n\nwith open(\"binary_file.bin\", \"rb\") as file:  # Open in binary read mode\n    binary_data = file.read()\n    print(\"\\n--- Binary file content ---\")\n    print(binary_data)\n\n# File checking and manipulation\nimport os\n\n# Check if file exists\nif os.path.exists(\"sample.txt\"):\n    print(\"\\nThe file exists\")\n    \n    # Get file information\n    print(f\"File size: {os.path.getsize('sample.txt')} bytes\")\n    print(f\"Last modified: {os.path.getmtime('sample.txt')}\")\n    \n    # Rename a file\n    try:\n        os.rename(\"sample.txt\", \"new_sample.txt\")\n        print(\"File renamed\")\n    except FileExistsError:\n        print(\"Destination file already exists\")\n    \n    # Delete a file\n    try:\n        os.remove(\"new_sample.txt\")\n        print(\"File deleted\")\n    except FileNotFoundError:\n        print(\"The file does not exist\")\nelse:\n    print(\"The file does not exist\")\n\n# Exception handling with file operations\ntry:\n    with open(\"nonexistent.txt\", \"r\") as file:\n        content = file.read()\nexcept FileNotFoundError:\n    print(\"\\nThe file was not found\")\nexcept IOError as e:\n    print(f\"\\nIO error occurred: {e}\")"
          }
        }
      }
    }
  },
  {
    "JAVA": {
      "Introduction": {
        "description": "Core concepts and setup for Java programming.",
        
          "Java Overview": {
            "description": "Java is a high-level, class-based, object-oriented programming language designed to have as few implementation dependencies as possible.",
            "details": "Platform independent: Write once, run anywhere (WORA)\nObject-oriented: Based around objects rather than actions\nRobust: Strong memory management and exception handling\nSecure: Designed with built-in security features\nMulti-threaded: Can perform multiple tasks simultaneously",
            "code": "// Your first Java program\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}"
          },
          "Installation & Setup": {
            "description": "Setting up Java development environment requires installing JDK (Java Development Kit).",
            "details": "Download and install the latest JDK from Oracle's website\nSet up the JAVA_HOME environment variable\nAdd Java to your PATH environment variable\nInstall an IDE (like Eclipse, IntelliJ IDEA, or NetBeans)\nCreate and run your first Java project\nVerification command: java -version",
            "code": "// After installation, verify by running this program\npublic class CheckInstallation {\n    public static void main(String[] args) {\n        System.out.println(\"Your Java installation is working correctly!\");\n        System.out.println(\"Java version: \" + System.getProperty(\"java.version\"));\n    }\n}"
          },
          "JVM, JRE, JDK": {
            "description": "Understanding the components of Java platform architecture.",
            "details": "JVM: Java Virtual Machine - executes Java bytecode\nJRE: Java Runtime Environment - includes JVM and libraries needed to run Java applications\nJDK: Java Development Kit - includes JRE plus development tools like compiler, debugger\nWorkflow: Source code (.java) → Java compiler → Bytecode (.class) → JVM → Machine code",
            "code": "/*\nWorkflow example:\n1. Write code: HelloWorld.java\n2. Compile: javac HelloWorld.java (creates HelloWorld.class)\n3. Run: java HelloWorld\n\nThe JVM interprets the bytecode for the specific platform.\n*/"
          },
          "Basic Java Syntax": {
            "description": "Essential syntax rules to write Java programs.",
            "details": "Java is case-sensitive\nClass names begin with an uppercase letter and follow CamelCase\nMethod names begin with a lowercase letter and follow camelCase\nProgram file name must match the class name (with .java extension)\nEvery Java program must have a main method as entry point",
            "code": "// Basic syntax example\npublic class SyntaxExample {\n    public static void main(String[] args) {\n        // Variable declaration\n        int number = 10;\n        \n        // Method call\n        displayMessage();\n        \n        // Conditional statement\n        if (number > 5) {\n            System.out.println(\"Number is greater than 5\");\n        }\n    }\n    \n    public static void displayMessage() {\n        System.out.println(\"This is a method\");\n    }\n}"
          },
          "Java Comments": {
            "description": "Comments are used to explain code and make it more readable. They are ignored by the compiler.",
            "details": "Single-line comments: // This is a single-line comment\nMulti-line comments: /* This is a multi-line comment\n   that spans multiple lines */\nDocumentation comments: /** This is a documentation comment\n    * used for generating documentation\n    * @param args command line arguments\n    */",
            "code": "/**\n * This class demonstrates the use of different types of comments in Java\n * @author YourName\n * @version 1.0\n */\npublic class CommentsExample {\n    public static void main(String[] args) {\n        // This is a single-line comment\n        System.out.println(\"Hello, World!\");\n        \n        /* This is a multi-line comment\n           that spans multiple lines */\n        int x = 10; // You can also place comments at the end of a line\n        \n        calculateSum(5, 10); // Calling the calculateSum method\n    }\n    \n    /**\n     * Calculates the sum of two integers\n     * @param a the first number\n     * @param b the second number\n     * @return the sum of a and b\n     */\n    public static int calculateSum(int a, int b) {\n        return a + b; // Return the sum\n    }\n}"
          },
          "Java Data Types": {
            "description": "Data types specify the different sizes and values that can be stored in the variable.",
            "details": "Primitive types:\nbyte: 8-bit integer, range: -128 to 127\nshort: 16-bit integer, range: -32,768 to 32,767\nint: 32-bit integer, range: -2^31 to 2^31-1\nlong: 64-bit integer, range: -2^63 to 2^63-1\nfloat: 32-bit floating point, 6-7 decimal digits precision\ndouble: 64-bit floating point, 15 decimal digits precision\nboolean: true or false\nchar: 16-bit Unicode character, range: 0 to 65,535\n\nReference types: String, Arrays, Classes, Interfaces",
            "code": "public class DataTypesExample {\n    public static void main(String[] args) {\n        // Primitive data types\n        byte b = 100;\n        short s = 10000;\n        int i = 100000;\n        long l = 1000000000L;  // Note the 'L' suffix for long literals\n        float f = 3.14f;      // Note the 'f' suffix for float literals\n        double d = 3.14159265359;\n        boolean bool = true;\n        char c = 'A';\n        \n        // Reference data types\n        String str = \"Hello, World!\";\n        int[] numbers = {1, 2, 3, 4, 5};\n        \n        // Printing values\n        System.out.println(\"byte value: \" + b);\n        System.out.println(\"short value: \" + s);\n        System.out.println(\"int value: \" + i);\n        System.out.println(\"long value: \" + l);\n        System.out.println(\"float value: \" + f);\n        System.out.println(\"double value: \" + d);\n        System.out.println(\"boolean value: \" + bool);\n        System.out.println(\"char value: \" + c);\n        System.out.println(\"String value: \" + str);\n        System.out.println(\"Array first element: \" + numbers[0]);\n    }\n}"
          }
        
      },
      "Variables, Operators & User I/O": {
        "description": "Core concepts for working with variables, operators, and user I/O in Java.",
        
          "Java Variables": {
            "description": "Variables are containers for storing data values. In Java, variables must be declared with a specific type.",
            "details": "Declaration syntax: type variableName = value;\n\nVariable types:\nLocal: Declared inside a method, constructor, or block\nInstance: Declared inside a class but outside any method\nStatic: Declared with static keyword, shared among all instances\n\nNaming rules:\nNames can contain letters, digits, underscore (_), and dollar sign ($)\nMust begin with a letter, $ or _\nCannot use reserved keywords\nCase-sensitive\nFollow camelCase convention (except constants which use UPPER_SNAKE_CASE)",
            "code": "public class VariablesExample {\n    // Instance variables\n    String instanceVar = \"I'm an instance variable\";\n    \n    // Static variable\n    static double PI = 3.14159;\n    \n    // Constants (static final)\n    static final String COMPANY_NAME = \"TechCorp\";\n    \n    public static void main(String[] args) {\n        // Local variables\n        int age = 25;\n        double salary = 50000.50;\n        char grade = 'A';\n        boolean isEmployed = true;\n        \n        // Variable declaration and initialization separately\n        String name;\n        name = \"John Doe\";\n        \n        // Type inference with var (Java 10+)\n        var dynamicVar = \"This type is inferred as String\";\n        \n        // Multiple variables of the same type\n        int x = 10, y = 20, z = 30;\n        \n        // Printing variables\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"Age: \" + age);\n        System.out.println(\"Salary: $\" + salary);\n        System.out.println(\"Grade: \" + grade);\n        System.out.println(\"Employed: \" + isEmployed);\n        System.out.println(\"X + Y + Z = \" + (x + y + z));\n        System.out.println(\"Company: \" + COMPANY_NAME);\n        System.out.println(\"PI value: \" + PI);\n    }\n    \n    public void displayInstanceVariable() {\n        System.out.println(instanceVar);\n    }\n}"
          },
          "Java Operators": {
            "description": "Operators are used to perform operations on variables and values.",
            "details": "Arithmetic operators: + (addition), - (subtraction), * (multiplication), / (division), % (modulus), ++ (increment), -- (decrement)\n\nAssignment operators: =, +=, -=, *=, /=, %=, &=, |=, ^=, >>=, <<=, >>>=\n\nComparison operators: == (equal to), != (not equal), > (greater than), < (less than), >= (greater than or equal to), <= (less than or equal to)\n\nLogical operators: && (logical and), || (logical or), ! (logical not)\n\nBitwise operators: & (AND), | (OR), ^ (XOR), ~ (NOT), << (left shift), >> (right shift), >>> (unsigned right shift)",
            "code": "public class OperatorsExample {\n    public static void main(String[] args) {\n        // Arithmetic operators\n        int a = 10;\n        int b = 5;\n        System.out.println(\"a + b = \" + (a + b));\n        System.out.println(\"a - b = \" + (a - b));\n        System.out.println(\"a * b = \" + (a * b));\n        System.out.println(\"a / b = \" + (a / b));\n        System.out.println(\"a % b = \" + (a % b));\n        \n        // Increment and decrement\n        int c = 5;\n        System.out.println(\"c++ = \" + (c++));  // Post-increment: returns value then increments\n        System.out.println(\"c = \" + c);        // c is now 6\n        System.out.println(\"++c = \" + (++c));  // Pre-increment: increments then returns value\n        \n        // Assignment operators\n        int d = 10;\n        d += 5;  // equivalent to d = d + 5\n        System.out.println(\"d after d += 5: \" + d);\n        \n        // Comparison operators\n        int x = 10;\n        int y = 15;\n        System.out.println(\"x == y: \" + (x == y));\n        System.out.println(\"x != y: \" + (x != y));\n        System.out.println(\"x > y: \" + (x > y));\n        System.out.println(\"x < y: \" + (x < y));\n        \n        // Logical operators\n        boolean isAdult = true;\n        boolean isEmployed = false;\n        System.out.println(\"isAdult AND isEmployed: \" + (isAdult && isEmployed));\n        System.out.println(\"isAdult OR isEmployed: \" + (isAdult || isEmployed));\n        System.out.println(\"NOT isAdult: \" + (!isAdult));\n        \n        // Bitwise operators\n        int num1 = 5;  // binary: 0101\n        int num2 = 3;  // binary: 0011\n        System.out.println(\"num1 & num2: \" + (num1 & num2));  // 0001 = 1\n        System.out.println(\"num1 | num2: \" + (num1 | num2));  // 0111 = 7\n        System.out.println(\"num1 ^ num2: \" + (num1 ^ num2));  // 0110 = 6\n        System.out.println(\"~num1: \" + (~num1));              // inverts all bits\n        \n        // Shift operators\n        System.out.println(\"num1 << 1: \" + (num1 << 1));  // 0101 to 1010 = 10\n        System.out.println(\"num1 >> 1: \" + (num1 >> 1));  // 0101 to 0010 = 2\n        \n        // Ternary operator\n        int age = 20;\n        String status = (age >= 18) ? \"Adult\" : \"Minor\";\n        System.out.println(\"Status: \" + status);\n    }\n}"
          },
          "User Input/Output": {
            "description": "Handling user input and output in Java programs.",
            "details": "Input methods:\nScanner: Most common way to get user input\nBufferedReader: More efficient for reading large inputs\nConsole: For secure input like passwords (no echoing)\nCommand line arguments: Passed to main method\n\nOutput methods:\nSystem.out.println(): Prints and then terminates the line\nSystem.out.print(): Prints without line termination\nSystem.out.printf(): Prints formatted output\nPrintWriter: For writing to files",
            "code": "import java.util.Scanner;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.Console;\n\npublic class UserInputOutputExample {\n    public static void main(String[] args) {\n        // Command line arguments\n        if (args.length > 0) {\n            System.out.println(\"Command line arguments:\");\n            for (int i = 0; i < args.length; i++) {\n                System.out.println(\"Arg \" + i + \": \" + args[i]);\n            }\n        }\n        \n        // Using Scanner for input\n        Scanner scanner = new Scanner(System.in);\n        \n        System.out.print(\"Enter your name: \");\n        String name = scanner.nextLine();\n        \n        System.out.print(\"Enter your age: \");\n        int age = scanner.nextInt();\n        \n        // Consume the leftover newline\n        scanner.nextLine();\n        \n        System.out.print(\"Enter your email: \");\n        String email = scanner.nextLine();\n        \n        // Using different output methods\n        System.out.println(\"User Information:\");\n        System.out.print(\"Name: \" + name + \", \");\n        System.out.print(\"Age: \" + age + \", \");\n        System.out.println(\"Email: \" + email);\n        \n        // Formatted output with printf\n        System.out.printf(\"Formatted output: Name=%s, Age=%d, Email=%s%n\", name, age, email);\n        \n        // Using BufferedReader for input\n        try {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n            System.out.print(\"Enter your favorite color (using BufferedReader): \");\n            String color = reader.readLine();\n            System.out.println(\"Your favorite color is: \" + color);\n        } catch (IOException e) {\n            System.out.println(\"An error occurred while reading input\");\n            e.printStackTrace();\n        }\n        \n        // Using Console for password input (works only in console, not in IDE)\n        Console console = System.console();\n        if (console != null) {\n            char[] passwordArray = console.readPassword(\"Enter your password: \");\n            // Convert to string for demonstration (in real apps, avoid storing as String)\n            String password = new String(passwordArray);\n            System.out.println(\"Password length: \" + password.length());\n            // Clear the password from memory\n            java.util.Arrays.fill(passwordArray, ' ');\n        } else {\n            System.out.println(\"Console is not available\");\n        }\n        \n        scanner.close();\n    }\n}"
          }
        
      },
      "Conditional Statements": {
        "description": "Control flow statements for executing different code blocks based on conditions.",
        
          "if Statement": {
            "description": "The if statement executes a block of code if a specified condition is true.",
            "details": "Syntax:\nif (condition) {\n    // code to be executed if condition is true\n}",
            "code": "public class IfStatementExample {\n    public static void main(String[] args) {\n        int number = 10;\n        \n        // Simple if statement\n        if (number > 0) {\n            System.out.println(\"The number is positive\");\n        }\n        \n        // if statement with multiple conditions using logical operators\n        if (number > 0 && number < 100) {\n            System.out.println(\"The number is positive and less than 100\");\n        }\n        \n        // if statement with complex expression\n        int x = 5;\n        int y = 15;\n        \n        if ((x + y) > 20 || (x * y) == 75) {\n            System.out.println(\"At least one of the conditions is true\");\n        }\n        \n        // if statement with method call in condition\n        if (isEven(number)) {\n            System.out.println(number + \" is an even number\");\n        }\n    }\n    \n    // Helper method to check if a number is even\n    public static boolean isEven(int num) {\n        return num % 2 == 0;\n    }\n}"
          },
          "if…..else Statement": {
            "description": "The if...else statement executes one block of code if a condition is true and another if it's false.",
            "details": "Syntax:\nif (condition) {\n    // code to be executed if condition is true\n} else {\n    // code to be executed if condition is false\n}",
            "code": "import java.util.Scanner;\n\npublic class IfElseExample {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        // Simple if-else statement\n        System.out.print(\"Enter a number: \");\n        int number = scanner.nextInt();\n        \n        if (number >= 0) {\n            System.out.println(\"The number is non-negative\");\n        } else {\n            System.out.println(\"The number is negative\");\n        }\n        \n        // if-else with complex condition\n        System.out.print(\"Enter your age: \");\n        int age = scanner.nextInt();\n        \n        if (age >= 18 && age <= 65) {\n            System.out.println(\"You are eligible to work\");\n        } else {\n            System.out.println(\"You may not be eligible to work based on age\");\n        }\n        \n        // if-else with expressions\n        System.out.print(\"Enter a temperature in Celsius: \");\n        double celsius = scanner.nextDouble();\n        \n        if (celsius > 30) {\n            System.out.println(\"It's hot outside!\");\n        } else {\n            System.out.println(\"It's not very hot today.\");\n        }\n        \n        scanner.close();\n    }\n}"
          },
          "if…..else if Statement": {
            "description": "The if...else if...else statement tests multiple conditions and executes different blocks of code accordingly.",
            "details": "Syntax:\nif (condition1) {\n    // code to be executed if condition1 is true\n} else if (condition2) {\n    // code to be executed if condition1 is false and condition2 is true\n} else {\n    // code to be executed if both condition1 and condition2 are false\n}",
            "code": "import java.util.Scanner;\n\npublic class IfElseIfExample {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        // Grade calculator\n        System.out.print(\"Enter your score (0-100): \");\n        int score = scanner.nextInt();\n        \n        if (score >= 90) {\n            System.out.println(\"Grade: A\");\n        } else if (score >= 80) {\n            System.out.println(\"Grade: B\");\n        } else if (score >= 70) {\n            System.out.println(\"Grade: C\");\n        } else if (score >= 60) {\n            System.out.println(\"Grade: D\");\n        } else {\n            System.out.println(\"Grade: F\");\n        }\n        \n        // Time of day greeting\n        System.out.print(\"Enter the current hour (0-23): \");\n        int hour = scanner.nextInt();\n        \n        if (hour < 0 || hour > 23) {\n            System.out.println(\"Invalid hour\");\n        } else if (hour < 12) {\n            System.out.println(\"Good morning!\");\n        } else if (hour < 18) {\n            System.out.println(\"Good afternoon!\");\n        } else {\n            System.out.println(\"Good evening!\");\n        }\n        \n        // BMI calculator\n        System.out.print(\"Enter your weight in kg: \");\n        double weight = scanner.nextDouble();\n        System.out.print(\"Enter your height in meters: \");\n        double height = scanner.nextDouble();\n        \n        double bmi = weight / (height * height);\n        System.out.printf(\"Your BMI is: %.2f%n\", bmi);\n        \n        if (bmi < 18.5) {\n            System.out.println(\"Underweight\");\n        } else if (bmi < 25) {\n            System.out.println(\"Normal weight\");\n        } else if (bmi < 30) {\n            System.out.println(\"Overweight\");\n        } else {\n            System.out.println(\"Obese\");\n        }\n        \n        scanner.close();\n    }\n}"
          },
          "Nested if Statements": {
            "description": "Nested if statements have an if statement inside another if statement. Useful for checking multiple conditions.",
            "details": "Syntax:\nif (condition1) {\n    // code to be executed if condition1 is true\n    if (condition2) {\n        // code to be executed if both condition1 and condition2 are true\n    }\n}",
            "code": "import java.util.Scanner;\n\npublic class NestedIfExample {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        // Loan eligibility check\n        System.out.print(\"Enter your age: \");\n        int age = scanner.nextInt();\n        \n        if (age >= 18) {\n            System.out.println(\"You are eligible for a loan based on age.\");\n            System.out.print(\"Enter your annual income: \");\n            double income = scanner.nextDouble();\n            \n            if (income >= 30000) {\n                System.out.println(\"You meet the income requirement.\");\n                System.out.print(\"Enter your credit score (300-850): \");\n                int creditScore = scanner.nextInt();\n                \n                if (creditScore >= 700) {\n                    System.out.println(\"Congratulations! You are approved for a loan.\");\n                } else if (creditScore >= 600) {\n                    System.out.println(\"You are approved for a loan with higher interest rate.\");\n                } else {\n                    System.out.println(\"Sorry, your credit score is too low for loan approval.\");\n                }\n            } else {\n                System.out.println(\"Sorry, you don't meet the minimum income requirement.\");\n            }\n        } else {\n            System.out.println(\"Sorry, you must be at least 18 years old to apply for a loan.\");\n        }\n        \n        // Nested if with logical operators\n        System.out.print(\"\\nEnter a number: \");\n        int number = scanner.nextInt();\n        \n        if (number > 0) {\n            System.out.println(\"The number is positive.\");\n            \n            if (number % 2 == 0) {\n                System.out.println(\"The number is even.\");\n                \n                if (number % 10 == 0) {\n                    System.out.println(\"The number is divisible by 10.\");\n                } else {\n                    System.out.println(\"The number is not divisible by 10.\");\n                }\n            } else {\n                System.out.println(\"The number is odd.\");\n            }\n        } else if (number < 0) {\n            System.out.println(\"The number is negative.\");\n        } else {\n            System.out.println(\"The number is zero.\");\n        }\n        \n        scanner.close();\n    }\n}"
          },
          "switch case Statements": {
            "description": "The switch statement selects one of many code blocks to be executed based on a matching case.",
            "details": "Syntax:\nswitch (expression) {\n    case value1:\n        // code to be executed if expression == value1\n        break;\n    case value2:\n        // code to be executed if expression == value2\n        break;\n    default:\n        // code to be executed if expression doesn't match any case\n}",
            "code": "import java.util.Scanner;\n\npublic class SwitchCaseExample {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        // Basic switch statement with int\n        System.out.print(\"Enter a day number (1-7): \");\n        int day = scanner.nextInt();\n        \n        switch (day) {\n            case 1:\n                System.out.println(\"Monday\");\n                break;\n            case 2:\n                System.out.println(\"Tuesday\");\n                break;\n            case 3:\n                System.out.println(\"Wednesday\");\n                break;\n            case 4:\n                System.out.println(\"Thursday\");\n                break;\n            case 5:\n                System.out.println(\"Friday\");\n                break;\n            case 6:\n                System.out.println(\"Saturday\");\n                break;\n            case 7:\n                System.out.println(\"Sunday\");\n                break;\n            default:\n                System.out.println(\"Invalid day number\");\n        }\n        \n        // Switch with char\n        System.out.print(\"\\nEnter a grade (A, B, C, D, or F): \");\n        char grade = scanner.next().charAt(0);\n        grade = Character.toUpperCase(grade);\n        \n        switch (grade) {\n            case 'A':\n                System.out.println(\"Excellent!\");\n                break;\n            case 'B':\n                System.out.println(\"Good job!\");\n                break;\n            case 'C':\n                System.out.println(\"Satisfactory\");\n                break;\n            case 'D':\n                System.out.println(\"Needs improvement\");\n                break;\n            case 'F':\n                System.out.println(\"Failed\");\n                break;\n            default:\n                System.out.println(\"Invalid grade\");\n        }\n        \n        // Switch with String (Java 7+)\n        scanner.nextLine();  // Consume remaining newline\n        System.out.print(\"\\nEnter a month name: \");\n        String month = scanner.nextLine().toLowerCase();\n        \n        switch (month) {\n            case \"january\":\n            case \"march\":\n            case \"may\":\n            case \"july\":\n            case \"august\":\n            case \"october\":\n            case \"december\":\n                System.out.println(\"31 days\");\n                break;\n            case \"april\":\n            case \"june\":\n            case \"september\":\n            case \"november\":\n                System.out.println(\"30 days\");\n                break;\n            case \"february\":\n                System.out.println(\"28 or 29 days\");\n                break;\n            default:\n                System.out.println(\"Invalid month name\");\n        }\n        \n        // Enhanced switch (Java 14+)\n        System.out.print(\"\\nEnter a number (1-3): \");\n        int choice = scanner.nextInt();\n        \n        // Using enhanced switch with arrow syntax\n        switch (choice) {\n            case 1 -> System.out.println(\"You chose Option 1\");\n            case 2 -> System.out.println(\"You chose Option 2\");\n            case 3 -> System.out.println(\"You chose Option 3\");\n            default -> System.out.println(\"Invalid choice\");\n        }\n        \n        // Switch expression with return value (Java 14+)\n        System.out.print(\"\\nEnter a number (1-4): \");\n        int num = scanner.nextInt();\n        \n        String result = switch (num) {\n            case 1 -> \"One\";\n            case 2 -> \"Two\";\n            case 3 -> \"Three\";\n            case 4 -> \"Four\";\n            default -> \"Unknown\";\n        };\n        \n        System.out.println(\"Number in words: \" + result);\n        \n        scanner.close();\n    }\n}"
          }
        
      },
      "Iteration Statements": {
        "description": "Control flow statements for repeating code blocks based on conditions.",
        
          "for Loop": {
            "description": "The for loop repeats a block of statements for a specified number of times. It's ideal when you know how many iterations you need.",
            "details": "Syntax:\nfor (initialization; condition; update) {\n    // code to be executed\n}",
            "code": "public class ForLoopExample {\n    public static void main(String[] args) {\n        // Basic for loop\n        System.out.println(\"Counting from 1 to 5:\");\n        for (int i = 1; i <= 5; i++) {\n            System.out.println(\"Count: \" + i);\n        }\n        \n        // For loop with different initialization and update\n        System.out.println(\"\\nCounting down from 10 to 1:\");\n        for (int i = 10; i >= 1; i--) {\n            System.out.println(\"Count: \" + i);\n        }\n        \n        // For loop with multiple variables\n        System.out.println(\"\\nUsing multiple variables in for loop:\");\n        for (int i = 1, j = 10; i <= 5; i++, j -= 2) {\n            System.out.println(\"i = \" + i + \", j = \" + j);\n        }\n        \n        // For loop for array iteration\n        int[] numbers = {10, 20, 30, 40, 50};\n        System.out.println(\"\\nArray elements:\");\n        for (int i = 0; i < numbers.length; i++) {\n            System.out.println(\"Element at index \" + i + \": \" + numbers[i]);\n        }\n        \n        // Enhanced for loop (for-each) - introduced in Java 5\n        System.out.println(\"\\nUsing enhanced for loop:\");\n        for (int number : numbers) {\n            System.out.println(\"Element: \" + number);\n        }\n        \n        // For loop with complex logic\n        System.out.println(\"\\nPrinting even numbers from 1 to 10:\");\n        for (int i = 1; i <= 10; i++) {\n            if (i % 2 == 0) {\n                System.out.println(i);\n            }\n        }\n        \n        // For loop for string iteration\n        String name = \"Java\";\n        System.out.println(\"\\nCharacters in '\" + name + \"':\");\n        for (int i = 0; i < name.length(); i++) {\n            System.out.println(\"Character at position \" + i + \": \" + name.charAt(i));\n        }\n    }\n}"
          },
          "while Loop": {
            "description": "The while loop repeats a block of statements as long as a specified condition is true. It's useful when you don't know how many iterations you need.",
            "details": "Syntax:\nwhile (condition) {\n    // code to be executed\n}",
            "code": "import java.util.Scanner;\n\npublic class WhileLoopExample {\n    public static void main(String[] args) {\n        // Basic while loop\n        int count = 1;\n        System.out.println(\"Counting from 1 to 5 using while loop:\");\n        while (count <= 5) {\n            System.out.println(\"Count: \" + count);\n            count++;\n        }\n        \n        // While loop for user input validation\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"\\nEnter a positive number:\");\n        int number = scanner.nextInt();\n        \n        while (number <= 0) {\n            System.out.println(\"That's not a positive number. Try again:\");\n            number = scanner.nextInt();\n        }\n        \n        System.out.println(\"Thank you! You entered: \" + number);\n        \n        // While loop with complex condition\n        int sum = 0;\n        int i = 1;\n        \n        System.out.println(\"\\nSum of numbers from 1 to 10:\");\n        while (i <= 10) {\n            sum += i;\n            i++;\n        }\n        System.out.println(\"Sum: \" + sum);\n        \n        // Random number guessing game using while loop\n        int targetNumber = (int) (Math.random() * 10) + 1; // Random number between 1-10\n        int attempts = 0;\n        boolean guessed = false;\n        \n        System.out.println(\"\\nI'm thinking of a number between 1 and 10. Try to guess it!\");\n        \n        while (!guessed) {\n            System.out.print(\"Enter your guess: \");\n            int guess = scanner.nextInt();\n            attempts++;\n            \n            if (guess == targetNumber) {\n                guessed = true;\n                System.out.println(\"Congratulations! You guessed the number in \" + attempts + \" attempts.\");\n            } else if (guess < targetNumber) {\n                System.out.println(\"Too low! Try again.\");\n            } else {\n                System.out.println(\"Too high! Try again.\");\n            }\n        }\n        \n        scanner.close();\n    }\n}"
          },
          "do-while Loop": {
            "description": "The do-while loop is similar to the while loop, but it executes the block of code at least once before checking the condition.",
            "details": "Syntax:\ndo {\n    // code to be executed\n} while (condition);",
            "code": "import java.util.Scanner;\n\npublic class DoWhileLoopExample {\n    public static void main(String[] args) {\n        // Basic do-while loop\n        int count = 1;\n        System.out.println(\"Counting from 1 to 5 using do-while loop:\");\n        do {\n            System.out.println(\"Count: \" + count);\n            count++;\n        } while (count <= 5);\n        \n        // do-while loop executing at least once\n        int x = 10;\n        System.out.println(\"\\nExample of do-while executing once even when condition is false:\");\n        do {\n            System.out.println(\"Value of x: \" + x);\n            x++;\n        } while (x < 10); // Condition is already false, but code executed once\n        \n        // Menu-driven program using do-while\n        Scanner scanner = new Scanner(System.in);\n        int choice;\n        \n        do {\n            System.out.println(\"\\nMenu:\");\n            System.out.println(\"1. Say Hello\");\n            System.out.println(\"2. Say Goodbye\");\n            System.out.println(\"3. Tell a Joke\");\n            System.out.println(\"4. Exit\");\n            System.out.print(\"Enter your choice (1-4): \");\n            \n            choice = scanner.nextInt();\n            \n            switch (choice) {\n                case 1:\n                    System.out.println(\"Hello there!\");\n                    break;\n                case 2:\n                    System.out.println(\"Goodbye!\");\n                    break;\n                case 3:\n                    System.out.println(\"Why don't scientists trust atoms? Because they make up everything!\");\n                    break;\n                case 4:\n                    System.out.println(\"Exiting program...\");\n                    break;\n                default:\n                    System.out.println(\"Invalid choice. Please try again.\");\n            }\n        } while (choice != 4);\n        \n        // Input validation with do-while\n        int number;\n        do {\n            System.out.print(\"\\nEnter a number between 1 and 10: \");\n            number = scanner.nextInt();\n            \n            if (number < 1 || number > 10) {\n                System.out.println(\"Invalid input! The number must be between 1 and 10.\");\n            }\n        } while (number < 1 || number > 10);\n        \n        System.out.println(\"Thank you! You entered: \" + number);\n        \n        scanner.close();\n    }\n}"
          },
          "Nested Loops": {
            "description": "A nested loop is a loop inside another loop. The inner loop executes completely for each iteration of the outer loop.",
            "details": "Syntax:\nfor (initialization; condition; update) {\n    // outer loop code\n    \n    for (initialization; condition; update) {\n        // inner loop code\n    }\n}",
            "code": "public class NestedLoopsExample {\n    public static void main(String[] args) {\n        // Multiplication table using nested for loops\n        System.out.println(\"Multiplication Table (1-5):\");\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= 5; j++) {\n                System.out.print(i + \"x\" + j + \"=\" + (i * j) + \"\\t\");\n            }\n            System.out.println(); // New line after each row\n        }\n        \n        // Printing patterns using nested loops\n        System.out.println(\"\\nPattern 1:\");\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= i; j++) {\n                System.out.print(\"* \");\n            }\n            System.out.println();\n        }\n        \n        System.out.println(\"\\nPattern 2:\");\n        for (int i = 5; i >= 1; i--) {\n            for (int j = 1; j <= i; j++) {\n                System.out.print(\"* \");\n            }\n            System.out.println();\n        }\n        \n        System.out.println(\"\\nPattern 3 (Number triangle):\");\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= i; j++) {\n                System.out.print(j + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Nested loops with arrays\n        int[][] matrix = {\n            {1, 2, 3},\n            {4, 5, 6},\n            {7, 8, 9}\n        };\n        \n        System.out.println(\"\\nPrinting 2D array (matrix):\");\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[i].length; j++) {\n                System.out.print(matrix[i][j] + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Using enhanced for loops for nested iteration\n        System.out.println(\"\\nUsing enhanced for loops to iterate 2D array:\");\n        for (int[] row : matrix) {\n            for (int element : row) {\n                System.out.print(element + \" \");\n            }\n            System.out.println();\n        }\n        \n        // Combining different types of loops\n        System.out.println(\"\\nCombining for and while loops:\");\n        int i = 1;\n        while (i <= 3) {\n            System.out.println(\"Outer loop iteration: \" + i);\n            \n            for (int j = 1; j <= 3; j++) {\n                System.out.println(\"  Inner loop: \" + j);\n            }\n            \n            i++;\n        }\n    }\n}"
          },
          "break/continue Statement": {
            "description": "The break statement terminates the loop, while the continue statement skips the current iteration and continues with the next one.",
            "details": "Syntax:\nbreak; // Exits the loop completely\ncontinue; // Skips the rest of the current iteration",
            "code": "public class BreakContinueExample {\n    public static void main(String[] args) {\n        // Using break in a for loop\n        System.out.println(\"Using break in a for loop:\");\n        for (int i = 1; i <= 10; i++) {\n            if (i == 6) {\n                System.out.println(\"Breaking the loop at i = \" + i);\n                break;\n            }\n            System.out.println(\"i = \" + i);\n        }\n        \n        // Using continue in a for loop\n        System.out.println(\"\\nUsing continue in a for loop:\");\n        for (int i = 1; i <= 10; i++) {\n            if (i % 2 == 0) {\n                continue; // Skip even numbers\n            }\n            System.out.println(\"Odd number: \" + i);\n        }\n        \n        // Using break in a while loop\n        System.out.println(\"\\nUsing break in a while loop:\");\n        int count = 1;\n        while (count <= 10) {\n            System.out.println(\"Count: \" + count);\n            \n            if (count == 5) {\n                System.out.println(\"Breaking the while loop at count = \" + count);\n                break;\n            }\n            \n            count++;\n        }\n        \n        // Using continue in a while loop\n        System.out.println(\"\\nUsing continue in a while loop:\");\n        int i = 0;\n        while (i < 10) {\n            i++;\n            \n            if (i % 3 == 0) {\n                continue; // Skip multiples of 3\n            }\n            \n            System.out.println(\"i = \" + i);\n        }\n        \n        // Using break with nested loops\n        System.out.println(\"\\nUsing break in nested loops:\");\n        outerLoop: for (int x = 1; x <= 3; x++) {\n            System.out.println(\"Outer loop iteration: \" + x);\n            \n            for (int y = 1; y <= 3; y++) {\n                System.out.println(\"  Inner loop iteration: \" + y);\n                \n                if (x == 2 && y == 2) {\n                    System.out.println(\"  Breaking both loops when x=2 and y=2\");\n                    break outerLoop; // Exit both loops\n                }\n            }\n        }\n        \n        // Using break with labeled blocks\n        System.out.println(\"\\nUsing break with labeled block:\");\n        firstBlock: {\n            System.out.println(\"Inside the first block\");\n            \n            secondBlock: {\n                System.out.println(\"Inside the second block\");\n                \n                // Break out of the secondBlock\n                if (true) {\n                    System.out.println(\"Breaking out of secondBlock\");\n                    break secondBlock;\n                }\n                \n                System.out.println(\"This line will not be executed\");\n            }\n            \n            System.out.println(\"Back to the first block\");\n        }\n    }\n}"
          }
        
      },
      "Strings": {
        "description": "A sequence of characters in Java. Strings are immutable, meaning once created, their values cannot be changed.",

          "String Basics": {
            "description": "String is a sequence of characters in Java. Strings are immutable, meaning once created, their values cannot be changed.",
            "details": "Syntax:\nString variableName = \"value\";",
            "code": "public class StringBasicsExample {\n    public static void main(String[] args) {\n        // Creating strings\n        String greeting = \"Hello, World!\";\n        String emptyString = \"\";\n        String name = new String(\"Java\");  // Using constructor (not recommended)\n        \n        // String length\n        System.out.println(\"Length of greeting: \" + greeting.length());\n        \n        // Accessing characters in a string\n        char firstChar = greeting.charAt(0);\n        System.out.println(\"First character of greeting: \" + firstChar);\n        \n        // String concatenation\n        String firstName = \"John\";\n        String lastName = \"Doe\";\n        String fullName = firstName + \" \" + lastName;\n        System.out.println(\"Full name: \" + fullName);\n        \n        // String concatenation using concat() method\n        String message = \"Hello \".concat(firstName).concat(\"!\");\n        System.out.println(\"Message: \" + message);\n        \n        // String comparison\n        String str1 = \"Hello\";\n        String str2 = \"hello\";\n        String str3 = \"Hello\";\n        \n        // Using equals() method\n        System.out.println(\"str1.equals(str2): \" + str1.equals(str2));  // false (case-sensitive)\n        System.out.println(\"str1.equals(str3): \" + str1.equals(str3));  // true\n        \n        // Using equalsIgnoreCase() method\n        System.out.println(\"str1.equalsIgnoreCase(str2): \" + str1.equalsIgnoreCase(str2));  // true\n        \n        // Using == operator (compares reference, not content)\n        String s1 = \"Java\";\n        String s2 = \"Java\";\n        String s3 = new String(\"Java\");\n        \n        System.out.println(\"s1 == s2: \" + (s1 == s2));  // true (same literal)\n        System.out.println(\"s1 == s3: \" + (s1 == s3));  // false (different objects)\n        System.out.println(\"s1.equals(s3): \" + s1.equals(s3));  // true (same content)\n        \n        // String compareTo() method\n        System.out.println(\"apple\".compareTo(\"banana\"));  // negative (apple comes before banana)\n        System.out.println(\"banana\".compareTo(\"apple\"));  // positive (banana comes after apple)\n        System.out.println(\"apple\".compareTo(\"apple\"));   // zero (same string)\n        \n        // Checking if a string is empty\n        System.out.println(\"Is emptyString empty? \" + emptyString.isEmpty());\n        \n        // Checking if a string starts/ends with a prefix/suffix\n        System.out.println(\"greeting starts with 'Hello': \" + greeting.startsWith(\"Hello\"));  // true\n        System.out.println(\"greeting ends with 'World!': \" + greeting.endsWith(\"World!\"));  // true\n    }\n}"
          },
          "Escape Characters": {
            "description": "Escape characters are used to include special characters that are part of the syntax or not easily typed.",
            "details": "Common escape sequences:\n\\n - New line\n\\t - Tab\n\\b - Backspace\n\\r - Carriage return\n\\f - Form feed\n\\' - Single quote\n\\\" - Double quote\n\\\\ - Backslash",
            "code": "public class EscapeCharactersExample {\n    public static void main(String[] args) {\n        // New line\n        String newLineExample = \"Hello\\nWorld\";\n        System.out.println(\"New line example:\\n\" + newLineExample);\n        \n        // Tab\n        String tabExample = \"Name:\\tJohn\";\n        System.out.println(\"\\nTab example:\\n\" + tabExample);\n        \n        // Backspace (removes the character before it)\n        String backspaceExample = \"Hello\\bWorld\";  // Removes 'o' from \"Hello\"\n        System.out.println(\"\\nBackspace example:\\n\" + backspaceExample);\n        \n        // Carriage return (returns to start of line)\n        String carriageReturnExample = \"Hello\\rWorld\";  // \"World\" overwrites \"Hello\"\n        System.out.println(\"\\nCarriage return example:\\n\" + carriageReturnExample);\n        \n        // Single quote\n        String singleQuoteExample = \"It\\'s a beautiful day\";\n        System.out.println(\"\\nSingle quote example:\\n\" + singleQuoteExample);\n        \n        // Double quote\n        String doubleQuoteExample = \"The sign says \\\"Stop\\\"\";\n        System.out.println(\"\\nDouble quote example:\\n\" + doubleQuoteExample);\n        \n        // Backslash\n        String backslashExample = \"C:\\\\Program Files\\\\Java\";\n        System.out.println(\"\\nBackslash example:\\n\" + backslashExample);\n        \n        // Multiple escape characters\n        String multipleExample = \"First line\\nSecond line\\n\\tIndented line\\n\\\"Quoted text\\\"\\nBackslash: \\\\\";\n        System.out.println(\"\\nMultiple escape characters example:\\n\" + multipleExample);\n        \n        // Unicode escape sequence\n        String unicodeExample = \"\\u00A9 Copyright Symbol\";\n        System.out.println(\"\\nUnicode escape sequence example:\\n\" + unicodeExample);\n    }\n}"
          },
          "String Methods": {
            "description": "Java provides various built-in methods to perform operations on strings.",
            "details": "Common methods:\nlength() - Returns the length of the string\ncharAt(int index) - Returns the character at the specified index\nsubstring(int beginIndex) - Returns a substring from beginIndex to the end\nsubstring(int beginIndex, int endIndex) - Returns a substring from beginIndex to endIndex-1\nconcat(String str) - Concatenates the specified string to the end\nindexOf(String str) - Returns the index of the first occurrence of the specified substring\nlastIndexOf(String str) - Returns the index of the last occurrence of the specified substring\ntoLowerCase() - Converts the string to lowercase letters\ntoUpperCase() - Converts the string to uppercase letters\ntrim() - Removes whitespace from both ends of the string\nreplace(char oldChar, char newChar) - Replaces all occurrences of oldChar with newChar",
            "code": "public class StringMethodsExample {\n    public static void main(String[] args) {\n        String text = \"  Java String Methods Example  \";\n        \n        // length() - returns the number of characters\n        System.out.println(\"Length: \" + text.length());\n        \n        // charAt() - returns the character at specified index\n        System.out.println(\"Character at index 7: \" + text.charAt(7));\n        \n        // substring() - returns part of the string\n        System.out.println(\"Substring from index 7: \" + text.substring(7));\n        System.out.println(\"Substring from index 7 to 13: \" + text.substring(7, 13));\n        \n        // indexOf() - returns index of first occurrence\n        System.out.println(\"Index of 'String': \" + text.indexOf(\"String\"));\n        System.out.println(\"Index of 'e': \" + text.indexOf('e'));\n        System.out.println(\"Index of 'e' after index 15: \" + text.indexOf('e', 15));\n        \n        // lastIndexOf() - returns index of last occurrence\n        System.out.println(\"Last index of 'e': \" + text.lastIndexOf('e'));\n        \n        // toLowerCase() and toUpperCase()\n        System.out.println(\"Lowercase: \" + text.toLowerCase());\n        System.out.println(\"Uppercase: \" + text.toUpperCase());\n        \n        // trim() - removes whitespace from beginning and end\n        System.out.println(\"Trimmed: '\" + text.trim() + \"'\");\n        \n        // replace() - replaces characters\n        System.out.println(\"Replace 'a' with 'o': \" + text.replace('a', 'o'));\n        \n        // replaceAll() - replaces all occurrences matching the regex\n        System.out.println(\"Replace all spaces: \" + text.replaceAll(\"\\\\s\", \"-\"));\n        \n        // contains() - checks if string contains a sequence\n        System.out.println(\"Contains 'Methods': \" + text.contains(\"Methods\"));\n        \n        // startsWith() and endsWith()\n        System.out.println(\"Starts with '  Java': \" + text.startsWith(\"  Java\"));\n        System.out.println(\"Ends with 'Example  ': \" + text.endsWith(\"Example  \"));\n        \n        // isEmpty() - checks if string is empty\n        System.out.println(\"Is empty: \" + text.isEmpty());\n        \n        // String.join() - concatenates strings with a delimiter\n        String joined = String.join(\", \", \"Java\", \"Python\", \"C++\", \"JavaScript\");\n        System.out.println(\"Joined string: \" + joined);\n        \n        // split() - splits the string based on a delimiter\n        String[] parts = joined.split(\", \");\n        System.out.println(\"Split result:\");\n        for (String part : parts) {\n            System.out.println(\"  - \" + part);\n        }\n        \n        // valueOf() - converts different types to string\n        String numStr = String.valueOf(123.45);\n        System.out.println(\"Value of 123.45: \" + numStr);\n        \n        // format() - returns a formatted string\n        String formatted = String.format(\"Name: %s, Age: %d\", \"John\", 25);\n        System.out.println(\"Formatted string: \" + formatted);\n        \n        // strip() method (Java 11+) - removes whitespace from both ends (similar to trim)\n        System.out.println(\"Stripped: '\" + text.strip() + \"'\");\n        \n        // repeat() method (Java 11+) - repeats the string\n        String star = \"*\";\n        System.out.println(\"Repeated: \" + star.repeat(10));\n    }\n}"
          }
        
      },
      "Arrays": {
        "description": "Arrays are container objects that hold a fixed number of values of a single type. The length of an array is established when it's created.",
        
          "Array Basics": {
            "description": "Arrays are container objects that hold a fixed number of values of a single type. The length of an array is established when it's created.",
            "details": "Syntax:\ndataType[] arrayName;\narrayName = new dataType[size];\ndataType[] arrayName = new dataType[size];\ndataType[] arrayName = {value1, value2, ...};",
            "code": "public class ArrayBasicsExample {\n    public static void main(String[] args) {\n        // Declaration and creation\n        int[] numbers = new int[5];\n\n        // Initialization with values\n        int[] scores = {95, 85, 75, 90, 88};\n\n        // Accessing elements\n        System.out.println(numbers[0]); // Access first element\n        numbers[2] = 42; // Set third element to 42\n\n        // Array length\n        int length = numbers.length;\n\n        // Iterating with standard for loop\n        for (int i = 0; i < numbers.length; i++) {\n            System.out.println(\"Element at \" + i + \": \" + numbers[i]);\n        }\n\n        // Enhanced for loop (for-each)\n        for (int num : numbers) {\n            System.out.println(num);\n        }\n        \n        // Array Copying\n        // Source array\n        int[] source = {1, 2, 3, 4, 5};\n\n        // Using System.arraycopy()\n        int[] target1 = new int[source.length];\n        System.arraycopy(source, 0, target1, 0, source.length);\n\n        // Using Arrays.copyOf()\n        import java.util.Arrays;\n        int[] target2 = Arrays.copyOf(source, source.length);\n\n        // Manual copy\n        int[] target3 = new int[source.length];\n        for (int i = 0; i < source.length; i++) {\n            target3[i] = source[i];\n        }\n        \n        // Array Utility Methods\n        import java.util.Arrays;\n\n        // Sorting an array\n        int[] numArray = {5, 2, 9, 1, 8, 3};\n        Arrays.sort(numArray);\n\n        // Binary search (must be sorted first)\n        int index = Arrays.binarySearch(numArray, 8);\n\n        // Fill array with a value\n        int[] newArray = new int[5];\n        Arrays.fill(newArray, 10);\n\n        // Compare arrays\n        boolean areEqual = Arrays.equals(numArray, newArray);\n\n        // Convert array to string\n        String arrayString = Arrays.toString(numArray);\n    }\n}"
          },
          "Multidimensional Arrays": {
            "description": "Multidimensional arrays are arrays of arrays, allowing you to create tables, matrices, and other complex data structures.",
            "details": "Syntax:\ndataType[][] arrayName;\narrayName = new dataType[rows][columns];\ndataType[][] arrayName = new dataType[rows][columns];\ndataType[][] arrayName = {{val1, val2}, {val3, val4}};",
            "code": "public class MultidimensionalArraysExample {\n    public static void main(String[] args) {\n        // Create a 3x3 matrix\n        int[][] matrix = new int[3][3];\n\n        // Initialize with values\n        matrix[0][0] = 1; matrix[0][1] = 2; matrix[0][2] = 3;\n        matrix[1][0] = 4; matrix[1][1] = 5; matrix[1][2] = 6;\n        matrix[2][0] = 7; matrix[2][1] = 8; matrix[2][2] = 9;\n\n        // Direct initialization\n        int[][] grid = {\n            {1, 2, 3},\n            {4, 5, 6},\n            {7, 8, 9}\n        };\n\n        // Accessing elements\n        int value = grid[1][2]; // Gets the value 6\n\n        // Nested loops for iteration\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[i].length; j++) {\n                System.out.print(grid[i][j] + \" \");\n            }\n            System.out.println(); // New line after each row\n        }\n        \n        // Jagged Arrays (Irregular 2D Arrays)\n        // Each row can have different length\n        int[][] jaggedArray = new int[3][];\n        jaggedArray[0] = new int[4]; // First row has 4 columns\n        jaggedArray[1] = new int[2]; // Second row has 2 columns\n        jaggedArray[2] = new int[5]; // Third row has 5 columns\n\n        // Initialize jagged array directly\n        int[][] triangle = {\n            {1},\n            {2, 3},\n            {4, 5, 6},\n            {7, 8, 9, 10}\n        };\n\n        // Accessing and iterating through jagged array\n        for (int i = 0; i < triangle.length; i++) {\n            for (int j = 0; j < triangle[i].length; j++) {\n                System.out.print(triangle[i][j] + \" \");\n            }\n            System.out.println();\n        }\n        \n        // 3D Arrays\n        // 3D array (2x3x4) - 2 blocks, 3 rows, 4 columns\n        int[][][] threeDArray = new int[2][3][4];\n\n        // Setting a value in 3D array\n        threeDArray[0][1][2] = 42;\n\n        // Initialize 3D array\n        int[][][] cube = {\n            {{1, 2}, {3, 4}},\n            {{5, 6}, {7, 8}}\n        };\n\n        // Iterating through 3D array\n        for (int i = 0; i < cube.length; i++) {\n            for (int j = 0; j < cube[i].length; j++) {\n                for (int k = 0; k < cube[i][j].length; k++) {\n                    System.out.print(cube[i][j][k] + \" \");\n                }\n                System.out.println();\n            }\n            System.out.println(\"Next block\");\n        }\n    }\n}"
          }
        
      },
      "JavaMethods": {
        "description": "Methods are blocks of code that perform a specific task and can be reused throughout a program.",
        
          "Method Basics": {
            "description": "Methods are blocks of code that perform a specific task and can be reused throughout a program.",
            "details": "Syntax:\naccessModifier returnType methodName(parameterType parameterName, ...) {\n    // Method body\n    return value; // If not void\n}",
            "code": "public class MethodBasicsExample {\n    public static void main(String[] args) {\n        // Method call\n        greet();\n        \n        // Call method with parameters\n        int sum = add(5, 3);\n        System.out.println(\"Sum: \" + sum);\n        \n        // Call method with return value directly\n        System.out.println(\"Product: \" + multiply(4, 7));\n        \n        // Variable Parameters Method\n        // Call with different number of arguments\n        printNumbers(1, 2, 3);\n        printNumbers(10, 20, 30, 40, 50);\n        printNumbers(); // No arguments is also valid\n        \n        // Call sum with different number of arguments\n        System.out.println(\"Sum: \" + sum(1, 2, 3, 4, 5));\n        System.out.println(\"Sum: \" + sum(10, 20));\n        \n        // Method with Object Parameters and Return Type\n        // Create and use Student object\n        Student student = createStudent(\"Alice\", 20);\n        System.out.println(student.getName() + \" is \" + student.getAge() + \" years old\");\n        \n        // Create list of students\n        ArrayList<Student> students = createStudentList();\n        \n        // Process list of students\n        double avgAge = calculateAverageAge(students);\n        System.out.println(\"Average age: \" + avgAge);\n    }\n    \n    // Method with no parameters and no return value\n    public static void greet() {\n        System.out.println(\"Hello, World!\");\n    }\n    \n    // Method with parameters and return value\n    public static int add(int a, int b) {\n        return a + b;\n    }\n    \n    // Another method with parameters and return value\n    public static int multiply(int a, int b) {\n        return a * b;\n    }\n    \n    // Varargs method (variable number of arguments)\n    public static void printNumbers(int... numbers) {\n        System.out.println(\"Number of arguments: \" + numbers.length);\n        for (int num : numbers) {\n            System.out.print(num + \" \");\n        }\n        System.out.println();\n    }\n    \n    // Varargs with return value\n    public static int sum(int... numbers) {\n        int total = 0;\n        for (int num : numbers) {\n            total += num;\n        }\n        return total;\n    }\n    \n    // Method returning an object\n    public static Student createStudent(String name, int age) {\n        return new Student(name, age);\n    }\n    \n    // Method returning a collection\n    public static ArrayList<Student> createStudentList() {\n        ArrayList<Student> students = new ArrayList<>();\n        students.add(new Student(\"Bob\", 22));\n        students.add(new Student(\"Charlie\", 19));\n        students.add(new Student(\"David\", 21));\n        return students;\n    }\n    \n    // Method taking collection parameter\n    public static double calculateAverageAge(ArrayList<Student> students) {\n        double sum = 0;\n        for (Student student : students) {\n            sum += student.getAge();\n        }\n        return students.isEmpty() ? 0 : sum / students.size();\n    }\n    \n    // Inner class for Student\n    static class Student {\n        private String name;\n        private int age;\n        \n        public Student(String name, int age) {\n            this.name = name;\n            this.age = age;\n        }\n        \n        public String getName() { return name; }\n        public int getAge() { return age; }\n    }\n}"
          },
          "Method Overloading": {
            "description": "Method overloading allows you to define multiple methods with the same name but different parameters. It increases code readability and reusability.",
            "details": "Method overloading occurs when multiple methods in the same class have the same name but different parameter lists. The compiler determines which method to call based on the method signature.",
            "code": "public class MethodOverloadingExample {\n    public static void main(String[] args) {\n        // Call overloaded methods\n        display(5);\n        display(\"Hello\");\n        display(3.14);\n        display(10, 20);\n        display(\"Name\", 25);\n        \n        // Overloaded Methods with Different Return Types\n        // Different implementation of calculate method\n        int sum = calculate(5, 3, \"add\");\n        int product = calculate(5, 3, \"multiply\");\n        double division = calculate(10.0, 2.0);\n        \n        System.out.println(\"Sum: \" + sum);\n        System.out.println(\"Product: \" + product);\n        System.out.println(\"Division: \" + division);\n        \n        // Constructor Overloading Example\n        // Create persons using different constructors\n        Person p1 = new Person();\n        Person p2 = new Person(\"John\");\n        Person p3 = new Person(\"Alice\", 25);\n        Person p4 = new Person(\"Bob\", 30, \"123 Main St\");\n        \n        // Display information\n        System.out.println(\"Person 1:\");\n        p1.displayInfo();\n        \n        System.out.println(\"\\nPerson 2:\");\n        p2.displayInfo();\n        \n        System.out.println(\"\\nPerson 3:\");\n        p3.displayInfo();\n        \n        System.out.println(\"\\nPerson 4:\");\n        p4.displayInfo();\n    }\n    \n    // Method with int parameter\n    public static void display(int num) {\n        System.out.println(\"Integer: \" + num);\n    }\n    \n    // Method with String parameter\n    public static void display(String text) {\n        System.out.println(\"String: \" + text);\n    }\n    \n    // Method with double parameter\n    public static void display(double num) {\n        System.out.println(\"Double: \" + num);\n    }\n    \n    // Method with two int parameters\n    public static void display(int a, int b) {\n        System.out.println(\"Two integers: \" + a + \" and \" + b);\n    }\n    \n    // Method with String and int parameters\n    public static void display(String name, int age) {\n        System.out.println(\"Name: \" + name + \", Age: \" + age);\n    }\n    \n    // Method returning int with additional string parameter\n    public static int calculate(int a, int b, String operation) {\n        if (operation.equalsIgnoreCase(\"add\")) {\n            return a + b;\n        } else if (operation.equalsIgnoreCase(\"multiply\")) {\n            return a * b;\n        } else {\n            return 0; // Default case\n        }\n    }\n    \n    // Method with double parameters returning double\n    public static double calculate(double a, double b) {\n        return a / b;\n    }\n    \n    // Method with more parameters\n    public static int calculate(int a, int b, int c) {\n        return a + b + c;\n    }\n    \n    // Person class for constructor overloading example\n    static class Person {\n        private String name;\n        private int age;\n        private String address;\n        \n        // Default constructor\n        public Person() {\n            this.name = \"Unknown\";\n            this.age = 0;\n            this.address = \"Not specified\";\n        }\n        \n        // Constructor with name parameter\n        public Person(String name) {\n            this.name = name;\n            this.age = 0;\n            this.address = \"Not specified\";\n        }\n        \n        // Constructor with name and age parameters\n        public Person(String name, int age) {\n            this.name = name;\n            this.age = age;\n            this.address = \"Not specified\";\n        }\n        \n        // Constructor with all parameters\n        public Person(String name, int age, String address) {\n            this.name = name;\n            this.age = age;\n            this.address = address;\n        }\n        \n        // Method to display person details\n        public void displayInfo() {\n            System.out.println(\"Name: \" + name);\n            System.out.println(\"Age: \" + age);\n            System.out.println(\"Address: \" + address);\n        }\n    }\n}"
          },
          "Recursive Functions": {
            "description": "Recursive functions are methods that call themselves to solve a problem by breaking it down into smaller, similar subproblems.",
            "details": "A recursive method solves a problem by calling a copy of itself to work on a smaller problem. This is called the recursion step. The recursion step can result in many more recursive calls. It's important to ensure that the recursion terminates by including base cases that are solved without further recursion.",
            "code": "public class RecursiveFunctionsExample {\n    public static void main(String[] args) {\n        // Factorial Example\n        int n = 5;\n        System.out.println(n + \"! = \" + factorial(n));\n        \n        // Calculate factorials for numbers 0 to 10\n        for (int i = 0; i <= 10; i++) {\n            System.out.println(i + \"! = \" + factorial(i));\n        }\n        \n        // Fibonacci Example\n        int fibN = 10;\n        System.out.println(\"\\nFibonacci sequence up to term \" + fibN + \":\");\n        \n        for (int i = 0; i <= fibN; i++) {\n            System.out.print(fibonacci(i) + \" \");\n        }\n        \n        System.out.println(\"\\n\\nFibonacci term at position \" + fibN + \": \" + fibonacci(fibN));\n        \n        // Binary Search Example\n        int[] sortedArray = {2, 5, 8, 12, 16, 23, 38, 45, 56, 72, 91};\n        \n        // Search for various values\n        int[] valuesToSearch = {5, 23, 56, 100, 1};\n        \n        System.out.println(\"\\nBinary Search Results:\");\n        for (int value : valuesToSearch) {\n            int result = binarySearch(sortedArray, value, 0, sortedArray.length - 1);\n            if (result == -1) {\n                System.out.println(value + \" not found in the array\");\n            } else {\n                System.out.println(value + \" found at index \" + result);\n            }\n        }\n        \n        // Tree Traversal Example\n        System.out.println(\"\\nTree Traversal Example:\");\n        // Create a binary tree\n        TreeNode root = new TreeNode(1);\n        root.left = new TreeNode(2);\n        root.right = new TreeNode(3);\n        root.left.left = new TreeNode(4);\n        root.left.right = new TreeNode(5);\n        root.right.left = new TreeNode(6);\n        root.right.right = new TreeNode(7);\n        \n        System.out.println(\"Inorder traversal:\");\n        inorderTraversal(root);\n        System.out.println();\n        \n        System.out.println(\"Preorder traversal:\");\n        preorderTraversal(root);\n        System.out.println();\n        \n        System.out.println(\"Postorder traversal:\");\n        postorderTraversal(root);\n        System.out.println();\n    }\n    \n    // Recursive factorial method\n    public static long factorial(int n) {\n        // Base case\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        \n        // Recursive case\n        return n * factorial(n - 1);\n    }\n    \n    // Recursive Fibonacci method\n    public static int fibonacci(int n) {\n        // Base cases\n        if (n <= 1) {\n            return n;\n        }\n        \n        // Recursive case: Fib(n) = Fib(n-1) + Fib(n-2)\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n    \n    // Recursive binary search method\n    public static int binarySearch(int[] array, int target, int left, int right) {\n        // Base case: element not found\n        if (left > right) {\n            return -1;\n        }\n        \n        // Calculate middle point\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (array[mid] == target) {\n            return mid;\n        }\n        \n        // If target is smaller, search in left subarray\n        if (array[mid] > target) {\n            return binarySearch(array, target, left, mid - 1);\n        }\n        \n        // If target is larger, search in right subarray\n        return binarySearch(array, target, mid + 1, right);\n    }\n    \n    // Tree node class for tree traversal example\n    static class TreeNode {\n        int value;\n        TreeNode left;\n        TreeNode right;\n        \n        TreeNode(int value) {\n            this.value = value;\n            left = null;\n            right = null;\n        }\n    }\n    \n    // Recursive inorder traversal (Left, Root, Right)\n    public static void inorderTraversal(TreeNode node) {\n        if (node == null) {\n            return;\n        }\n        \n        inorderTraversal(node.left);  // Visit left subtree\n        System.out.print(node.value + \" \");  // Visit root\n        inorderTraversal(node.right);  // Visit right subtree\n    }\n    \n    // Recursive preorder traversal (Root, Left, Right)\n    public static void preorderTraversal(TreeNode node) {\n        if (node == null) {\n            return;\n        }\n        \n        System.out.print(node.value + \" \");  // Visit root\n        preorderTraversal(node.left);  // Visit left subtree\n        preorderTraversal(node.right);  // Visit right subtree\n    }\n    \n    // Recursive postorder traversal (Left, Right, Root)\n    public static void postorderTraversal(TreeNode node) {\n        if (node == null) {\n            return;\n        }\n        \n        postorderTraversal(node.left);  // Visit left subtree\n        postorderTraversal(node.right);  // Visit right subtree\n        System.out.print(node.value + \" \");  // Visit root\n    }\n}"
          }
        
      },
      "JavaOOPS": {
        "ObjectAndClass": {
          "description": "Objects and classes are the fundamental concepts of Object-Oriented Programming. A class is a blueprint for creating objects, which are instances of that class.",
          "syntax": "\"classDeclaration\": \"public class ClassName {\\n    // Fields\\n    // Constructors\\n    // Methods\\n}\", \"objectCreation\": \"ClassName objectName = new ClassName();",
          "examples": "title\": \"Basic Class and Object Creation\", \"code\": \"// Class definition\\npublic class Car {\\n    // Fields (instance variables)\\n    String make;\\n    String model;\\n    int year;\\n    double price;\\n    \\n    // Constructor\\n    public Car(String make, String model, int year, double price) {\\n        this.make = make;\\n        this.model = model;\\n        this.year = year;\\n        this.price = price;\\n    }\\n    \\n    // Method\\n    public void displayInfo() {\\n        System.out.println(year + \\\" \\\" + make + \\\" \\\" + model);\\n        System.out.println(\\\"Price: $\\\" + price);\\n    }\\n}\\n\\n// Usage example\\npublic class Main {\\n    public static void main(String[] args) {\\n        // Create Car objects\\n        Car car1 = new Car(\\\"Toyota\\\", \\\"Corolla\\\", 2022, 25000.00);\\n        Car car2 = new Car(\\\"Honda\\\", \\\"Civic\\\", 2023, 27000.00);\\n        \\n        // Call methods on the objects\\n        System.out.println(\\\"Car 1 Information:\\\");\\n        car1.displayInfo();\\n        \\n        System.out.println(\\\"\\\\nCar 2 Information:\\\");\\n        car2.displayInfo();\\n    }\\n}\"}, {\"title\": \"Access Modifiers and Encapsulation\", \"code\": \"public class Student {\\n    // Private fields (encapsulation)\\n    private String name;\\n    private int age;\\n    private double gpa;\\n    \\n    // Constructor\\n    public Student(String name, int age, double gpa) {\\n        this.name = name;\\n        this.age = age;\\n        this.gpa = gpa;\\n    }\\n    \\n    // Getters (accessor methods)\\n    public String getName() {\\n        return name;\\n    }\\n    \\n    public int getAge() {\\n        return age;\\n    }\\n    \\n    public double getGpa() {\\n        return gpa;\\n    }\\n    \\n    // Setters (mutator methods)\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n    \\n    public void setAge(int age) {\\n        if (age > 0) { // Validation\\n            this.age = age;\\n        }\\n    }\\n    \\n    public void setGpa(double gpa) {\\n        if (gpa >= 0.0 && gpa <= 4.0) { // Validation\\n            this.gpa = gpa;\\n        }\\n    }\\n    \\n    // Method to check if student has honors\\n    public boolean hasHonors() {\\n        return gpa >= 3.5;\\n    }\\n}\\n\\n// Usage example\\npublic class StudentDemo {\\n    public static void main(String[] args) {\\n        // Create Student objects\\n        Student student1 = new Student(\\\"John\\\", 20, 3.8);\\n        Student student2 = new Student(\\\"Emma\\\", 19, 3.2);\\n        \\n        // Access properties using getters\\n        System.out.println(student1.getName() + \\\"'s GPA: \\\" + student1.getGpa());\\n        System.out.println(student2.getName() + \\\"'s GPA: \\\" + student2.getGpa());\\n        \\n        // Check honors status\\n        System.out.println(student1.getName() + \\\" has honors: \\\" + student1.hasHonors());\\n        System.out.println(student2.getName() + \\\" has honors: \\\" + student2.hasHonors());\\n        \\n        // Modify properties using setters\\n        student2.setGpa(3.7);\\n        System.out.println(\\\"After GPA update:\\\");\\n        System.out.println(student2.getName() + \\\"'s GPA: \\\" + student2.getGpa());\\n        System.out.println(student2.getName() + \\\" has honors: \\\" + student2.hasHonors());\\n        \\n        // Invalid value is ignored due to validation\\n        student1.setGpa(5.0); // Out of range\\n        System.out.println(student1.getName() + \\\"'s GPA (unchanged): \\\" + student1.getGpa());\\n    }\\n}\"}, {\"title\": \"Static Members (Class Variables and Methods)\", \"code\": \"public class MathUtils {\\n    // Static variable (class variable) - shared among all instances\\n    public static final double PI = 3.14159;\\n    private static int operationsPerformed = 0;\\n    \\n    // Instance variable - separate for each instance\\n    private String calculationName;\\n    \\n    public MathUtils(String calculationName) {\\n        this.calculationName = calculationName;\\n    }\\n    \\n    // Static method (class method)\\n    public static double calculateCircleArea(double radius) {\\n        operationsPerformed++;\\n        return PI * radius * radius;\\n    }\\n    \\n    // Static method with counter\\n    public static double calculateCircleCircumference(double radius) {\\n        operationsPerformed++;\\n        return 2 * PI * radius;\\n    }\\n    \\n    // Instance method (requires an instance)\\n    public void displayCalculation(double value) {\\n        System.out.println(calculationName + \\\": \\\" + value);\\n    }\\n    \\n    // Static method to get operation count\\n    public static int getOperationsPerformed() {\\n        return operationsPerformed;\\n    }\\n}\\n\\n// Usage example\\npublic class StaticDemo {\\n    public static void main(String[] args) {\\n        // Access static variable directly from class\\n        System.out.println(\\\"PI value: \\\" + MathUtils.PI);\\n        \\n        // Call static methods directly from class\\n        double area = MathUtils.calculateCircleArea(5);\\n        double circumference = MathUtils.calculateCircleCircumference(5);\\n        \\n        System.out.println(\\\"Circle area: \\\" + area);\\n        System.out.println(\\\"Circle circumference: \\\" + circumference);\\n        \\n        // Create instances for instance methods\\n        MathUtils calc1 = new MathUtils(\\\"Area calculation\\\");\\n        MathUtils calc2 = new MathUtils(\\\"Circumference calculation\\\");\\n        \\n        // Call instance methods\\n        calc1.displayCalculation(area);\\n        calc2.displayCalculation(circumference);\\n        \\n        // Access static counter\\n        System.out.println(\\\"Operations performed: \\\" + MathUtils.getOperationsPerformed());\\n        \\n        // Perform more operations\\n        MathUtils.calculateCircleArea(10);\\n        MathUtils.calculateCircleCircumference(10);\\n        \\n        // Counter is shared among all instances\\n        System.out.println(\\\"Operations performed: \\\" + MathUtils.getOperationsPerformed());\\n    }\\n}"
        },
        "Inheritance": {
          "description": "Inheritance is an OOP concept where a class (subclass/child) inherits attributes and methods from another class (superclass/parent). It promotes code reusability and establishes an 'is-a' relationship between classes.",
          "syntax": "inheritance\": \"public class ChildClass extends ParentClass {\\n    // Additional fields and methods\\n    // Override methods from parent class\\n}",
          "examples": "title\": \"Basic Inheritance\", \"code\": \"// Parent class\\npublic class Animal {\\n    protected String name;\\n    protected int age;\\n    \\n    public Animal(String name, int age) {\\n        this.name = name;\\n        this.age = age;\\n    }\\n    \\n    public void eat() {\\n        System.out.println(name + \\\" is eating\\\");\\n    }\\n    \\n    public void sleep() {\\n        System.out.println(name + \\\" is sleeping\\\");\\n    }\\n    \\n    public String getName() {\\n        return name;\\n    }\\n    \\n    public int getAge() {\\n        return age;\\n    }\\n}\\n\\n// Child class inheriting from Animal\\npublic class Dog extends Animal {\\n    private String breed;\\n    \\n    public Dog(String name, int age, String breed) {\\n        super(name, age); // Call parent constructor\\n        this.breed = breed;\\n    }\\n    \\n    // New method specific to Dog\\n    public void bark() {\\n        System.out.println(name + \\\" is barking\\\");\\n    }\\n    \\n    // Override parent method\\n    @Override\\n    public void eat() {\\n        System.out.println(name + \\\" the \\\" + breed + \\\" is eating dog food\\\");\\n    }\\n    \\n    public String getBreed() {\\n        return breed;\\n    }\\n}\\n\\n// Usage example\\npublic class InheritanceDemo {\\n    public static void main(String[] args) {\\n        // Create Animal object\\n        Animal animal = new Animal(\\\"Generic Animal\\\", 5);\\n        animal.eat();\\n        animal.sleep();\\n        \\n        // Create Dog object\\n        Dog dog = new Dog(\\\"Buddy\\\", 3, \\\"Golden Retriever\\\");\\n        \\n        // Inherited methods\\n        dog.sleep(); // From Animal class\\n        \\n        // Overridden method\\n        dog.eat();   // Dog's implementation\\n        \\n        // Dog-specific method\\n        dog.bark();\\n        \\n        // Access properties\\n        System.out.println(dog.getName() + \\\" is a \\\" + dog.getBreed() + \\\" and is \\\" + \\n                           dog.getAge() + \\\" years old\\\");\\n    }\\n}\"}, {\"title\": \"Multi-level Inheritance\", \"code\": \"// Base class\\nclass Vehicle {\\n    protected String brand;\\n    protected int year;\\n    \\n    public Vehicle(String brand, int year) {\\n        this.brand = brand;\\n        this.year = year;\\n    }\\n    \\n    public void start() {\\n        System.out.println(\\\"Vehicle starting\\\");\\n    }\\n    \\n    public void stop() {\\n        System.out.println(\\\"Vehicle stopping\\\");\\n    }\\n    \\n    public String getInfo() {\\n        return brand + \\\" \\\" + year;\\n    }\\n}\\n\\n// First level child class\\nclass Car extends Vehicle {\\n    private int numDoors;\\n    \\n    public Car(String brand, int year, int numDoors) {\\n        super(brand, year);\\n        this.numDoors = numDoors;\\n    }\\n    \\n    @Override\\n    public void start() {\\n        System.out.println(\\\"Car engine starting\\\");\\n    }\\n    \\n    public void drive() {\\n        System.out.println(\\\"Car driving\\\");\\n    }\\n    \\n    @Override\\n    public String getInfo() {\\n        return super.getInfo() + \\\", \\\" + numDoors + \\\" doors\\\";\\n    }\\n}\\n\\n// Second level child class\\nclass ElectricCar extends Car {\\n    private int batteryCapacity;\\n    \\n    public ElectricCar(String brand, int year, int numDoors, int batteryCapacity) {\\n        super(brand, year, numDoors);\\n        this.batteryCapacity = batteryCapacity;\\n    }\\n    \\n    @Override\\n    public void start() {\\n        System.out.println(\\\"Electric car powering up\\\");\\n    }\\n    \\n    public void charge() {\\n        System.out.println(\\\"Electric car charging\\\");\\n    }\\n    \\n    @Override\\n    public String getInfo() {\\n        return super.getInfo() + \\\", \\\" + batteryCapacity + \\\" kWh battery\\\";\\n    }\\n}\\n\\n// Usage example\\npublic class MultilevelInheritanceDemo {\\n    public static void main(String[] args) {\\n        // Create objects of each class\\n        Vehicle vehicle = new Vehicle(\\\"Generic\\\", 2020);\\n        Car car = new Car(\\\"Toyota\\\", 2022, 4);\\n        ElectricCar electricCar = new ElectricCar(\\\"Tesla\\\", 2023, 4, 75);\\n        \\n        // Call methods\\n        System.out.println(\\\"Vehicle Info: \\\" + vehicle.getInfo());\\n        vehicle.start();\\n        vehicle.stop();\\n        \\n        System.out.println(\\\"\\\\nCar Info: \\\" + car.getInfo());\\n        car.start(); // Overridden method\\n        car.drive(); // Car-specific method\\n        car.stop();  // Inherited from Vehicle\\n        \\n        System.out.println(\\\"\\\\nElectric Car Info: \\\" + electricCar.getInfo());\\n        electricCar.start();  // Overridden method\\n        electricCar.drive();  // Inherited from Car\\n        electricCar.charge(); // ElectricCar-specific method\\n        electricCar.stop();   // Inherited from Vehicle\\n    }\\n}\"}, {\"title\": \"The 'super' Keyword\", \"code\": \"// Parent class\\nclass Shape {\\n    protected String color;\\n    \\n    public Shape() {\\n        this.color = \\\"transparent\\\";\\n        System.out.println(\\\"Shape default constructor called\\\");\\n    }\\n    \\n    public Shape(String color) {\\n        this.color = color;\\n        System.out.println(\\\"Shape parameterized constructor called\\\");\\n    }\\n    \\n    public double calculateArea() {\\n        return 0.0; // Default implementation\\n    }\\n    \\n    public void display() {\\n        System.out.println(\\\"This is a shape with color: \\\" + color);\\n    }\\n}\\n\\n// Child class\\nclass Rectangle extends Shape {\\n    private double length;\\n    private double width;\\n    \\n    public Rectangle() {\\n        super(); // Call parent default constructor\\n        this.length = 1.0;\\n        this.width = 1.0;\\n        System.out.println(\\\"Rectangle default constructor called\\\");\\n    }\\n    \\n    public Rectangle(double length, double width) {\\n        this(length, width, \\\"black\\\"); // Call another constructor in this class\\n        System.out.println(\\\"Rectangle 2-param constructor called\\\");\\n    }\\n    \\n    public Rectangle(double length, double width, String color) {\\n        super(color); // Call parent parameterized constructor\\n        this.length = length;\\n        this.width = width;\\n        System.out.println(\\\"Rectangle 3-param constructor called\\\");\\n    }\\n    \\n    @Override\\n    public double calculateArea() {\\n        return length * width;\\n    }\\n    \\n    @Override\\n    public void display() {\\n        super.display(); // Call parent method\\n        System.out.println(\\\"This is a rectangle with length: \\\" + length + \\n                         \\\" and width: \\\" + width);\\n        System.out.println(\\\"Area: \\\" + calculateArea());\\n    }\\n}\\n\\n// Usage\\npublic class SuperKeywordDemo {\\n    public static void main(String[] args) {\\n        System.out.println(\\\"Creating a default rectangle:\\\");\\n        Rectangle rect1 = new Rectangle();\\n        rect1.display();\\n        \\n        System.out.println(\\\"\\\\nCreating a rectangle with dimensions:\\\");\\n        Rectangle rect2 = new Rectangle(5.0, 3.0);\\n        rect2.display();\\n        \\n        System.out.println(\\\"\\\\nCreating a rectangle with dimensions and color:\\\");\\n        Rectangle rect3 = new Rectangle(4.0, 2.0, \\\"blue\\\");\\n        rect3.display();\\n    }\\n}"
        },
        "Polymorphism": {
          "description": "Polymorphism means 'many forms' and it occurs when we have many classes that are related to each other by inheritance. It allows us to perform a single action in different ways.",
          "examples": "[{\"title\": \"Method Overriding (Runtime Polymorphism)\", \"code\": \"// Parent class\\nclass Animal {\\n    public void makeSound() {\\n        System.out.println(\\\"Animal makes a sound\\\");\\n    }\\n    \\n    public void eat() {\\n        System.out.println(\\\"Animal eats food\\\");\\n    }\\n}\\n\\n// Child classes\\nclass Dog extends Animal {\\n    @Override\\n    public void makeSound() {\\n        System.out.println(\\\"Dog barks: Woof! Woof!\\\");\\n    }\\n    \\n    @Override\\n    public void eat() {\\n        System.out.println(\\\"Dog eats meat\\\");\\n    }\\n    \\n    public void wagTail() {\\n        System.out.println(\\\"Dog wags tail\\\");\\n    }\\n}\\n\\nclass Cat extends Animal {\\n    @Override\\n    public void makeSound() {\\n        System.out.println(\\\"Cat meows: Meow!\\\");\\n    }\\n    \\n    @Override\\n    public void eat() {\\n        System.out.println(\\\"Cat eats fish\\\");\\n    }\\n    \\n    public void purr() {\\n        System.out.println(\\\"Cat purrs\\\");\\n    }\\n}\\n\\n// Usage example\\npublic class PolymorphismDemo {\\n    public static void main(String[] args) {\\n        // Create Animal, Dog and Cat objects\\n        Animal animal = new Animal();\\n        Animal dog = new Dog();     // Upcasting - a Dog is treated as an Animal\\n        Animal cat = new Cat();     // Upcasting - a Cat is treated as an Animal\\n        \\n        // Call methods on the Animal reference\\n        System.out.println(\\\"Using Animal reference:\\\");\\n        animal.makeSound();\\n        animal.eat();\\n        \\n        // Call methods on the Dog reference (polymorphic behavior)\\n        System.out.println(\\\"\\\\nUsing Dog reference (polymorphic):\\\");\\n        dog.makeSound();  // Calls Dog's implementation\\n        dog.eat();        // Calls Dog's implementation\\n        // dog.wagTail(); // Error: not accessible through Animal reference\\n        \\n        // Call methods on the Cat reference (polymorphic behavior)\\n        System.out.println(\\\"\\\\nUsing Cat reference (polymorphic):\\\");\\n        cat.makeSound();  // Calls Cat's implementation\\n        cat.eat();        // Calls Cat's implementation\\n        // cat.purr();    // Error: not accessible through Animal reference\\n        \\n        // Demonstrate downcasting\\n        System.out.println(\\\"\\\\nDemonstrating downcasting:\\\");\\n        if (dog instanceof Dog) {\\n            Dog actualDog = (Dog) dog;  // Downcasting\\n            actualDog.wagTail();        // Now we can call Dog-specific method\\n        }\\n        \\n        if (cat instanceof Cat) {\\n            Cat actualCat = (Cat) cat;  // Downcasting\\n            actualCat.purr();           // Now we can call Cat-specific method\\n        }\\n        \\n        // Polymorphic method call\\n        System.out.println(\\\"\\\\nPolymorphic method calls:\\\");\\n        processAnimal(animal);\\n        processAnimal(dog);\\n        processAnimal(cat);\\n    }\\n    \\n    // Method that takes an Animal parameter but processes different subclasses differently\\n    public static void processAnimal(Animal animal) {\\n        System.out.println(\\\"Processing animal:\\\");\\n        animal.makeSound(); // Polymorphic call - behavior depends on actual object type\\n    }\\n}\"}, {\"title\": \"Interface Polymorphism\", \"code\": \"// Interface definition\\ninterface Drawable {\\n    void draw(); // Abstract method (no implementation)\\n    \\n    // Default method (with implementation) - Java 8 and later\\n    default void displayInfo() {\\n        System.out.println(\\\"This is a drawable object\\\");\\n    }\\n}\\n\\n// Classes implementing the interface\\nclass Circle implements Drawable {\\n    private double radius;\\n    \\n    public Circle(double radius) {\\n        this.radius = radius;\\n    }\\n    \\n    @Override\\n    public void draw() {\\n        System.out.println(\\\"Drawing a circle with radius \\\" + radius);\\n    }\\n    \\n    @Override\\n    public void displayInfo() {\\n        System.out.println(\\\"This is a circle with radius \\\" + radius);\\n    }\\n}\\n\\nclass Rectangle implements Drawable {\\n    private double length;\\n    private double width;\\n    \\n    public Rectangle(double length, double width) {\\n        this.length = length;\\n        this.width = width;\\n    }\\n    \\n    @Override\\n    public void draw() {\\n        System.out.println(\\\"Drawing a rectangle with length \\\" + length + \\n                          \\\" and width \\\" + width);\\n    }\\n    \\n    // Using default implementation from interface\\n}\\n\\nclass Triangle implements Drawable {\\n    private double base;\\n    private double height;\\n    \\n    public Triangle(double base, double height) {\\n        this.base = base;\\n        this.height = height;\\n    }\\n    \\n    @Override\\n    public void draw() {\\n        System.out.println(\\\"Drawing a triangle with base \\\" + base + \\n                          \\\" and height \\\" + height);\\n    }\\n}\\n\\n// Usage example\\npublic class InterfacePolymorphismDemo {\\n    public static void main(String[] args) {\\n        // Create objects\\n        Drawable circle = new Circle(5.0);\\n        Drawable rectangle = new Rectangle(4.0, 6.0);\\n        Drawable triangle = new Triangle(3.0, 4.0);\\n        \\n        // Call methods polymorphically\\n        drawShape(circle);\\n        drawShape(rectangle);\\n        drawShape(triangle);\\n        \\n        // Show info\\n        System.out.println(\\\"\\\\nDisplaying information:\\\");\\n        circle.displayInfo();    // Overridden method\\n        rectangle.displayInfo(); // Default method from interface\\n        triangle.displayInfo();  // Default method from interface\\n    }\\n    \\n    // Polymorphic method that works with any Drawable object\\n    public static void drawShape(Drawable drawable) {\\n        drawable.draw();\\n    }\\n}\"}, {\"title\": \"Abstract Class Polymorphism\", \"code\": \"// Abstract class\\nabstract class Shape {\\n    protected String color;\\n    \\n    // Constructor\\n    public Shape(String color) {\\n        this.color = color;\\n    }\\n    \\n    // Abstract method - must be implemented by subclasses\\n    public abstract double calculateArea();\\n    \\n    // Concrete method - inherited by all subclasses\\n    public void display() {\\n        System.out.println(\\\"This is a \\\" + color + \\\" shape\\\");\\n    }\\n    \\n    // Getter method\\n    public String getColor() {\\n        return color;\\n    }\\n}\\n\\n// Concrete subclasses\\nclass Circle extends Shape {\\n    private double radius;\\n    \\n    public Circle(String color, double radius) {\\n        super(color);\\n        this.radius = radius;\\n    }\\n    \\n    @Override\\n    public double calculateArea() {\\n        return Math.PI * radius * radius;\\n    }\\n    \\n    @Override\\n    public void display() {\\n        System.out.println(\\\"This is a \\\" + color + \\\" circle with radius \\\" + radius);\\n        System.out.println(\\\"Area: \\\" + calculateArea());\\n    }\\n}\\n\\nclass Rectangle extends Shape {\\n    private double length;\\n    private double width;\\n    \\n    public Rectangle(String color, double length, double width) {\\n        super(color);\\n        this.length = length;\\n        this.width = width;\\n    }\\n    \\n    @Override\\n    public double calculateArea() {\\n        return length * width;\\n    }\\n    \\n    @Override\\n    public void display() {\\n        System.out.println(\\\"This is a \\\" + color + \\\" rectangle with length \\\" + \\n                         length + \\\" and width \\\" + width);\\n        System.out.println(\\\"Area: \\\" + calculateArea());\\n    }\\n}\\n\\n// Usage example\\npublic class AbstractPolymorphismDemo {\\n    public static void main(String[] args) {\\n        // Shape shape = new Shape(\\\"red\\\"); // Error: Cannot instantiate abstract class\\n        \\n        // Create objects using polymorphic references\\n        Shape circle = new Circle(\\\"blue\\\", 5.0);\\n        Shape rectangle = new Rectangle(\\\"green\\\", 4.0, 6.0);\\n        \\n        // Process shapes polymorphically\\n        System.out.println(\\\"Processing shapes:\\\");\\n        processShape(circle);\\n        processShape(rectangle);\\n        \\n        // Array of shapes - demonstrating polymorphism\\n        Shape[] shapes = new Shape[3];\\n        shapes[0] = new Circle(\\\"red\\\", 3.0);\\n        shapes[1] = new Rectangle(\\\"yellow\\\", 2.0, 8.0);\\n        shapes[2] = new Circle(\\\"purple\\\", 7.0);\\n        \\n        System.out.println(\\\"\\\\nProcessing shapes from array:\\\");\\n        for (Shape shape : shapes) {\\n            processShape(shape);\\n        }\\n    }\\n    \\n    // Polymorphic method that works with any Shape subclass\\n    public static void processShape(Shape shape) {\\n        System.out.println(\\\"Shape color: \\\" + shape.getColor());\\n        System.out.println(\\\"Shape area: \\\" + shape.calculateArea());\\n        shape.display(); // Polymorphic call\\n        System.out.println();\\n    }\\n}\"}]"
        },

        "Abstraction": {
          "description": "Abstraction is a process of hiding implementation details and showing only functionality to the user. It lets you focus on what the object does instead of how it does it.",
          "examples": "{\"AbstractClasses\":{\"title\":\"Abstract Classes\",\"code\":\"// Abstract class\\nabstract class DatabaseConnection {\\n    protected String connectionString;\\n    protected boolean isConnected;\\n    \\n    // Constructor\\n    public DatabaseConnection(String connectionString) {\\n        this.connectionString = connectionString;\\n        this.isConnected = false;\\n    }\\n    \\n    // Abstract methods - must be implemented by subclasses\\n    abstract void connect();\\n    abstract void disconnect();\\n    abstract void executeQuery(String query);\\n    \\n    // Concrete methods shared by all subclasses\\n    public boolean isConnected() {\\n        return isConnected;\\n    }\\n    \\n    public void showConnectionInfo() {\\n        System.out.println(\\\"Connection string: \\\" + connectionString);\\n        System.out.println(\\\"Connected: \\\" + isConnected);\\n    }\\n}\\n\\n// Concrete subclass implementing the abstract class\\nclass MySQLConnection extends DatabaseConnection {\\n    private String username;\\n    private String password;\\n    \\n    public MySQLConnection(String host, String database, String username, String password) {\\n        super(\\\"jdbc:mysql://\\\" + host + \\\"/\\\" + database);\\n        this.username = username;\\n        this.password = password;\\n    }\\n    \\n    @Override\\n    void connect() {\\n        // In a real application, this would contain actual connection code\\n        System.out.println(\\\"Connecting to MySQL database using \\\" + connectionString);\\n        System.out.println(\\\"Username: \\\" + username);\\n        isConnected = true;\\n    }\\n    \\n    @Override\\n    void disconnect() {\\n        System.out.println(\\\"Disconnecting from MySQL database\\\");\\n        isConnected = false;\\n    }\\n    \\n    @Override\\n    void executeQuery(String query) {\\n        if (isConnected) {\\n            System.out.println(\\\"Executing MySQL query: \\\" + query);\\n        } else {\\n            System.out.println(\\\"Cannot execute query. Not connected to database.\\\");\\n        }\\n    }\\n}\\n\\n// Another concrete subclass\\nclass PostgreSQLConnection extends DatabaseConnection {\\n    private String username;\\n    private String password;\\n    \\n    public PostgreSQLConnection(String host, String database, String username, String password) {\\n        super(\\\"jdbc:postgresql://\\\" + host + \\\"/\\\" + database);\\n        this.username = username;\\n        this.password = password;\\n    }\\n    \\n    @Override\\n    void connect() {\\n        System.out.println(\\\"Connecting to PostgreSQL database using \\\" + connectionString);\\n        System.out.println(\\\"Username: \\\" + username);\\n        isConnected = true;\\n    }\\n    \\n    @Override\\n    void disconnect() {\\n        System.out.println(\\\"Disconnecting from PostgreSQL database\\\");\\n        isConnected = false;\\n    }\\n    \\n    @Override\\n    void executeQuery(String query) {\\n        if (isConnected) {\\n            System.out.println(\\\"Executing PostgreSQL query: \\\" + query);\\n        } else {\\n            System.out.println(\\\"Cannot execute query. Not connected to database.\\\");\\n        }\\n    }\\n}\\n\\n// Usage example\\npublic class AbstractionDemo {\\n    public static void main(String[] args) {\\n        // Create database connections\\n        DatabaseConnection mysql = new MySQLConnection(\\\"localhost\\\", \\\"mydb\\\", \\\"user\\\", \\\"password\\\");\\n        DatabaseConnection postgres = new PostgreSQLConnection(\\\"localhost\\\", \\\"pgdb\\\", \\\"admin\\\", \\\"secure123\\\");\\n        \\n        // Work with MySQL connection\\n        System.out.println(\\\"=== MySQL Connection ===\\\\n\\\");\\n        mysql.connect();\\n        mysql.showConnectionInfo();\\n        mysql.executeQuery(\\\"SELECT * FROM users\\\");\\n        mysql.disconnect();\\n        \\n        System.out.println(\\\"\\\\n=== PostgreSQL Connection ===\\\\n\\\");\\n        postgres.connect();\\n        postgres.showConnectionInfo();\\n        postgres.executeQuery(\\\"SELECT * FROM customers\\\");\\n        postgres.executeQuery(\\\"INSERT INTO logs VALUES('test')\\\");\\n        postgres.disconnect();\\n        \\n        // Try executing query after disconnection\\n        System.out.println();\\n        postgres.executeQuery(\\\"SELECT * FROM products\\\"); // Should show error message\\n    }\\n}\"},\"Interfaces\":{\"title\":\"Interfaces\",\"code\":\"// Interface defining functionality for payment processing\\ninterface PaymentProcessor {\\n    boolean processPayment(double amount);\\n    void refundPayment(String transactionId, double amount);\\n    String getPaymentStatus(String transactionId);\\n    \\n    // Default method - Java 8 and later\\n    default void printReceipt(String transactionId, double amount) {\\n        System.out.println(\\\"=== Payment Receipt ===\\\\n\\\" +\\n                          \\\"Transaction ID: \\\" + transactionId + \\\"\\\\n\\\" +\\n                          \\\"Amount: $\\\" + amount + \\\"\\\\n\\\" +\\n                          \\\"Status: \\\" + getPaymentStatus(transactionId) + \\\"\\\\n\\\" +\\n                          \\\"========================\\\");\\n    }\\n}\\n\\n// Interface for security features\\ninterface SecurePayment {\\n    boolean verifyUser(String userId);\\n    boolean encryptData(String data);\\n}\\n\\n// Implementation class for credit card payments\\nclass CreditCardProcessor implements PaymentProcessor, SecurePayment {\\n    private double minimumAmount = 0.50;\\n    \\n    @Override\\n    public boolean processPayment(double amount) {\\n        if (amount < minimumAmount) {\\n            System.out.println(\\\"Amount too small for credit card processing\\\");\\n            return false;\\n        }\\n        System.out.println(\\\"Processing credit card payment for $\\\" + amount);\\n        // Credit card processing logic would go here\\n        return true;\\n    }\\n    \\n    @Override\\n    public void refundPayment(String transactionId, double amount) {\\n        System.out.println(\\\"Refunding $\\\" + amount + \\\" to credit card for transaction \\\" + transactionId);\\n    }\\n    \\n    @Override\\n    public String getPaymentStatus(String transactionId) {\\n        // In a real app, would check the status from a database\\n        return \\\"Completed\\\";\\n    }\\n    \\n    @Override\\n    public boolean verifyUser(String userId) {\\n        System.out.println(\\\"Verifying user through credit card verification process\\\");\\n        return true;\\n    }\\n    \\n    @Override\\n    public boolean encryptData(String data) {\\n        System.out.println(\\\"Encrypting sensitive credit card data\\\");\\n        return true;\\n    }\\n    \\n    // Specific method for credit card processing\\n    public void storeCardDetails(String cardNumber, String expiryDate, String cvv) {\\n        String maskedCardNumber = \\\"XXXX-XXXX-XXXX-\\\" + cardNumber.substring(cardNumber.length() - 4);\\n        System.out.println(\\\"Storing masked card details: \\\" + maskedCardNumber);\\n    }\\n}\\n\\n// Implementation for PayPal payments\\nclass PayPalProcessor implements PaymentProcessor {\\n    @Override\\n    public boolean processPayment(double amount) {\\n        System.out.println(\\\"Processing PayPal payment for $\\\" + amount);\\n        // PayPal processing logic would go here\\n        return true;\\n    }\\n    \\n    @Override\\n    public void refundPayment(String transactionId, double amount) {\\n        System.out.println(\\\"Refunding $\\\" + amount + \\\" to PayPal account for transaction \\\" + transactionId);\\n    }\\n    \\n    @Override\\n    public String getPaymentStatus(String transactionId) {\\n        return \\\"Confirmed\\\";\\n    }\\n    \\n    // PayPal specific method\\n    public void connectToPayPalAPI(String apiKey) {\\n        System.out.println(\\\"Connecting to PayPal API with key: \\\" + apiKey);\\n    }\\n}\\n\\n// Usage example\\npublic class InterfaceAbstractionDemo {\\n    public static void main(String[] args) {\\n        // Creating payment processors\\n        PaymentProcessor creditCardProcessor = new CreditCardProcessor();\\n        PaymentProcessor paypalProcessor = new PayPalProcessor();\\n        \\n        // Process payments using different processors\\n        System.out.println(\\\"=== Credit Card Payment ===\\\\n\\\");\\n        String ccTransaction = \\\"CC12345\\\";\\n        boolean ccSuccess = creditCardProcessor.processPayment(125.50);\\n        if (ccSuccess) {\\n            creditCardProcessor.printReceipt(ccTransaction, 125.50);\\n        }\\n        \\n        System.out.println(\\\"\\\\n=== PayPal Payment ===\\\\n\\\");\\n        String ppTransaction = \\\"PP98765\\\";\\n        boolean ppSuccess = paypalProcessor.processPayment(75.25);\\n        if (ppSuccess) {\\n            paypalProcessor.printReceipt(ppTransaction, 75.25);\\n        }\\n        \\n        // Failed payment due to small amount\\n        System.out.println(\\\"\\\\n=== Small Payment Attempt ===\\\\n\\\");\\n        creditCardProcessor.processPayment(0.25);\\n        \\n        // Accessing specific functionality with casting\\n        System.out.println(\\\"\\\\n=== Specific Functionality ===\\\\n\\\");\\n        if (creditCardProcessor instanceof CreditCardProcessor) {\\n            CreditCardProcessor ccp = (CreditCardProcessor) creditCardProcessor;\\n            ccp.storeCardDetails(\\\"1234-5678-9012-3456\\\", \\\"12/25\\\", \\\"123\\\");\\n            ccp.verifyUser(\\\"user123\\\");  // From SecurePayment interface\\n            ccp.encryptData(\\\"sensitive data\\\");  // From SecurePayment interface\\n        }\\n        \\n        if (paypalProcessor instanceof PayPalProcessor) {\\n            PayPalProcessor ppp = (PayPalProcessor) paypalProcessor;\\n            ppp.connectToPayPalAPI(\\\"paypal-api-key-12345\\\");\\n        }\\n    }\\n}\"}}"
        },
        "Encapsulation": {
          "description": "Encapsulation is the technique of wrapping data (variables) and code acting on the data (methods) together as a single unit. It hides internal state and requires all interaction to be performed through object methods.",
          "examples": "{\"BasicEncapsulationWithPrivateFields\":{\"title\":\"Basic Encapsulation with Private Fields\",\"code\":\"public class BankAccount {\\n    // Private fields - not accessible from outside the class\\n    private String accountNumber;\\n    private String ownerName;\\n    private double balance;\\n    private boolean isLocked;\\n    \\n    // Constructor\\n    public BankAccount(String accountNumber, String ownerName) {\\n        this.accountNumber = accountNumber;\\n        this.ownerName = ownerName;\\n        this.balance = 0.0;\\n        this.isLocked = false;\\n    }\\n    \\n    // Getter methods\\n    public String getAccountNumber() {\\n        return accountNumber;\\n    }\\n    \\n    public String getOwnerName() {\\n        return ownerName;\\n    }\\n    \\n    public double getBalance() {\\n        return balance;\\n    }\\n    \\n    public boolean isLocked() {\\n        return isLocked;\\n    }\\n    \\n    // Setter method with validation\\n    public void setOwnerName(String ownerName) {\\n        if (ownerName != null && !ownerName.trim().isEmpty()) {\\n            this.ownerName = ownerName;\\n        }\\n    }\\n    \\n    // No setter for accountNumber (immutable)\\n    // No direct setter for balance (controlled through deposit/withdraw)\\n    \\n    // Business logic methods\\n    public void deposit(double amount) {\\n        if (isLocked) {\\n            System.out.println(\\\"Transaction failed. Account is locked.\\\");\\n            return;\\n        }\\n        \\n        if (amount > 0) {\\n            this.balance += amount;\\n            System.out.println(\\\"Deposited: $\\\" + amount);\\n            System.out.println(\\\"New balance: $\\\" + this.balance);\\n        } else {\\n            System.out.println(\\\"Invalid deposit amount.\\\");\\n        }\\n    }\\n    \\n    public void withdraw(double amount) {\\n        if (isLocked) {\\n            System.out.println(\\\"Transaction failed. Account is locked.\\\");\\n            return;\\n        }\\n        \\n        if (amount > 0 && amount <= balance) {\\n            this.balance -= amount;\\n            System.out.println(\\\"Withdrawn: $\\\" + amount);\\n            System.out.println(\\\"Remaining balance: $\\\" + this.balance);\\n        } else {\\n            System.out.println(\\\"Invalid withdrawal amount or insufficient funds.\\\");\\n        }\\n    }\\n    \\n    public void lockAccount() {\\n        this.isLocked = true;\\n        System.out.println(\\\"Account locked successfully.\\\");\\n    }\\n    \\n    public void unlockAccount() {\\n        this.isLocked = false;\\n        System.out.println(\\\"Account unlocked successfully.\\\");\\n    }\\n}\"}}"
        }
      },

      "File Handling": {
        "File Creation": {
          "description": "Creating files in Java using java.io and java.nio packages.",
          "examples": "{\"CreatingAFileUsingJavaIoFile\":{\"title\":\"Creating a File using java.io.File\",\"code\":\"import java.io.File;\\nimport java.io.IOException;\\n\\npublic class FileCreationExample {\\n    public static void main(String[] args) {\\n        try {\\n            File file = new File(\\\"example.txt\\\");\\n            \\n            if (file.createNewFile()) {\\n                System.out.println(\\\"File created: \\\" + file.getName());\\n            } else {\\n                System.out.println(\\\"File already exists.\\\");\\n            }\\n            \\n            System.out.println(\\\"Absolute path: \\\" + file.getAbsolutePath());\\n        } catch (IOException e) {\\n            System.out.println(\\\"An error occurred.\\\");\\n            e.printStackTrace();\\n        }\\n    }\\n}\"},\"CreatingAFileUsingJavaNioFile\":{\"title\":\"Creating a File using java.nio.file\",\"code\":\"import java.nio.file.Files;\\nimport java.nio.file.Path;\\nimport java.nio.file.Paths;\\nimport java.io.IOException;\\n\\npublic class NioFileCreationExample {\\n    public static void main(String[] args) {\\n        try {\\n            Path path = Paths.get(\\\"nio_example.txt\\\");\\n            Files.createFile(path);\\n            System.out.println(\\\"File created at: \\\" + path.toAbsolutePath());\\n            \\n            // Creating directories\\n            Path dirPath = Paths.get(\\\"example_directory\\\");\\n            Files.createDirectory(dirPath);\\n            \\n            // Creating nested directories\\n            Path nestedDirPath = Paths.get(\\\"parent/child/grandchild\\\");\\n            Files.createDirectories(nestedDirPath);\\n        } catch (IOException e) {\\n            System.out.println(\\\"An error occurred.\\\");\\n            e.printStackTrace();\\n        }\\n    }\\n}\"}}"
        },
        "Files Read/Write": {
          "description": "Reading from and writing to files in Java.",
          "examples": "{\"ReadingAndWritingWithFileInputStreamFileOutputStream\":{\"title\":\"Reading and Writing with FileInputStream/FileOutputStream\",\"code\":\"import java.io.FileInputStream;\\nimport java.io.FileOutputStream;\\nimport java.io.IOException;\\n\\npublic class FileStreamExample {\\n    public static void main(String[] args) {\\n        // Writing bytes to a file\\n        try (FileOutputStream fos = new FileOutputStream(\\\"data.bin\\\")) {\\n            byte[] data = {65, 66, 67, 68, 69}; // ASCII values for ABCDE\\n            fos.write(data);\\n            System.out.println(\\\"Data written to file.\\\");\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        }\\n        \\n        // Reading bytes from a file\\n        try (FileInputStream fis = new FileInputStream(\\\"data.bin\\\")) {\\n            int content;\\n            System.out.print(\\\"Read from file: \\\");\\n            while ((content = fis.read()) != -1) {\\n                // Convert byte to char and print\\n                System.out.print((char) content);\\n            }\\n            System.out.println();\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\"},\"ReadingAndWritingWithBufferedReaderBufferedWriter\":{\"title\":\"Reading and Writing with BufferedReader/BufferedWriter\",\"code\":\"import java.io.BufferedReader;\\nimport java.io.BufferedWriter;\\nimport java.io.FileReader;\\nimport java.io.FileWriter;\\nimport java.io.IOException;\\n\\npublic class BufferedReaderWriterExample {\\n    public static void main(String[] args) {\\n        // Writing text to a file\\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(\\\"text.txt\\\"))) {\\n            writer.write(\\\"This is line 1\\\");\\n            writer.newLine();\\n            writer.write(\\\"This is line 2\\\");\\n            writer.newLine();\\n            writer.write(\\\"This is line 3\\\");\\n            System.out.println(\\\"Text written to file.\\\");\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        }\\n        \\n        // Reading text from a file\\n        try (BufferedReader reader = new BufferedReader(new FileReader(\\\"text.txt\\\"))) {\\n            String line;\\n            System.out.println(\\\"Reading from file:\\\");\\n            while ((line = reader.readLine()) != null) {\\n                System.out.println(line);\\n            }\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\"},\"ReadingAndWritingWithJavaNIO\":{\"title\":\"Reading and Writing with Java NIO\",\"code\":\"import java.nio.file.Files;\\nimport java.nio.file.Path;\\nimport java.nio.file.Paths;\\nimport java.nio.file.StandardOpenOption;\\nimport java.io.IOException;\\nimport java.util.List;\\nimport java.util.Arrays;\\n\\npublic class NioReadWriteExample {\\n    public static void main(String[] args) {\\n        Path path = Paths.get(\\\"nio_text.txt\\\");\\n        \\n        // Writing to a file\\n        try {\\n            List<String> lines = Arrays.asList(\\n                \\\"Line 1 - NIO example\\\",\\n                \\\"Line 2 - NIO example\\\",\\n                \\\"Line 3 - NIO example\\\"\\n            );\\n            Files.write(path, lines);\\n            System.out.println(\\\"Data written to file.\\\");\\n            \\n            // Append to file\\n            Files.write(\\n                path, \\n                Arrays.asList(\\\"Line 4 - Appended\\\", \\\"Line 5 - Appended\\\"),\\n                StandardOpenOption.APPEND\\n            );\\n            \\n            // Reading all lines from a file\\n            List<String> readLines = Files.readAllLines(path);\\n            System.out.println(\\\"\\\\nReading from file:\\\");\\n            for (String line : readLines) {\\n                System.out.println(line);\\n            }\\n            \\n            // Reading all bytes and converting to string\\n            byte[] bytes = Files.readAllBytes(path);\\n            String content = new String(bytes);\\n            System.out.println(\\\"\\\\nFile content as a single string:\\\");\\n            System.out.println(content);\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\"}}"
        },
        "File Deletion": {
          "description": "Deleting files and directories in Java.",
          "examples": "{\"DeletingFilesUsingJavaIoFile\":{\"title\":\"Deleting Files using java.io.File\",\"code\":\"import java.io.File;\\n\\npublic class FileDeletionExample {\\n    public static void main(String[] args) {\\n        // Delete a file\\n        File file = new File(\\\"to_delete.txt\\\");\\n        \\n        // Create the file first for demonstration\\n        try {\\n            file.createNewFile();\\n            System.out.println(\\\"File created: \\\" + file.getAbsolutePath());\\n            \\n            // Delete the file\\n            if (file.delete()) {\\n                System.out.println(\\\"File deleted successfully.\\\");\\n            } else {\\n                System.out.println(\\\"Failed to delete the file.\\\");\\n            }\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n        \\n        // Delete a directory\\n        File directory = new File(\\\"to_delete_dir\\\");\\n        \\n        // Create the directory first for demonstration\\n        if (directory.mkdir()) {\\n            System.out.println(\\\"Directory created: \\\" + directory.getAbsolutePath());\\n            \\n            // Delete the directory\\n            if (directory.delete()) {\\n                System.out.println(\\\"Directory deleted successfully.\\\");\\n            } else {\\n                System.out.println(\\\"Failed to delete the directory. It might not be empty.\\\");\\n            }\\n        }\\n    }\\n}\"},\"DeletingFilesUsingJavaNioFile\":{\"title\":\"Deleting Files using java.nio.file\",\"code\":\"import java.nio.file.Files;\\nimport java.nio.file.Path;\\nimport java.nio.file.Paths;\\nimport java.io.IOException;\\n\\npublic class NioFileDeletionExample {\\n    public static void main(String[] args) {\\n        try {\\n            // Create a file to delete\\n            Path filePath = Paths.get(\\\"nio_to_delete.txt\\\");\\n            Files.createFile(filePath);\\n            System.out.println(\\\"File created: \\\" + filePath.toString());\\n            \\n            // Delete the file\\n            Files.delete(filePath);\\n            System.out.println(\\\"File deleted successfully.\\\");\\n            \\n            // Create and delete a directory\\n            Path dirPath = Paths.get(\\\"nio_to_delete_dir\\\");\\n            Files.createDirectory(dirPath);\\n            System.out.println(\\\"Directory created: \\\" + dirPath.toString());\\n            \\n            Files.delete(dirPath);\\n            System.out.println(\\\"Directory deleted successfully.\\\");\\n            \\n            // Delete if exists\\n            Path anotherPath = Paths.get(\\\"may_not_exist.txt\\\");\\n            boolean deleted = Files.deleteIfExists(anotherPath);\\n            System.out.println(\\\"File deleted: \\\" + deleted);\\n            \\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\"}}"
        }
      },
      "Advanced Topics": {
        "Exception Handling": {
          "description": "Handling exceptions in Java using try-catch blocks, finally, and custom exceptions.",
          "examples": "{\"example1\":{\"title\":\"Basic Exception Handling\",\"code\":\"public class BasicExceptionHandling {\\n    public static void main(String[] args) {\\n        try {\\n            // Code that might throw an exception\\n            int result = divide(10, 0);\\n            System.out.println(\\\"Result: \\\" + result); // This won't execute if an exception occurs\\n        } catch (ArithmeticException e) {\\n            // Handle the specific exception\\n            System.out.println(\\\"Arithmetic Exception caught: \\\" + e.getMessage());\\n        } catch (Exception e) {\\n            // Handle any other exceptions\\n            System.out.println(\\\"General Exception caught: \\\" + e.getMessage());\\n        } finally {\\n            // This block always executes, regardless of whether an exception occurred\\n            System.out.println(\\\"Finally block executed.\\\");\\n        }\\n        \\n        System.out.println(\\\"Program continues after exception handling.\\\");\\n    }\\n    \\n    public static int divide(int a, int b) {\\n        return a / b; // Throws ArithmeticException if b is 0\\n    }\\n}\"},\"example2\":{\"title\":\"Try-with-Resources\",\"code\":\"import java.io.BufferedReader;\\nimport java.io.FileReader;\\nimport java.io.IOException;\\n\\npublic class TryWithResourcesExample {\\n    public static void main(String[] args) {\\n        // Try-with-resources automatically closes resources\\n        try (BufferedReader reader = new BufferedReader(new FileReader(\\\"sample.txt\\\"))) {\\n            String line;\\n            while ((line = reader.readLine()) != null) {\\n                System.out.println(line);\\n            }\\n        } catch (IOException e) {\\n            System.out.println(\\\"IO Exception occurred: \\\" + e.getMessage());\\n        }\\n        \\n        // Multiple resources can be managed\\n        try (\\n            BufferedReader reader1 = new BufferedReader(new FileReader(\\\"file1.txt\\\"));\\n            BufferedReader reader2 = new BufferedReader(new FileReader(\\\"file2.txt\\\"))\\n        ) {\\n            // Code using both resources\\n            String line1 = reader1.readLine();\\n            String line2 = reader2.readLine();\\n            System.out.println(line1 + \\\" | \\\" + line2);\\n        } catch (IOException e) {\\n            System.out.println(\\\"IO Exception occurred: \\\" + e.getMessage());\\n        }\\n    }\\n}\"},\"example3\":{\"title\":\"Custom Exceptions\",\"code\":\"// Custom exception class\\nclass InsufficientFundsException extends Exception {\\n    private double amount;\\n    \\n    public InsufficientFundsException(double amount) {\\n        super(\\\"Insufficient funds: Needed $\\\" + amount + \\\" more\\\");\\n        this.amount = amount;\\n    }\\n    \\n    public double getAmount() {\\n        return amount;\\n    }\\n}\\n\\nclass BankAccount {\\n    private String accountNumber;\\n    private double balance;\\n    \\n    public BankAccount(String accountNumber, double initialBalance) {\\n        this.accountNumber = accountNumber;\\n        this.balance = initialBalance;\\n    }\\n    \\n    public void withdraw(double amount) throws InsufficientFundsException {\\n        if (amount > balance) {\\n            double shortfall = amount - balance;\\n            throw new InsufficientFundsException(shortfall);\\n        }\\n        \\n        balance -= amount;\\n        System.out.println(\\\"Withdrawn: $\\\" + amount);\\n        System.out.println(\\\"New balance: $\\\" + balance);\\n    }\\n}\\n\\npublic class CustomExceptionExample {\\n    public static void main(String[] args) {\\n        BankAccount account = new BankAccount(\\\"123456\\\", 1000);\\n        \\n        try {\\n            account.withdraw(800); // This should work\\n            account.withdraw(500); // This should throw InsufficientFundsException\\n        } catch (InsufficientFundsException e) {\\n            System.out.println(\\\"Transaction failed: \\\" + e.getMessage());\\n            System.out.println(\\\"You need $\\\" + e.getAmount() + \\\" more to complete this transaction.\\\");\\n        }\\n    }\\n}\"},\"example4\":{\"title\":\"Exception Chaining\",\"code\":\"import java.io.IOException;\\n\\npublic class ExceptionChainingExample {\\n    public static void main(String[] args) {\\n        try {\\n            processFile(\\\"data.txt\\\");\\n        } catch (DataProcessingException e) {\\n            System.out.println(\\\"Error: \\\" + e.getMessage());\\n            System.out.println(\\\"Caused by: \\\" + e.getCause().getMessage());\\n            \\n            // Print full stack trace\\n            e.printStackTrace();\\n        }\\n    }\\n    \\n    public static void processFile(String filename) throws DataProcessingException {\\n        try {\\n            readFile(filename);\\n            // Process data...\\n        } catch (IOException e) {\\n            // Wrap the original exception in a custom exception\\n            throw new DataProcessingException(\\\"Could not process file: \\\" + filename, e);\\n        }\\n    }\\n    \\n    public static void readFile(String filename) throws IOException {\\n        // This is a simulation - in a real scenario, this would actually try to open a file\\n        boolean fileExists = false;\\n        if (!fileExists) {\\n            throw new IOException(\\\"File not found: \\\" + filename);\\n        }\\n    }\\n}\\n\\n// Custom exception for chaining\\nclass DataProcessingException extends Exception {\\n    public DataProcessingException(String message, Throwable cause) {\\n        super(message, cause);\\n    }\\n}\"}}"
        },
        "Regex": {
          "description": "Using regular expressions in Java with the java.util.regex package.",
          "examples": "{\"example1\":{\"title\":\"Basic Regex Pattern Matching\",\"code\":\"import java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\n\\npublic class RegexBasicExample {\\n    public static void main(String[] args) {\\n        // Simple pattern matching\\n        Pattern pattern = Pattern.compile(\\\"hello\\\");\\n        Matcher matcher = pattern.matcher(\\\"hello world\\\");\\n        \\n        boolean matchFound = matcher.find();\\n        System.out.println(\\\"Match found: \\\" + matchFound);\\n        \\n        // Get the matched substring\\n        if (matchFound) {\\n            System.out.println(\\\"Match: \\\" + matcher.group());\\n            System.out.println(\\\"Start index: \\\" + matcher.start());\\n            System.out.println(\\\"End index: \\\" + matcher.end());\\n        }\\n        \\n        // Case insensitive matching\\n        Pattern patternCI = Pattern.compile(\\\"hello\\\", Pattern.CASE_INSENSITIVE);\\n        Matcher matcherCI = patternCI.matcher(\\\"Hello World\\\");\\n        System.out.println(\\\"Case insensitive match: \\\" + matcherCI.find());\\n        \\n        // Check if entire string matches pattern\\n        System.out.println(\\\"Full match: \\\" + Pattern.matches(\\\"hello\\\", \\\"hello\\\"));\\n        System.out.println(\\\"Full match: \\\" + Pattern.matches(\\\"hello\\\", \\\"hello world\\\"));\\n    }\\n}\"},\"example2\":{\"title\":\"Regex Character Classes and Quantifiers\",\"code\":\"import java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\n\\npublic class RegexPatternsExample {\\n    public static void main(String[] args) {\\n        // Character classes\\n        testPattern(\\\"[0-9]+\\\", \\\"I have 123 apples and 456 oranges\\\"); // Match one or more digits\\n        testPattern(\\\"[a-zA-Z]+\\\", \\\"Hello123World\\\"); // Match one or more letters\\n        testPattern(\\\"[^0-9]\\\", \\\"1a2b3c\\\"); // Match anything that's not a digit\\n        \\n        // Predefined character classes\\n        testPattern(\\\"\\\\\\\\d+\\\", \\\"Phone: 555-123-4567\\\"); // \\\\d matches digits\\n        testPattern(\\\"\\\\\\\\w+\\\", \\\"Hello_123\\\"); // \\\\w matches word characters (letters, digits, underscore)\\n        testPattern(\\\"\\\\\\\\s+\\\", \\\"Hello   World\\\"); // \\\\s matches whitespace\\n        \\n        // Quantifiers\\n        testPattern(\\\"a*\\\", \\\"aaabbaaa\\\"); // * means 0 or more\\n        testPattern(\\\"a+\\\", \\\"aaabbaaa\\\"); // + means 1 or more\\n        testPattern(\\\"a?\\\", \\\"aaabbaaa\\\"); // ? means 0 or 1\\n        testPattern(\\\"a{2}\\\", \\\"aaabbaaa\\\"); // {n} means exactly n\\n        testPattern(\\\"a{2,4}\\\", \\\"aaabbaaa\\\"); // {n,m} means between n and m\\n        \\n        // Email validation example\\n        String emailRegex = \\\"^[a-zA-Z0-9_+&*-]+(?:\\\\\\\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\\\\\\\.)+[a-zA-Z]{2,7}$\\\";\\n        testPattern(emailRegex, \\\"user@example.com\\\");\\n        testPattern(emailRegex, \\\"invalid.email@com\\\");\\n    }\\n    \\n    public static void testPattern(String regex, String input) {\\n        Pattern pattern = Pattern.compile(regex);\\n        Matcher matcher = pattern.matcher(input);\\n        \\n        System.out.println(\\\"\\\\nPattern: \\\" + regex);\\n        System.out.println(\\\"Input: \\\" + input);\\n        \\n        boolean found = false;\\n        while (matcher.find()) {\\n            System.out.println(\\\"Found match: '\\\" + matcher.group() + \\\"' at position \\\" + \\n                             matcher.start() + \\\"-\\\" + (matcher.end() - 1));\\n            found = true;\\n        }\\n        \\n        if (!found) {\\n            System.out.println(\\\"No matches found.\\\");\\n        }\\n    }\\n}\"},\"example3\":{\"title\":\"String Operations with Regex\",\"code\":\"import java.util.Arrays;\\n\\npublic class RegexStringOperationsExample {\\n    public static void main(String[] args) {\\n        String input = \\\"The quick brown fox jumps over the lazy dog.\\\";\\n        \\n        // Split string using regex\\n        String[] words = input.split(\\\"\\\\\\\\s+\\\"); // Split by one or more whitespace characters\\n        System.out.println(\\\"Split result: \\\" + Arrays.toString(words));\\n        \\n        // Replace using regex\\n        String replaced = input.replaceAll(\\\"[aeiou]\\\", \\\"*\\\"); // Replace all vowels with asterisks\\n        System.out.println(\\\"After replacing vowels: \\\" + replaced);\\n        \\n        // Replace first occurrence only\\n        String replacedFirst = input.replaceFirst(\\\"[aeiou]\\\", \\\"*\\\");\\n        System.out.println(\\\"After replacing first vowel: \\\" + replacedFirst);\\n        \\n        // Check if string matches pattern\\n        boolean matches = input.matches(\\\".*fox.*\\\"); // Contains the word \\\"fox\\\"\\n        System.out.println(\\\"Contains 'fox': \\\" + matches);\\n        \\n        // Extract numbers from text\\n        String text = \\\"The price is $25.99 and the quantity is 3\\\";\\n        String[] numbers = text.split(\\\"[^0-9.]+\\\");\\n        System.out.println(\\\"Extracted numbers: \\\" + Arrays.toString(numbers));\\n        \\n        // Format phone number\\n        String phoneNumber = \\\"5551234567\\\";\\n        String formatted = phoneNumber.replaceFirst(\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\", \\\"($1) $2-$3\\\");\\n        System.out.println(\\\"Formatted phone number: \\\" + formatted);\\n    }\\n}\"},\"example4\":{\"title\":\"Regex Groups and Backreferences\",\"code\":\"import java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\n\\npublic class RegexGroupsExample {\\n    public static void main(String[] args) {\\n        // Using capturing groups\\n        Pattern pattern = Pattern.compile(\\\"(\\\\\\\\d{3})-(\\\\\\\\d{3})-(\\\\\\\\d{4})\\\");\\n        Matcher matcher = pattern.matcher(\\\"My phone number is 555-123-4567.\\\");\\n        \\n        if (matcher.find()) {\\n            System.out.println(\\\"Full match: \\\" + matcher.group(0)); // The entire match\\n            System.out.println(\\\"Group 1: \\\" + matcher.group(1)); // First capture group (area code)\\n            System.out.println(\\\"Group 2: \\\" + matcher.group(2)); // Second capture group (prefix)\\n            System.out.println(\\\"Group 3: \\\" + matcher.group(3)); // Third capture group (line number)\\n        }\\n        \\n        // Named capturing groups (Java 7+)\\n        Pattern namedPattern = Pattern.compile(\\\"(?<areaCode>\\\\\\\\d{3})-(?<prefix>\\\\\\\\d{3})-(?<lineNum>\\\\\\\\d{4})\\\");\\n        Matcher namedMatcher = namedPattern.matcher(\\\"Contact: 800-555-1212\\\");\\n        \\n        if (namedMatcher.find()) {\\n            System.out.println(\\\"\\\\nArea Code: \\\" + namedMatcher.group(\\\"areaCode\\\"));\\n            System.out.println(\\\"Prefix: \\\" + namedMatcher.group(\\\"prefix\\\"));\\n            System.out.println(\\\"Line Number: \\\" + namedMatcher.group(\\\"lineNum\\\"));\\n        }\\n        \\n        // Backreferences - find repeated words\\n        Pattern repeatPattern = Pattern.compile(\\\"\\\\\\\\b(\\\\\\\\w+)\\\\\\\\s+\\\\\\\\1\\\\\\\\b\\\");\\n        Matcher repeatMatcher = repeatPattern.matcher(\\\"The the quick brown fox jumps over the lazy dog dog.\\\");\\n        \\n        System.out.println(\\\"\\\\nRepeated words:\\\");\\n        while (repeatMatcher.find()) {\\n            System.out.println(\\\"Repeated word: \\\" + repeatMatcher.group(1) + \\n                             \\\" at position \\\" + repeatMatcher.start());\\n        }\\n        \\n        // Backreferences in replacement\\n        String htmlText = \\\"<h1>Title</h1><p>Paragraph</p>\\\";\\n        // Swap tag contents\\n        String swapped = htmlText.replaceAll(\\\"<([^>]*)>([^<]*)</\\\\\\\\1>\\\", \\\"<$1>REPLACED: $2</$1>\\\");\\n        System.out.println(\\\"\\\\nOriginal HTML: \\\" + htmlText);\\n        System.out.println(\\\"Modified HTML: \\\" + swapped);\\n    }\\n}\"}}"
        }
      }
    }
  }
]
